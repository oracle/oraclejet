{
  "version": "14.1.0",
  "components": {
    "oj-accordion": {
      "name": "oj-accordion",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Accordion",
      "implements": [
        "AccordionElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojaccordion",
          "defaultColumns": "3",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-accordion",
          "uxSpecs": [
            "accordion"
          ]
        }
      },
      "description": "An accordion displays a set of collapsible child elements.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojAccordion.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "multiple"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "expanded"
          ]
        }
      ],
      "properties": {
        "expanded": {
          "description": "A list of expanded child collapsible items.",
          "type": "Array<string>|Array<number>|Array<Object>|null",
          "displayName": "Expanded",
          "value": null,
          "writeback": true,
          "help": "#expanded"
        },
        "multiple": {
          "description": "Specifies whether multiple collapsible items can be open at the same time.",
          "type": "boolean",
          "displayName": "Multiple",
          "value": false,
          "help": "#multiple"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the accordion.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "description": "Triggered immediately before any collapsible in the accordion is collapsed.",
          "cancelable": true,
          "help": "#event:beforeCollapse",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered immediately before any collapsible in the accordion is expanded.",
          "cancelable": true,
          "help": "#event:beforeExpand",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after any collapsible in the accordion has been collapsed.",
          "help": "#event:collapse",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after any collapsible in the accordion is expanded.",
          "help": "#event:expand",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The <oj-accordion> element accepts one or more <oj-collapsible> elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "CollapsibleElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-action-card": {
      "name": "oj-action-card",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "ActionCardElement"
      ],
      "description": "An Action Card is an actionable container rendering related information",
      "displayName": "Action Card",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-object-card",
          "uxSpecs": [
            "card"
          ]
        },
        "vbdt": {
          "module": "ojs/ojactioncard",
          "defaultColumns": "1",
          "minColumns": "1"
        }
      },
      "styleVariables": [
        {
          "name": "oj-action-card-scale-hover",
          "description": "Action card hover scale",
          "help": "#ojactioncard-css-set1"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojActionCard.html",
      "since": "9.1.0",
      "slots": {
        "": {
          "description": "The default slot is the content of the card. The oj-action-card element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when the card is clicked, tapped, or upon keyboard ENTER",
          "help": "#event:ojAction",
          "detail": {
            "originalEvent": {
              "type": "Event"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-avatar": {
      "name": "oj-avatar",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "AvatarElement"
      ],
      "description": "An avatar represents a person or entity as initials or an image.",
      "displayName": "Avatar",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-avatar",
          "uxSpecs": [
            "avatar"
          ]
        },
        "vbdt": {
          "module": "ojs/ojavatar",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-avatar-group-image"
              ],
              "description": "Use to display avatar group placeholder image instead of single person placeholder image."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojAvatar.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "size",
            "background"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "src",
            "initials"
          ]
        }
      ],
      "since": "4.0.0",
      "styleClasses": [
        {
          "name": "oj-avatar-group-image",
          "kind": "class",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "'oj-avatar-group-image' class has been deprecated.  The group placeholder icon can still be shown by setting the icon-class attribute to 'oj-ux-ico-contact-group'."
            }
          ],
          "displayName": "Avatar Group Image",
          "description": "Use to display avatar group placeholder image instead of single person placeholder image.",
          "help": "#oj-avatar-group-image"
        },
        {
          "name": "oj-avatar-2xs",
          "kind": "class",
          "displayName": "Extra Extra Small Avatar",
          "description": "Extra extra small avatar implementation.",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-xxs",
          "kind": "class",
          "displayName": "Extra Extra Small Avatar(deprecated)",
          "description": "Extra extra small avatar implementation(deprecated).",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-xs",
          "kind": "class",
          "displayName": "Extra Small Avatar",
          "description": "Extra small avatar implementation.",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-sm",
          "kind": "class",
          "displayName": "Small Avatar",
          "description": "Small avatar implementation.",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-lg",
          "kind": "class",
          "displayName": "Large Avatar",
          "description": "Large avatar implementation.",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-xl",
          "kind": "class",
          "displayName": "Extra Large Avatar",
          "description": "Extra large avatar implementation.",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-2xl",
          "kind": "class",
          "displayName": "Extra Extra Large Avatar(deprecated)",
          "description": "Extra extra large avatar implementation(deprecated).",
          "scope": "protected"
        },
        {
          "name": "oj-avatar-xxl",
          "kind": "class",
          "displayName": "Extra Extra Large Avatar",
          "description": "Extra extra large avatar implementation.",
          "scope": "protected"
        }
      ],
      "styleVariables": [
        {
          "name": "oj-avatar-bg-color",
          "description": "Avatar background color",
          "formats": [
            "color"
          ],
          "help": "#ojavatar-css-set1"
        },
        {
          "name": "oj-avatar-text-color",
          "description": "Avatar text color",
          "formats": [
            "color"
          ],
          "help": "#ojavatar-css-set1"
        },
        {
          "name": "oj-avatar-pattern-display",
          "description": "Avatar pattern display behavior.  This is only supported in Redwood.",
          "keywords": [
            "block",
            "none"
          ],
          "help": "#ojavatar-css-set2"
        },
        {
          "name": "oj-avatar-size",
          "description": "Avatar size",
          "formats": [
            "length"
          ],
          "help": "#ojavatar-css-set2"
        },
        {
          "name": "oj-avatar-border-radius",
          "description": "Avatar border radius, only applied to the square avatar",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#ojavatar-css-set2"
        },
        {
          "name": "oj-avatar-initials-font-size",
          "description": "Avatar font size for initials",
          "formats": [
            "length"
          ],
          "help": "#ojavatar-css-set3"
        },
        {
          "name": "oj-avatar-initials-font-weight",
          "description": "Avatar font weight for initials",
          "formats": [
            "font_weight"
          ],
          "help": "#ojavatar-css-set3"
        }
      ],
      "properties": {
        "background": {
          "type": "string",
          "description": "Specifies the background of the avatar.",
          "displayName": "Background",
          "help": "#background",
          "status": [
            {
              "type": "deprecated",
              "target": "propertyValue",
              "value": [
                "red",
                "forest",
                "mauve"
              ],
              "since": "10.0.0",
              "description": "This value will be removed in the future. Please use other colors."
            }
          ],
          "propertyEditorValues": {
            "neutral": {
              "description": "Neutral background (default, if unspecified)",
              "displayName": "Neutral"
            },
            "orange": {
              "description": "Orange background",
              "displayName": "Orange"
            },
            "green": {
              "description": "Green background",
              "displayName": "Green"
            },
            "teal": {
              "description": "Teal background",
              "displayName": "Teal"
            },
            "blue": {
              "description": "Blue background",
              "displayName": "Blue"
            },
            "slate": {
              "description": "Slate background",
              "displayName": "Slate"
            },
            "mauve": {
              "description": "Mauve background",
              "displayName": "Mauve"
            },
            "pink": {
              "description": "Pink background",
              "displayName": "Pink"
            },
            "purple": {
              "description": "Purple background",
              "displayName": "Purple"
            },
            "lilac": {
              "description": "Lilac background",
              "displayName": "Lilac"
            },
            "gray": {
              "description": "Gray background",
              "displayName": "Gray"
            },
            "red": {
              "description": "Red background",
              "displayName": "Red"
            },
            "forest": {
              "description": "Forest background",
              "displayName": "Forest"
            }
          },
          "enumValues": [
            "neutral",
            "orange",
            "green",
            "teal",
            "blue",
            "slate",
            "mauve",
            "pink",
            "purple",
            "lilac",
            "gray",
            "red",
            "forest"
          ],
          "value": "neutral"
        },
        "initials": {
          "type": "string",
          "description": "Specifies the initials of the avatar.",
          "displayName": "Initials",
          "help": "#initials",
          "translatable": true,
          "value": null
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the avatar.",
          "displayName": "Size",
          "status": [
            {
              "type": "deprecated",
              "target": "propertyValue",
              "value": [
                "xxl",
                "xxs"
              ],
              "since": "13.0.0",
              "description": "These values will be removed in the future. Please use '2xl' or '2xs' instead."
            }
          ],
          "help": "#size",
          "propertyEditorValues": {
            "2xs": {
              "description": "extra, extra small avatar",
              "displayName": "Extra Extra Small"
            },
            "xxs": {
              "description": "extra, extra small avatar(deprecated)",
              "displayName": "Extra Extra Small(deprecated)"
            },
            "xs": {
              "description": "extra small avatar",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small avatar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium avatar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large avatar",
              "displayName": "Large"
            },
            "xl": {
              "description": "extra large avatar",
              "displayName": "Extra Large"
            },
            "2xl": {
              "description": "extra, extra large avatar",
              "displayName": "Extra Extra Large"
            },
            "xxl": {
              "description": "extra, extra large avatar(deprecated)",
              "displayName": "Extra Extra Large(deprecated)"
            }
          },
          "enumValues": [
            "lg",
            "md",
            "sm",
            "2xs",
            "xxs",
            "xs",
            "xl",
            "2xl",
            "xxl"
          ],
          "value": "md"
        },
        "src": {
          "type": "string",
          "description": "Specifies the source for the image of the avatar.",
          "displayName": "Src",
          "help": "#src",
          "value": null
        },
        "iconClass": {
          "type": "string",
          "description": "The icon class to be displayed.",
          "displayName": "Icon Class",
          "help": "#iconClass",
          "value": ""
        },
        "shape": {
          "type": "string",
          "description": "Specifies the shape of the avatar.",
          "displayName": "Shape",
          "help": "#shape",
          "propertyEditorValues": {
            "square": {
              "description": "square avatar (default, if unspecified)",
              "displayName": "Square Avatar"
            },
            "circle": {
              "description": "circular avatar",
              "displayName": "Circular Avatar"
            }
          },
          "enumValues": [
            "square",
            "circle"
          ]
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-bind-dom": {
      "name": "oj-bind-dom",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind DOM",
      "implements": [
        "BindDomElement"
      ],
      "type": "core",
      "since": "6.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbinddom",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-binding-control"
        }
      },
      "description": "An oj-bind-dom element renders HTML content with access to passed in data properties.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindDom.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "config.view"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "config.data"
          ]
        }
      ],
      "properties": {
        "config": {
          "description": "Configuration object that defines a view and data available to the oj-bind-dom element. The configuration object can be specified directly or via a Promise.",
          "type": "object|Promise",
          "displayName": "Config",
          "help": "#config",
          "properties": {
            "data": {
              "description": "The data available to the view when expressions are evaluated. Note that the element's binding context will not be made available.",
              "type": "object",
              "displayName": "Data"
            },
            "view": {
              "description": "An array of nodes to be inserted into the DOM. See the Help documenation for more information.",
              "type": "Array<Node>",
              "displayName": "View"
            }
          }
        }
      }
    },
    "oj-bind-for-each": {
      "name": "oj-bind-for-each",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind For Each",
      "implements": [
        "BindForEachElement"
      ],
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-for-each"
        }
      },
      "description": "An oj-bind-for-each binds items of an array to the specified markup section. The markup section is duplicated for each array item when element is rendered.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindForEach.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the array item. This is useful if multiple oj-bind-for-each elements are nested to provide access to the data for each iteration level.",
          "type": "string",
          "displayName": "As",
          "help": "#as"
        },
        "data": {
          "description": "The array or DataProvider that you wish to iterate over. See the Help documentation for more information.",
          "type": "array|object",
          "displayName": "Data",
          "help": "#data"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-for-each default slot is used to specify the template for binding items of an array if no named slots were defined by the application.",
          "displayName": "default",
          "maxItems": 1,
          "help": "#Default",
          "data": {
            "data": {
              "description": "The current array item being rendered.",
              "type": "object"
            },
            "index": {
              "description": "Zero-based index of the current array item being rendered. The index value is not updated in response to array additions and removals and is only recommended for static arrays.",
              "type": "number"
            },
            "observableIndex": {
              "description": "An observable that refers to the zero-based index of the current array item being rendered. The observableIndex value is updated in response to array additions and removals and can be used for both static and dynamic arrays.",
              "type": "number"
            }
          }
        },
        "noData": {
          "description": "The noData slot is used to specify the content to render when the data is empty.",
          "maxItems": 1,
          "help": "#noData",
          "data": {}
        }
      }
    },
    "oj-bind-if": {
      "name": "oj-bind-if",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind If",
      "implements": [
        "BindIfElement"
      ],
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-if"
        }
      },
      "description": "An oj-bind-if renders its contents only if a provided test returns true.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindIf.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "test"
          ]
        }
      ],
      "properties": {
        "test": {
          "description": "The test condition for the if clause. The children of the element will only be rendered if the test is true.",
          "type": "boolean",
          "displayName": "Test",
          "help": "#test"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-if default slot is used to specify content that will be rendered when the test condition evaluates to true.",
          "displayName": "default",
          "help": "#Default"
        }
      }
    },
    "oj-bind-slot": {
      "name": "oj-bind-slot",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind Slot",
      "implements": [
        "BindSlotElement"
      ],
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcomposite",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-binding-control"
        }
      },
      "description": "An oj-bind-slot acts as a placeholder for child DOM to appear in a specified slot.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindSlot.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "index",
            "name"
          ]
        }
      ],
      "properties": {
        "index": {
          "description": "An index value allowing the slot children to be individually slotted. This is useful when the composite needs to add additional DOM around slotted children.",
          "type": "number",
          "displayName": "Index",
          "help": "#index"
        },
        "name": {
          "description": "The name of the slot.",
          "type": "string",
          "displayName": "Name",
          "help": "#name"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-slot default slot is used to specify fallback content which will be used in the DOM if the slot has no assigned nodes.",
          "displayName": "default",
          "help": "#Default"
        }
      }
    },
    "oj-bind-template-slot": {
      "name": "oj-bind-template-slot",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind Template Slot",
      "implements": [
        "BindTemplateSlotElement"
      ],
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcomposite",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-binding-control"
        }
      },
      "description": "An oj-bind-template-slot acts as a placeholder for stamped child DOM to appear in a specified slot.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindTemplateSlot.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "name"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An optional component-level alias for the context variable that can be referenced inside the default template DOM.",
          "type": "string",
          "displayName": "As",
          "help": "#as"
        },
        "data": {
          "description": "The object containing additional context variables to extend the stamped template nodes's binding context.",
          "type": "object",
          "displayName": "Data",
          "help": "#data"
        },
        "name": {
          "description": "The name of the slot.",
          "type": "string",
          "displayName": "Name",
          "help": "#name"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-template-slot default slot is used to specify a fallback template that will be used to stamp child DOM if the slot has no assigned template nodes.",
          "displayName": "default",
          "maxItems": 1,
          "help": "#Default"
        }
      }
    },
    "oj-bind-text": {
      "name": "oj-bind-text",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Bind Text",
      "implements": [
        "BindTextElement"
      ],
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-select-text"
        }
      },
      "description": "An oj-bind-text binds a text node to an expression.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojBindText.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "value": {
          "description": "The value of the text node.",
          "type": "string",
          "displayName": "Value",
          "translatable": true,
          "help": "#value"
        }
      }
    },
    "oj-button": {
      "name": "oj-button",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "ButtonElement"
      ],
      "description": "Buttons direct users to initiate or take actions and work with a single tap, click, or keystroke.",
      "displayName": "Button",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-button-sm",
                "oj-button-lg",
                "oj-button-xl"
              ],
              "description": "Makes the button small, large, or extra large."
            },
            {
              "styleGroup": [
                "oj-button-confirm"
              ],
              "description": "Identifies an action to confirm. Designed for use with a push button."
            },
            {
              "styleGroup": [
                "oj-button-primary"
              ],
              "description": "Draws attention to the button, often identifying the primary action in a set of buttons. Designed for use with a push button. In some themes, this class does nothing."
            },
            {
              "styleGroup": [
                "oj-button-full-width"
              ],
              "description": "Apply 100% full-width to the button."
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-button",
          "uxSpecs": [
            "button"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojButton.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "display",
            "chroming",
            "disabled"
          ]
        }
      ],
      "since": "0.6.0",
      "styleClasses": [
        {
          "name": "button-size",
          "kind": "set",
          "displayName": "Button Size",
          "description": "Makes the button small, large, or extra large.",
          "help": "#button-size",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-button-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Makes the button small."
            },
            {
              "name": "oj-button-lg",
              "kind": "class",
              "displayName": "Large",
              "description": "Makes the button large."
            },
            {
              "name": "oj-button-xl",
              "kind": "class",
              "displayName": "X-Large",
              "description": "Makes the button extra large.",
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "This class will be removed in the future."
                }
              ]
            }
          ]
        },
        {
          "name": "oj-button-confirm",
          "kind": "class",
          "displayName": "Confirm",
          "description": "Identifies an action to confirm. Designed for use with a push button.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "This class will be removed in the future."
            }
          ],
          "help": "#oj-button-confirm"
        },
        {
          "name": "oj-button-primary",
          "kind": "class",
          "displayName": "Primary",
          "description": "Draws attention to the button, often identifying the primary action in a set of buttons.Designed for use with a push button. In some themes, this class does nothing.",
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "This class will be removed in the future. Please use 'callToAction' chroming instead."
            }
          ],
          "help": "#oj-button-primary"
        },
        {
          "name": "oj-button-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Apply 100% full-width to the button.",
          "help": "#oj-button-full-width"
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        }
      ],
      "slots": {
        "": {
          "description": "The default slot is the button's text label. The oj-button element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        },
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-button element accepts DOM nodes as children with the endIcon slot.",
          "help": "#endIcon"
        },
        "contextMenu": {
          "description": "The contextmenu slot is to add context menu to the button. The oj-button element accepts <oj-menu> as children with the contextmenu slot.",
          "help": "#contextMenu",
          "maxItems": 1,
          "preferredContent": [
            "MenuElement"
          ],
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ]
        }
      },
      "properties": {
        "disabled": {
          "type": "boolean",
          "description": "Specifies that the button element should be disabled.",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "display": {
          "type": "string",
          "description": "Specifies whether the button displays label and icons, or just icons.",
          "displayName": "Display",
          "help": "#display",
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the label.",
              "displayName": "Label"
            }
          },
          "enumValues": [
            "all",
            "label",
            "icons"
          ],
          "value": "all"
        },
        "label": {
          "type": "string",
          "description": "Text to show in the button. The default is from the label in the DOM.",
          "displayName": "Label",
          "help": "#label",
          "translatable": true
        },
        "translations": {
          "type": "object",
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "displayName": "Translations",
          "help": "#translations",
          "translatable": true
        },
        "chroming": {
          "type": "string",
          "description": "Indicates in what states the button has chrome (background and border).",
          "displayName": "Chroming",
          "help": "#chroming",
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "callToAction": {
              "description": "A Call To Action (CTA) button guides the user to take or complete the action that is the main goal of the page or page section. There should only be one CTA button on a page at any given time.",
              "displayName": "Call To Action"
            },
            "danger": {
              "description": "A Danger button alerts the user to a dangerous situation.",
              "displayName": "Danger"
            },
            "full": {
              "description": "Please use solid instead. In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states.",
              "displayName": "Half"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            }
          },
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use solid instead.",
              "target": "propertyValue",
              "value": [
                "full"
              ]
            },
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use borderless instead.",
              "target": "propertyValue",
              "value": [
                "half"
              ]
            }
          ],
          "enumValues": [
            "full",
            "borderless",
            "callToAction",
            "danger",
            "half",
            "outlined",
            "solid"
          ],
          "binding": {
            "consume": {
              "name": "containerChroming"
            }
          }
        }
      },
      "events": {
        "ojAction": {
          "bubbles": true,
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet \" + \"accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "help": "#event:action",
          "detail": {
            "originalEvent": {
              "type": "Event"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "blur": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-buttonset-many": {
      "name": "oj-buttonset-many",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Buttonset Many",
      "implements": [
        "ButtonsetManyElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-button-sm",
                "oj-button-lg"
              ],
              "description": "Makes the button small or large."
            },
            {
              "styleGroup": [
                "oj-buttonset-width-auto"
              ],
              "description": "Sets button set width to content size."
            },
            {
              "styleGroup": [
                "oj-buttonset-width-equal"
              ],
              "description": "Sets button set width to be equal."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-button-set-many",
          "uxSpecs": [
            "toggle-button"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "button-size",
          "kind": "set",
          "displayName": "Button Size",
          "description": "Makes the button small or large.",
          "help": "#button-size",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-button-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Makes the button small."
            },
            {
              "name": "oj-button-lg",
              "kind": "class",
              "displayName": "Large",
              "description": "Makes the button large."
            }
          ]
        },
        {
          "name": "oj-buttonset-width-auto",
          "kind": "class",
          "displayName": "Auto-Width",
          "description": "Sets button set width to content size.",
          "help": "#oj-buttonset-width-auto"
        },
        {
          "name": "oj-buttonset-width-equal",
          "kind": "class",
          "displayName": "Equal Width",
          "description": "Sets button set width to be equal.",
          "help": "#oj-buttonset-width-equal"
        }
      ],
      "description": "A buttonset many is a grouping of related buttons where any number of buttons may be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojButtonsetMany.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "display",
            "chroming",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "chroming": {
          "description": "Indicates in what states the buttonset has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "#chroming",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use solid instead.",
              "target": "propertyValue",
              "value": [
                "full"
              ]
            },
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use borderless instead.",
              "target": "propertyValue",
              "value": [
                "half"
              ]
            }
          ],
          "enumValues": [
            "borderless",
            "full",
            "half",
            "outlined",
            "solid"
          ],
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "full": {
              "description": "Please use solid instead. In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states.",
              "displayName": "Half"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI. Note that this option is not supported in the Redwood theme.",
              "displayName": "Solid"
            }
          }
        },
        "describedBy": {
          "description": "buttonset's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies that the buttonset element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "display": {
          "description": "Specifies whether the buttonset displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "#display",
          "enumValues": [
            "all",
            "icons",
            "label"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the label.",
              "displayName": "Label"
            }
          }
        },
        "focusManagement": {
          "description": "Should be set to none when the buttonset is placed within a toolbar.",
          "type": "string",
          "displayName": "Focus Management",
          "value": "oneTabstop",
          "help": "#focusManagement",
          "enumValues": [
            "none",
            "oneTabstop"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Focus management is disabled, to avoid interfering with the focus management of a containing component.",
              "displayName": "None"
            },
            "oneTabstop": {
              "description": "Focus management is enabled. The Buttonset is a single tabstop with arrow-key navigation.",
              "displayName": "One Tabstop"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        },
        "value": {
          "description": "Indicates which oj-options in the buttonset are selected.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-buttonset-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-buttonset-one": {
      "name": "oj-buttonset-one",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Buttonset One",
      "implements": [
        "ButtonsetOneElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-button-sm",
                "oj-button-lg"
              ],
              "description": "Makes the button small or large."
            },
            {
              "styleGroup": [
                "oj-buttonset-width-auto"
              ],
              "description": "Sets button set width to content size."
            },
            {
              "styleGroup": [
                "oj-buttonset-width-equal"
              ],
              "description": "Sets button set width to be equal."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-button-set-one",
          "uxSpecs": [
            "toggle-button"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "button-size",
          "kind": "set",
          "displayName": "Button Size",
          "description": "Makes the button small or large.",
          "help": "#button-size",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-button-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Makes the button small."
            },
            {
              "name": "oj-button-lg",
              "kind": "class",
              "displayName": "Large",
              "description": "Makes the button large."
            }
          ]
        },
        {
          "name": "oj-buttonset-width-auto",
          "kind": "class",
          "displayName": "Auto-Width",
          "description": "Sets button set width to content size.",
          "help": "#oj-buttonset-width-auto"
        },
        {
          "name": "oj-buttonset-width-equal",
          "kind": "class",
          "displayName": "Equal Width",
          "description": "Sets button set width to be equal.",
          "help": "#oj-buttonset-width-equal"
        }
      ],
      "description": "A buttonset one is a grouping of related buttons where only one button may be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojButtonsetOne.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "display",
            "chroming",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "chroming": {
          "description": "Indicates in what states the buttonset has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "#chroming",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use solid instead.",
              "target": "propertyValue",
              "value": [
                "full"
              ]
            },
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use borderless instead.",
              "target": "propertyValue",
              "value": [
                "half"
              ]
            }
          ],
          "enumValues": [
            "borderless",
            "full",
            "half",
            "outlined",
            "solid"
          ],
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "full": {
              "description": "Please use solid instead. In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states.",
              "displayName": "Half"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI. Note that this option is not supported in the Redwood theme.",
              "displayName": "Solid"
            }
          }
        },
        "describedBy": {
          "description": "buttonset's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies that the buttonset element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "display": {
          "description": "Specifies whether the buttonset displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "#display",
          "enumValues": [
            "all",
            "icons",
            "label"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the label.",
              "displayName": "Label"
            }
          }
        },
        "focusManagement": {
          "description": "Should be set to none when the buttonset is placed within a toolbar.",
          "type": "string",
          "displayName": "Focus Management",
          "value": "oneTabstop",
          "help": "#focusManagement",
          "enumValues": [
            "none",
            "oneTabstop"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Focus management is disabled, to avoid interfering with the focus management of a containing component.",
              "displayName": "None"
            },
            "oneTabstop": {
              "description": "Focus management is enabled. The Buttonset is a single tabstop with arrow-key navigation.",
              "displayName": "One Tabstop"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        },
        "value": {
          "description": "Indicates which oj-option in the buttonset is selected.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-buttonset-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-chart-group": {
      "name": "oj-chart-group",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Chart Group",
      "implements": [
        "ChartGroupElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "The oj-chart-group element is used to declare group properties. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojChartGroup.html",
      "properties": {
        "drilling": {
          "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "Drilling behavior will be inherited from the chart.",
              "displayName": "Inherit"
            },
            "off": {
              "description": "Drilling will not be enabled on group label.",
              "displayName": "Off"
            },
            "on": {
              "description": "Drilling will be enabled on group label.",
              "displayName": "On"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Label Style",
          "help": "#labelStyle"
        },
        "name": {
          "description": "The name of the group.",
          "type": "string",
          "displayName": "Name",
          "help": "#name"
        },
        "shortDesc": {
          "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
          "type": "string",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "#shortDesc"
        }
      }
    },
    "oj-chart-item": {
      "name": "oj-chart-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Chart Item",
      "implements": [
        "ChartItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "The oj-chart-item element is used to declare item properties. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "borderWidth": {
          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "#borderWidth"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot item.",
          "type": "object",
          "displayName": "Box Plot",
          "help": "#boxPlot",
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string",
              "displayName": "Median SVG Class Name"
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Median SVG Style"
            },
            "q2Color": {
              "description": "The color of the Q2 segment of the box.",
              "type": "string",
              "displayName": "Q2 Color",
              "format": "color"
            },
            "q2SvgClassName": {
              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Q2 SVG Class Name"
            },
            "q2SvgStyle": {
              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Q2 SVG Style"
            },
            "q3Color": {
              "description": "The color of the Q3 segment of the box.",
              "type": "string",
              "displayName": "Q3 Color",
              "format": "color"
            },
            "q3SvgClassName": {
              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Q3 SVG Class Name"
            },
            "q3SvgStyle": {
              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Q3 SVG Style"
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string",
              "displayName": "Whisker End Length"
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string",
              "displayName": "Whisker End SVG Class Name"
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Whisker End SVG Style"
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string",
              "displayName": "Whisker SVG Class Name"
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Whisker SVG Style"
            }
          }
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "#categories"
        },
        "close": {
          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
          "type": "number",
          "displayName": "Close",
          "help": "#close"
        },
        "color": {
          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "drilling": {
          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "Drilling behavior will be inherited from the chart.",
              "displayName": "Inherit"
            },
            "off": {
              "description": "Drilling will not be enabled for the data item.",
              "displayName": "Off"
            },
            "on": {
              "description": "Drilling will be enabled for the data item.",
              "displayName": "On"
            }
          }
        },
        "groupId": {
          "description": "The array of id(s) for the group(s) the item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
          "type": "Array<(string|number)>",
          "displayName": "Group Id",
          "required": true,
          "help": "#groupId"
        },
        "high": {
          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
          "type": "number",
          "displayName": "High",
          "help": "#high"
        },
        "items": {
          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
          "type": "Array<Object>|Array<number>",
          "displayName": "Items",
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "displayName": "Border Width",
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "displayName": "Box Plot",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string",
                      "displayName": "Median SVG Class Name"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Median SVG Style"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "displayName": "Q2 Color",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Q2 SVG Class Name"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object",
                      "displayName": "Q2 SVG Style"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "displayName": "Q3 Color",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Q3 SVG Class Name"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object",
                      "displayName": "Q3 SVG Style"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string",
                      "displayName": "Whisker End Length"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string",
                      "displayName": "Whisker End SVG Class Name"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Whisker End SVG Style"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string",
                      "displayName": "Whisker SVG Class Name"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Whisker SVG Style"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number",
                  "displayName": "Close"
                },
                "color": {
                  "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "Drilling behavior will be inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "Drilling will not be enabled for the data item.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Drilling will be enabled for the data item.",
                      "displayName": "On"
                    }
                  }
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number",
                  "displayName": "High"
                },
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any",
                  "displayName": "Id"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>",
                  "displayName": "Items"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "displayName": "Label",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "string|Array<string>",
                  "displayName": "Label Position",
                  "enumValues": [
                    "aboveMarker",
                    "afterMarker",
                    "auto",
                    "beforeMarker",
                    "belowMarker",
                    "center",
                    "insideBarEdge",
                    "none",
                    "outsideBarEdge",
                    "outsideSlice"
                  ],
                  "propertyEditorValues": {
                    "aboveMarker": {
                      "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Above Marker"
                    },
                    "afterMarker": {
                      "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "After Marker"
                    },
                    "auto": {
                      "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                      "displayName": "Auto"
                    },
                    "beforeMarker": {
                      "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Before Marker"
                    },
                    "belowMarker": {
                      "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Below Marker"
                    },
                    "center": {
                      "description": "Label will be placed in the center of the data marker.",
                      "displayName": "Center"
                    },
                    "insideBarEdge": {
                      "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Inside Bar Edge"
                    },
                    "none": {
                      "description": "No data label is shown.",
                      "displayName": "None"
                    },
                    "outsideBarEdge": {
                      "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Outside Bar Edge"
                    },
                    "outsideSlice": {
                      "description": "Label will be placed outside the chart. Only applies to pie chart.",
                      "displayName": "Outside Slice"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                  "type": "object|Array<Object>",
                  "displayName": "Label Style"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number",
                  "displayName": "Low"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "string",
                  "displayName": "Marker Displayed",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data marker will be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data marker will not be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Marker Shape",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "displayName": "Marker Size",
                  "units": "pixels"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number",
                  "displayName": "Open"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "displayName": "Pattern",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number",
                  "displayName": "Q1"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number",
                  "displayName": "Q2"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number",
                  "displayName": "Q3"
                },
                "shortDesc": {
                  "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                  "type": "string",
                  "displayName": "Source"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover Selected"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Selected"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number",
                  "displayName": "Target Value"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number",
                  "displayName": "Value"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number",
                  "displayName": "Volume"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string",
                  "displayName": "X"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number",
                  "displayName": "Y"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number",
                  "displayName": "Z"
                }
              }
            }
          }
        },
        "label": {
          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
          "type": "string|Array<string>",
          "displayName": "Label",
          "translatable": true,
          "help": "#label"
        },
        "labelPosition": {
          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
          "type": "string|Array<string>",
          "displayName": "Label Position",
          "help": "#labelPosition",
          "enumValues": [
            "aboveMarker",
            "afterMarker",
            "auto",
            "beforeMarker",
            "belowMarker",
            "center",
            "insideBarEdge",
            "none",
            "outsideBarEdge",
            "outsideSlice"
          ],
          "propertyEditorValues": {
            "aboveMarker": {
              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
              "displayName": "Above Marker"
            },
            "afterMarker": {
              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
              "displayName": "After Marker"
            },
            "auto": {
              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
              "displayName": "Auto"
            },
            "beforeMarker": {
              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
              "displayName": "Before Marker"
            },
            "belowMarker": {
              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
              "displayName": "Below Marker"
            },
            "center": {
              "description": "Label will be placed in the center of the data marker.",
              "displayName": "Center"
            },
            "insideBarEdge": {
              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
              "displayName": "Inside Bar Edge"
            },
            "none": {
              "description": "No data label is shown.",
              "displayName": "None"
            },
            "outsideBarEdge": {
              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
              "displayName": "Outside Bar Edge"
            },
            "outsideSlice": {
              "description": "Label will be placed outside the chart. Only applies to pie chart.",
              "displayName": "Outside Slice"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
          "type": "object|Array<Object>",
          "displayName": "Label Style",
          "help": "#labelStyle"
        },
        "low": {
          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
          "type": "number",
          "displayName": "Low",
          "help": "#low"
        },
        "markerDisplayed": {
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
          "type": "string",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
              "displayName": "Auto"
            },
            "off": {
              "description": "Data marker will be displayed.",
              "displayName": "Off"
            },
            "on": {
              "description": "Data marker will not be displayed.",
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "propertyEditorValues": {
            "auto": {
              "description": "Data marker shape will be based on chart type.",
              "displayName": "Auto"
            },
            "circle": {
              "description": "Data markers will be circular in shape.",
              "displayName": "Circle"
            },
            "diamond": {
              "description": "Data markers will be diamond in shape.",
              "displayName": "Diamond"
            },
            "human": {
              "description": "Data markers will be human in shape.",
              "displayName": "Human"
            },
            "plus": {
              "description": "Data markers will be plus in shape.",
              "displayName": "Plus"
            },
            "square": {
              "description": "Data markers will be square in shape.",
              "displayName": "Square"
            },
            "star": {
              "description": "Data markers will be star in shape.",
              "displayName": "Star"
            },
            "triangleDown": {
              "description": "Data markers will be of a triangular shape facing down.",
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "description": "Data markers will be of a triangular shape facing up.",
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
          "type": "number",
          "displayName": "Marker Size",
          "units": "pixels",
          "help": "#markerSize"
        },
        "open": {
          "description": "The open value for stock candlestick.",
          "type": "number",
          "displayName": "Open",
          "help": "#open"
        },
        "pattern": {
          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
          "type": "string",
          "displayName": "Pattern",
          "value": "auto",
          "help": "#pattern",
          "enumValues": [
            "auto",
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "No pattern is applied to data item fill.",
              "displayName": "Auto"
            },
            "largeChecker": {
              "description": "Large checker pattern is applied to the data item.",
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "description": "Large cross hatch pattern is applied to the data item.",
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "description": "Large diagonal left pattern is applied to the data item.",
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "description": "Large diagonal right pattern is applied to the data item.",
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "description": "Large diamond pattern is applied to the data item.",
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "description": "Large triangle pattern is applied to the data item.",
              "displayName": "Large Triangle"
            },
            "smallChecker": {
              "description": "Small checker pattern is applied to the data item.",
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "description": "Small cross hatch pattern is applied to the data item.",
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "description": "Small diagonal left pattern is applied to the data item.",
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "description": "Small diagonal right pattern is applied to the data item.",
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "description": "Small diamond pattern is applied to the data item.",
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "description": "Small triangle pattern is applied to the data item.",
              "displayName": "Small Triangle"
            }
          }
        },
        "q1": {
          "description": "The first quartile value for box plot.",
          "type": "number",
          "displayName": "Q1",
          "help": "#q1"
        },
        "q2": {
          "description": "The second quartile (median) value for box plot.",
          "type": "number",
          "displayName": "Q2",
          "help": "#q2"
        },
        "q3": {
          "description": "The third quartile value for box plot.",
          "type": "number",
          "displayName": "Q3",
          "help": "#q3"
        },
        "seriesId": {
          "description": "The id for the series the item belongs to.",
          "type": "string|number",
          "displayName": "Series Id",
          "required": true,
          "help": "#seriesId"
        },
        "shortDesc": {
          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "#shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
          "type": "string",
          "displayName": "Source",
          "help": "#source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "help": "#sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "help": "#sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "help": "#sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "help": "#svgStyle"
        },
        "targetValue": {
          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
          "type": "number",
          "displayName": "Target Value",
          "help": "#targetValue"
        },
        "value": {
          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
          "type": "number",
          "displayName": "Value",
          "help": "#value"
        },
        "volume": {
          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
          "type": "number",
          "displayName": "Volume",
          "help": "#volume"
        },
        "x": {
          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
          "type": "number|string",
          "displayName": "X",
          "help": "#x"
        },
        "y": {
          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
          "type": "number",
          "displayName": "Y",
          "help": "#y"
        },
        "z": {
          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
          "type": "number",
          "displayName": "Z",
          "help": "#z"
        }
      }
    },
    "oj-chart-series": {
      "name": "oj-chart-series",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Chart Series",
      "implements": [
        "ChartSeriesElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "The oj-chart-series element is used to declare series properties. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojChartSeries.html",
      "properties": {
        "areaColor": {
          "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
          "type": "string",
          "displayName": "Area Color",
          "format": "color",
          "help": "#areaColor"
        },
        "areaSvgClassName": {
          "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Area SVG Class Name",
          "help": "#areaSvgClassName"
        },
        "areaSvgStyle": {
          "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Area SVG Style",
          "help": "#areaSvgStyle"
        },
        "assignedToY2": {
          "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
          "type": "string",
          "displayName": "Assigned To Y2",
          "value": "off",
          "help": "#assignedToY2",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "The series is not associated with the y2 axis.",
              "displayName": "Off"
            },
            "on": {
              "description": "The series is associated with the y2 axis.",
              "displayName": "On"
            }
          }
        },
        "borderColor": {
          "description": "The border color of the series.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "borderWidth": {
          "description": "The border width of the series.",
          "type": "number",
          "displayName": "Border Width",
          "minimum": 0,
          "units": "pixels",
          "help": "#borderWidth"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot series.",
          "type": "object",
          "displayName": "Box Plot",
          "help": "#boxPlot",
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string",
              "displayName": "Median SVG Class Name"
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Median SVG Style"
            },
            "q2Color": {
              "description": "The color of the Q2 segment of the box.",
              "type": "string",
              "displayName": "Q2 Color",
              "format": "color"
            },
            "q2SvgClassName": {
              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Q2 SVG Class Name"
            },
            "q2SvgStyle": {
              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Q2 SVG Style"
            },
            "q3Color": {
              "description": "The color of the Q3 segment of the box.",
              "type": "string",
              "displayName": "Q3 Color",
              "format": "color"
            },
            "q3SvgClassName": {
              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Q3 SVG Class Name"
            },
            "q3SvgStyle": {
              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Q3 SVG Style"
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string",
              "displayName": "Whisker End Length"
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string",
              "displayName": "Whisker End SVG Class Name"
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Whisker End SVG Style"
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string",
              "displayName": "Whisker SVG Class Name"
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "Whisker SVG Style"
            }
          }
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "description": "The color of the series. The chart legend item will inherit this color value.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "displayInLegend": {
          "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
          "type": "string",
          "displayName": "Display In Legend",
          "value": "auto",
          "help": "#displayInLegend",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
              "displayName": "Auto"
            },
            "off": {
              "description": "Series will not be shown in the legend.",
              "displayName": "Off"
            },
            "on": {
              "description": "Series will be shown in the legend.",
              "displayName": "On"
            }
          }
        },
        "drilling": {
          "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "The series drilling behavior is inherited from the chart.",
              "displayName": "Inherit"
            },
            "off": {
              "description": "The series will not be drillable.",
              "displayName": "Off"
            },
            "on": {
              "description": "The series will be drillable.",
              "displayName": "On"
            }
          }
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "string",
          "displayName": "Line Style",
          "help": "#lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "description": "Line will have dashed strokes.",
              "displayName": "Dashed"
            },
            "dotted": {
              "description": "Line will have dotted strokes.",
              "displayName": "Dotted"
            },
            "solid": {
              "description": "Line will have a solid stroke.",
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Line Type",
          "help": "#lineType",
          "enumValues": [
            "auto",
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Default value depending on series type.",
              "displayName": "Auto"
            },
            "centeredSegmented": {
              "description": "Data points will be connected with a centered segmented line.",
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "description": "Data points will be connected with a centered stepped line.",
              "displayName": "Centered Stepped"
            },
            "curved": {
              "description": "Data points will be connected with a curved line.",
              "displayName": "Curved"
            },
            "none": {
              "description": "Data points will not be connected.",
              "displayName": "None"
            },
            "segmented": {
              "description": "Data points will be connected with a segmented line.",
              "displayName": "Segmented"
            },
            "stepped": {
              "description": "Data points will be connected with a stepped line.",
              "displayName": "Stepped"
            },
            "straight": {
              "description": "Data points will be connected with a straight line.",
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "number",
          "displayName": "Line Width",
          "minimum": 0,
          "units": "pixels",
          "help": "#lineWidth"
        },
        "markerColor": {
          "description": "The color of the data markers, if different from the series color.",
          "type": "string",
          "displayName": "Marker Color",
          "format": "color",
          "help": "#markerColor"
        },
        "markerDisplayed": {
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Displayed",
          "help": "#markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
              "displayName": "Auto"
            },
            "off": {
              "description": "Data markers belonging to the series will not be displayed.",
              "displayName": "Off"
            },
            "on": {
              "description": "Data markers belonging to the series will be displayed.",
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "propertyEditorValues": {
            "auto": {
              "description": "Data marker shape will be based on chart type.",
              "displayName": "Auto"
            },
            "circle": {
              "description": "Data markers will be circular in shape.",
              "displayName": "Circle"
            },
            "diamond": {
              "description": "Data markers will be diamond in shape.",
              "displayName": "Diamond"
            },
            "human": {
              "description": "Data markers will be human in shape.",
              "displayName": "Human"
            },
            "plus": {
              "description": "Data markers will be plus in shape.",
              "displayName": "Plus"
            },
            "square": {
              "description": "Data markers will be square in shape.",
              "displayName": "Square"
            },
            "star": {
              "description": "Data markers will be star in shape.",
              "displayName": "Star"
            },
            "triangleDown": {
              "description": "Data markers will be of a triangular shape facing down.",
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "description": "Data markers will be of a triangular shape facing up.",
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers.",
          "type": "number",
          "displayName": "Marker Size",
          "minimum": 0,
          "units": "pixels",
          "help": "#markerSize"
        },
        "markerSvgClassName": {
          "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker SVG Class Name",
          "help": "#markerSvgClassName"
        },
        "markerSvgStyle": {
          "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Marker SVG Style",
          "help": "#markerSvgStyle"
        },
        "name": {
          "description": "The name of the series, displayed in the legend and tooltips.",
          "type": "string",
          "displayName": "Name",
          "help": "#name"
        },
        "pattern": {
          "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
          "type": "string",
          "displayName": "Pattern",
          "value": "auto",
          "help": "#pattern",
          "enumValues": [
            "auto",
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "No pattern is applied to data item fill.",
              "displayName": "Auto"
            },
            "largeChecker": {
              "description": "Large checker pattern is applied to the data item.",
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "description": "Large cross hatch pattern is applied to the data item.",
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "description": "Large diagonal left pattern is applied to the data item.",
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "description": "Large diagonal right pattern is applied to the data item.",
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "description": "Large diamond pattern is applied to the data item.",
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "description": "Large triangle pattern is applied to the data item.",
              "displayName": "Large Triangle"
            },
            "smallChecker": {
              "description": "Small checker pattern is applied to the data item.",
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "description": "Small cross hatch pattern is applied to the data item.",
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "description": "Small diagonal left pattern is applied to the data item.",
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "description": "Small diagonal right pattern is applied to the data item.",
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "description": "Small diamond pattern is applied to the data item.",
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "description": "Small triangle pattern is applied to the data item.",
              "displayName": "Small Triangle"
            }
          }
        },
        "pieSliceExplode": {
          "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
          "type": "number",
          "displayName": "Pie Slice Explode",
          "value": 0,
          "maximum": 1,
          "minimum": 0,
          "help": "#pieSliceExplode"
        },
        "shortDesc": {
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "type": "string",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "#shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "displayName": "Source",
          "help": "#source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "help": "#sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "help": "#sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "help": "#sourceSelected"
        },
        "stackCategory": {
          "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
          "type": "string",
          "displayName": "Stack Category",
          "help": "#stackCategory"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "help": "#svgStyle"
        },
        "type": {
          "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
          "type": "string",
          "displayName": "Type",
          "value": "auto",
          "help": "#type",
          "enumValues": [
            "area",
            "auto",
            "bar",
            "boxPlot",
            "candlestick",
            "line",
            "lineWithArea"
          ],
          "propertyEditorValues": {
            "area": {
              "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
              "displayName": "Area"
            },
            "auto": {
              "description": "Series type will be inherited from chart type.",
              "displayName": "Auto"
            },
            "bar": {
              "description": "Series will be represented by a bar.",
              "displayName": "Bar"
            },
            "boxPlot": {
              "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
              "displayName": "Box Plot"
            },
            "candlestick": {
              "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
              "displayName": "Candlestick"
            },
            "line": {
              "description": "Series will be represented by a line.",
              "displayName": "Line"
            },
            "lineWithArea": {
              "description": "Series will be presented by a line and area.",
              "displayName": "Line With Area"
            }
          }
        }
      }
    },
    "oj-chart": {
      "name": "oj-chart",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Chart",
      "implements": [
        "ChartElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart",
          "defaultColumns": "6",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart",
          "uxSpecs": [
            "charts-bar-line-area-and-combo",
            "data-visualization-range-chart",
            "data-visualization-pie",
            "data-visualization-polar-chart",
            "data-visualization-funnel",
            "data-visualization-pyramid",
            "data-visualization-stock-chart",
            "data-visualization-common"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Chart axis title text color",
          "name": "oj-chart-axis-title-text-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Chart axis tick label text color",
          "name": "oj-chart-axis-tick-label-text-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Chart rising animation icon color",
          "name": "oj-chart-animation-rising-icon-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Chart falling animation icon color",
          "name": "oj-chart-animation-falling-icon-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Chart animation marker color",
          "name": "oj-chart-animation-marker-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Chart data cursor line color",
          "name": "oj-chart-data-cursor-line-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Polar chart inside tick label background color",
          "name": "oj-chart-polar-axis-tick-label-inside-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-chart-css-set2"
        },
        {
          "description": "Polar chart outside tick label background color",
          "name": "oj-chart-polar-axis-tick-label-outside-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-chart-css-set2"
        },
        {
          "description": "Stock chart falling stock background color",
          "name": "oj-chart-stock-falling-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-chart-css-set3"
        },
        {
          "description": "Stock chart stock range background color",
          "name": "oj-chart-stock-range-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-chart-css-set3"
        },
        {
          "description": "Stock chart rising stock background color",
          "name": "oj-chart-stock-rising-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-chart-css-set3"
        }
      ],
      "description": "A chart displays information graphically, making relationships among the data easier to understand.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojChart.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "orientation",
            "legend.title",
            "legend.position",
            "legend.rendered",
            "styleDefaults.lineType",
            "styleDefaults.markerDisplayed",
            "styleDefaults.markerShape",
            "styleDefaults.threeDEffect",
            "stack",
            "pieCenter.label",
            "xAxis.title",
            "yAxis.title",
            "animationOnDataChange",
            "animationOnDisplay",
            "styleDefaults.pieInnerRadius",
            "coordinateSystem",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes. Animation is automatically disabled when there are a large number of data items.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none",
            "slideToLeft",
            "slideToRight"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Default non-sliding animation.",
              "displayName": "Auto"
            },
            "none": {
              "description": "No animation is applied on data change.",
              "displayName": "None"
            },
            "slideToLeft": {
              "description": "Data changes will have a sliding animation to the left.",
              "displayName": "Slide To Left"
            },
            "slideToRight": {
              "description": "Data changes will have a sliding animation to the right.",
              "displayName": "Slide To Right"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display. Animation is automatically disabled when there are a large number of data items.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "alphaFade",
            "auto",
            "none",
            "zoom"
          ],
          "propertyEditorValues": {
            "alphaFade": {
              "description": "Chart uses an alpha fade animation on initial display.",
              "displayName": "Alpha Fade"
            },
            "auto": {
              "description": "Default animation on initial display.",
              "displayName": "Auto"
            },
            "none": {
              "description": "No animation is applied on initial display.",
              "displayName": "None"
            },
            "zoom": {
              "description": "Chart zooms into view on initial display.",
              "displayName": "Zoom"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate, seriesTemplate, or groupTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "coordinateSystem": {
          "description": "The coordinate system of the chart. Only applies to bar, line, area, combo, scatter, and bubble charts.",
          "type": "string",
          "displayName": "Coordinate System",
          "value": "cartesian",
          "help": "#coordinateSystem",
          "enumValues": [
            "cartesian",
            "polar"
          ],
          "propertyEditorValues": {
            "cartesian": {
              "description": "Cartesian coordinate system is used to plot the chart.",
              "displayName": "Cartesian"
            },
            "polar": {
              "description": "Polar coordinate system is used to plot the chart.",
              "displayName": "Polar"
            }
          }
        },
        "data": {
          "description": "An object defining the series and groups, when using a DataProvider to populate the chart data. Also accepts a Promise for deferred data rendering.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dataCursor": {
          "description": "Defines whether the data cursor is enabled. The data cursor is not supported for polar charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Data Cursor",
          "value": "auto",
          "help": "#dataCursor",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The data cursor is shown only for line or area charts on touch devices.",
              "displayName": "Auto"
            },
            "off": {
              "description": "Data cursor is disabled.",
              "displayName": "Off"
            },
            "on": {
              "description": "Data cursor is enabled. Not supported by polar charts.",
              "displayName": "On"
            }
          }
        },
        "dataCursorBehavior": {
          "description": "Defines the behavior of the data cursor when moving between data items.",
          "type": "string",
          "displayName": "Data Cursor Behavior",
          "value": "auto",
          "help": "#dataCursorBehavior",
          "enumValues": [
            "auto",
            "smooth",
            "snap"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The data cursor exhibits the snap behavior except for line and area chart which exhibit the smooth behavior.",
              "displayName": "Auto"
            },
            "smooth": {
              "description": "Data cursor follows the mouse cursor smoothly between data items.",
              "displayName": "Smooth"
            },
            "snap": {
              "description": "Data cursor snaps between data items.",
              "displayName": "Snap"
            }
          }
        },
        "dataCursorPosition": {
          "description": "Specifies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed.",
          "type": "object",
          "displayName": "Data Cursor Position",
          "writeback": true,
          "help": "#dataCursorPosition",
          "properties": {
            "x": {
              "description": "The x value of the data cursor.",
              "type": "number|string",
              "displayName": "X",
              "value": null
            },
            "y": {
              "description": "The y value of the data cursor. If both y and y2 are defined, y will take precedence.",
              "type": "number",
              "displayName": "Y",
              "value": null
            },
            "y2": {
              "description": "The y2 value of the data cursor. If both y and y2 are defined, y will take precedence.",
              "type": "number",
              "displayName": "Y2",
              "value": null
            }
          }
        },
        "dataLabel": {
          "description": "A function that returns a custom data label. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Data Label",
          "value": null,
          "help": "#dataLabel"
        },
        "dnd": {
          "description": "Provides support for HTML5 Drag and Drop events. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "An object that describes drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "#dnd.drag",
              "properties": {
                "groups": {
                  "description": "Allows dragging of chart groups from the categorical axis labels.",
                  "type": "object",
                  "displayName": "Groups",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null
                    }
                  }
                },
                "items": {
                  "description": "Allows dragging of chart data items, including bars, line/area/scatter markers, bubbles, and pie/funnel/pyramid slices.",
                  "type": "object",
                  "displayName": "Items",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null
                    }
                  }
                },
                "series": {
                  "description": "Allows dragging of chart series from the legend items.",
                  "type": "object",
                  "displayName": "Series",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "#dnd.drop",
              "properties": {
                "legend": {
                  "description": "Allows dropping on the legend.",
                  "type": "object",
                  "displayName": "Legend",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null
                    }
                  }
                },
                "plotArea": {
                  "description": "Allows dropping on the plot area.",
                  "type": "object",
                  "displayName": "Plot Area",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null
                    }
                  }
                },
                "xAxis": {
                  "description": "Allows dropping on the X axis.",
                  "type": "object",
                  "displayName": "X Axis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null
                    }
                  }
                },
                "y2Axis": {
                  "description": "Allows dropping on the Y2 axis.",
                  "type": "object",
                  "displayName": "Y2 Axis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null
                    }
                  }
                },
                "yAxis": {
                  "description": "Allows dropping on the Y axis.",
                  "type": "object",
                  "displayName": "Y Axis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null
                    }
                  }
                }
              }
            }
          }
        },
        "dragMode": {
          "description": "The action that is performed when a drag occurs on the chart. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drag Mode",
          "value": "user",
          "help": "#dragMode",
          "enumValues": [
            "off",
            "pan",
            "select",
            "user",
            "zoom"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Drag is disabled.",
              "displayName": "Off"
            },
            "pan": {
              "description": "Pan action is performed when a drag occurs on the chart.",
              "displayName": "Pan"
            },
            "select": {
              "description": "Marquee selection is performed when a drag occurs on the chart.",
              "displayName": "Select"
            },
            "user": {
              "description": "User can switch between different mode. Buttons will be displayed on the plot area to let users switch between modes.",
              "displayName": "User"
            },
            "zoom": {
              "description": "Zoom action is performed when a drag occurs on the chart.",
              "displayName": "Zoom"
            }
          }
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "#drilling",
          "enumValues": [
            "groupsOnly",
            "off",
            "on",
            "seriesOnly"
          ],
          "propertyEditorValues": {
            "groupsOnly": {
              "description": "Drilling is enabled only on axis labels.",
              "displayName": "Groups Only"
            },
            "off": {
              "description": "Drilling is not enabled.",
              "displayName": "Off"
            },
            "on": {
              "description": "Drilling is enabled on data items, axis labels and legend items.",
              "displayName": "On"
            },
            "seriesOnly": {
              "description": "Drilling is enabled only on legend items. Use multiSeriesDrilling attribute to enable drilling on the legend item for Other.",
              "displayName": "Series Only"
            }
          }
        },
        "groupComparator": {
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "type": "function",
          "displayName": "Group Comparator",
          "value": null,
          "help": "#groupComparator"
        },
        "groups": {
          "description": "An array of strings identifying the group labels, or an array of objects specifying group labels and styles. See the Help documentation for more information.",
          "type": "Array<string>|Array<Object>|Promise|null",
          "displayName": "Groups",
          "value": null,
          "help": "#groups",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "drilling": {
                  "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "Drilling behavior will be inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "Drilling will not be enabled on group label.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Drilling will be enabled on group label.",
                      "displayName": "On"
                    }
                  }
                },
                "groups": {
                  "description": "An array of nested group objects.",
                  "type": "Array<Object>",
                  "displayName": "Groups"
                },
                "id": {
                  "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                  "type": "string|number",
                  "displayName": "Id"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "name": {
                  "description": "The name of the group.",
                  "type": "string",
                  "displayName": "Name"
                },
                "shortDesc": {
                  "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                  "type": "string",
                  "displayName": "Short Desc",
                  "translatable": true
                }
              }
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "hideAndShowBehavior": {
          "description": "Defines the hide and show behavior that is performed when clicking on a legend item. When data items are hidden, the y axes can be optionally rescaled to fit to the remaining data.",
          "type": "string",
          "displayName": "Hide And Show Behavior",
          "value": "none",
          "help": "#hideAndShowBehavior",
          "enumValues": [
            "none",
            "withRescale",
            "withoutRescale"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Hide and show behavior is disabled.",
              "displayName": "None"
            },
            "withRescale": {
              "description": "Y axes rescales when data items are hidden or showed by clicking on a legend item.",
              "displayName": "With Rescale"
            },
            "withoutRescale": {
              "description": "Y axes does not rescale when data items are hidden or showed by clicking on a legend item.",
              "displayName": "Without Rescale"
            }
          }
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Only data items that match all of the highlightedCategories values will be highlighted.",
              "displayName": "All"
            },
            "any": {
              "description": "Only data items that match at least one of the highlightedCategories values will be highlighted.",
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Series or data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          }
        },
        "initialZooming": {
          "description": "Specifies whether automatic initial zooming is enabled. Only applies to bar, line, area, and combo charts with zoomAndScroll turned on. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Initial Zooming",
          "value": "none",
          "help": "#initialZooming",
          "enumValues": [
            "first",
            "last",
            "none"
          ],
          "propertyEditorValues": {
            "first": {
              "description": "Zoom to first data points (after the viewportMin) that can fit in the plot area on initial render.",
              "displayName": "First"
            },
            "last": {
              "description": "Zoom to last data points (before the viewportMax) that can fit in the plot area on initial render.",
              "displayName": "Last"
            },
            "none": {
              "description": "No initial zooming.",
              "displayName": "None"
            }
          }
        },
        "legend": {
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "type": "object",
          "displayName": "Legend",
          "help": "#legend",
          "properties": {
            "backgroundColor": {
              "description": "The color of the legend background.",
              "type": "string",
              "displayName": "Background Color",
              "value": null,
              "format": "color"
            },
            "borderColor": {
              "description": "The border color of the legend.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color"
            },
            "maxSize": {
              "description": "Defines the maximum size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null
            },
            "position": {
              "description": "The position of the legend within the chart. By default, the legend will be placed on the side or bottom, based on the size of the chart and the legend contents.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "The legend will be placed on the side or bottom, based on the size of the chart and the legend contents.",
                  "displayName": "Auto"
                },
                "bottom": {
                  "description": "The legend will be placed at the bottom of the chart..",
                  "displayName": "Bottom"
                },
                "end": {
                  "description": "The legend will be placed at the end of the chart.",
                  "displayName": "End"
                },
                "start": {
                  "description": "The legend will be placed at the start of the chart.",
                  "displayName": "Start"
                },
                "top": {
                  "description": "The legend will be placed at the top of the chart.",
                  "displayName": "Top"
                }
              }
            },
            "referenceObjectSection": {
              "description": "An object defining the reference object section in the legend.",
              "type": "object",
              "displayName": "Reference Object Section",
              "properties": {
                "title": {
                  "description": "The title of the section.",
                  "type": "string",
                  "displayName": "Title",
                  "value": null,
                  "translatable": true
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "displayName": "Title Halign",
                  "value": "start",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "description": "The title will be center-aligned within the legend section.",
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "The title will be end-aligned within the legend section.",
                      "displayName": "End"
                    },
                    "start": {
                      "description": "The title will be start-aligned within the legend section.",
                      "displayName": "Start"
                    }
                  }
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title.",
                  "type": "object",
                  "displayName": "Title Style",
                  "value": {}
                }
              }
            },
            "rendered": {
              "description": "Defines whether the legend is displayed. If set to auto, the legend will be hidden for charts with a large number of series. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Legend will be hidden for charts with a large number of series.",
                  "displayName": "Auto"
                },
                "off": {
                  "description": "Legend will not be displayed in the chart.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Legend will be displayed in the chart.",
                  "displayName": "On"
                }
              }
            },
            "scrolling": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "12.1.0",
                  "description": "Setting scrolling to off is not supported in Redwood theme and it is not recommended. As such, this attribute is deprecated."
                },
                {
                  "type": "deprecated",
                  "since": "12.1.0",
                  "description": "Setting scrolling to off is not supported in Redwood theme and it is not recommended. As such, this attribute is deprecated."
                }
              ],
              "description": "Defines whether scrolling is enabled for the legend.",
              "type": "string",
              "displayName": "Scrolling",
              "value": "asNeeded",
              "enumValues": [
                "asNeeded",
                "off"
              ],
              "propertyEditorValues": {
                "asNeeded": {
                  "description": "The legend will be scrollable if items do not fit in the specified space.",
                  "displayName": "As Needed"
                },
                "off": {
                  "description": "The legend will not be scrollable.",
                  "displayName": "Off"
                }
              }
            },
            "sections": {
              "description": "An array of objects defining the additional legend sections, other than the default series and reference object sections.",
              "type": "Array<Object>",
              "displayName": "Sections",
              "value": [],
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "items": {
                      "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
                      "type": "Array<Object>",
                      "displayName": "Items",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                          "type": "string",
                          "displayName": "Border Color"
                        },
                        "categories": {
                          "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item.",
                          "type": "Array<string>",
                          "displayName": "Categories"
                        },
                        "categoryVisibility": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "14.1.0",
                              "description": "This attribute is deprecated. Use hidden-categories on oj-chart instead"
                            }
                          ],
                          "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
                          "type": "string",
                          "displayName": "Category Visibility",
                          "value": "visible",
                          "enumValues": [
                            "hidden",
                            "visible"
                          ]
                        },
                        "color": {
                          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
                          "type": "string",
                          "displayName": "Color"
                        },
                        "id": {
                          "description": "The id of the legend item, which is provided as part of the context for events fired by the legend. If not specified, the default depends upon whether a DataProvider is being used.",
                          "type": "string",
                          "displayName": "Id"
                        },
                        "lineStyle": {
                          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                          "type": "string",
                          "displayName": "Line Style",
                          "value": "solid",
                          "enumValues": [
                            "dashed",
                            "dotted",
                            "solid"
                          ]
                        },
                        "lineWidth": {
                          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                          "type": "number",
                          "displayName": "Line Width"
                        },
                        "markerColor": {
                          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
                          "type": "string",
                          "displayName": "Marker Color"
                        },
                        "markerShape": {
                          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
                          "type": "string",
                          "displayName": "Marker Shape",
                          "value": "square",
                          "propertyEditorValues": {
                            "circle": {
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "displayName": "Diamond"
                            },
                            "ellipse": {
                              "displayName": "Ellipse"
                            },
                            "human": {
                              "displayName": "Human"
                            },
                            "plus": {
                              "displayName": "Plus"
                            },
                            "rectangle": {
                              "displayName": "Rectangle"
                            },
                            "square": {
                              "displayName": "Square"
                            },
                            "star": {
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "pattern": {
                          "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                          "type": "string",
                          "displayName": "Pattern",
                          "value": "none",
                          "enumValues": [
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "none",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ]
                        },
                        "shortDesc": {
                          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "displayName": "Short Desc"
                        },
                        "source": {
                          "description": "The URI of the image of the legend symbol.",
                          "type": "string",
                          "displayName": "Source"
                        },
                        "symbolType": {
                          "description": "The type of legend symbol to display.",
                          "type": "string",
                          "displayName": "Symbol Type",
                          "value": "marker",
                          "enumValues": [
                            "image",
                            "line",
                            "lineWithMarker",
                            "marker"
                          ]
                        },
                        "text": {
                          "description": "The legend item text.",
                          "type": "string",
                          "displayName": "Text"
                        }
                      }
                    },
                    "sections": {
                      "description": "An array of nested legend sections.",
                      "type": "Array<Object>",
                      "displayName": "Sections"
                    },
                    "title": {
                      "description": "The title of the section.",
                      "type": "string",
                      "displayName": "Title",
                      "value": null,
                      "translatable": true
                    },
                    "titleHalign": {
                      "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                      "type": "string",
                      "displayName": "Title Halign",
                      "value": "start",
                      "enumValues": [
                        "center",
                        "end",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "center": {
                          "description": "The title will be center-aligned within the legend section.",
                          "displayName": "Center"
                        },
                        "end": {
                          "description": "The title will be end-aligned within the legend section.",
                          "displayName": "End"
                        },
                        "start": {
                          "description": "The title will be start-aligned within the legend section.",
                          "displayName": "Start"
                        }
                      }
                    },
                    "titleStyle": {
                      "description": "The CSS style object defining the style of the section title.",
                      "type": "object",
                      "displayName": "Title Style",
                      "value": {}
                    }
                  }
                }
              }
            },
            "seriesSection": {
              "description": "An object defining the series section in the legend.",
              "type": "object",
              "displayName": "Series Section",
              "properties": {
                "title": {
                  "description": "The title of the section.",
                  "type": "string",
                  "displayName": "Title",
                  "value": null,
                  "translatable": true
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "displayName": "Title Halign",
                  "value": "start",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "description": "The title will be center-aligned within the legend section.",
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "The title will be end-aligned within the legend section.",
                      "displayName": "End"
                    },
                    "start": {
                      "description": "The title will be start-aligned within the legend section.",
                      "displayName": "Start"
                    }
                  }
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title.",
                  "type": "object",
                  "displayName": "Title Style",
                  "value": {}
                }
              }
            },
            "size": {
              "description": "Defines the size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null
            },
            "symbolHeight": {
              "description": "The height of the legend symbol (line or marker) in pixels.",
              "type": "number",
              "displayName": "Symbol Height",
              "value": null,
              "units": "pixels"
            },
            "symbolWidth": {
              "description": "The width of the legend symbol (line or marker) in pixels.",
              "type": "number",
              "displayName": "Symbol Width",
              "value": null,
              "units": "pixels"
            },
            "textStyle": {
              "description": "The CSS style object defining the style of the legend text.",
              "type": "object",
              "displayName": "Text Style",
              "value": {}
            },
            "title": {
              "description": "The legend title.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true
            },
            "titleHalign": {
              "description": "The horizontal alignment of the title.",
              "type": "string",
              "displayName": "Title Halign",
              "value": "start",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "description": "The title will be center-aligned within the legend.",
                  "displayName": "Center"
                },
                "end": {
                  "description": "The title will be end-aligned within the legend.",
                  "displayName": "End"
                },
                "start": {
                  "description": "The title will be start-aligned within the legend.",
                  "displayName": "Start"
                }
              }
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {}
            }
          }
        },
        "multiSeriesDrilling": {
          "description": "Specifies whether drilling on chart objects representing multiple series (e.g. other slice and legend item in pie charts) is enabled or not. Multiseries drill event is fired from the other slice and legend item of pieChart.",
          "type": "string",
          "displayName": "Multi Series Drilling",
          "value": "off",
          "help": "#multiSeriesDrilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Drill action for Other slice and legend item in pie chart will be disabled.",
              "displayName": "Off"
            },
            "on": {
              "description": "Drill action for Other slice and legend item in pie chart will be enabled.",
              "displayName": "On"
            }
          }
        },
        "orientation": {
          "description": "The chart orientation. Only applies to bar, line, area, combo, box plot, and funnel charts.",
          "type": "string",
          "displayName": "Orientation",
          "value": "vertical",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Chart will be horizontally oriented.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Chart will be vertically oriented.",
              "displayName": "Vertical"
            }
          }
        },
        "otherThreshold": {
          "description": "Specifies the fraction of the whole pie under which a slice would be aggregated into an \"Other\" slice. Valid values range from 0 (default) to 1. For example, a value of 0.1 would cause all slices which are less than 10% of the pie to be aggregated into the \"Other\" slice. Only applies to pie chart.",
          "type": "number",
          "displayName": "Other Threshold",
          "value": 0,
          "maximum": 1,
          "minimum": 0,
          "help": "#otherThreshold"
        },
        "overview": {
          "description": "An object defining the overview scrollbar. Only applies if zoomAndScroll is not off. Currently only supported for vertical bar, line, area, stock, and combo charts.",
          "type": "object",
          "displayName": "Overview",
          "help": "#overview",
          "properties": {
            "content": {
              "description": "An object containing the property override for the overview chart. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Content",
              "value": {}
            },
            "height": {
              "description": "Specifies the height of the overview scrollbar in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Height",
              "value": null
            },
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered. If not, simple scrollbar will be used.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Overview scrollbar will not be rendered.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Overview scrollbar will be rendered.",
                  "displayName": "On"
                }
              }
            }
          }
        },
        "pieCenter": {
          "description": "An object defining the center content of a pie chart. Either a label can be displayed at the center of the pie chart or custom HTML content.",
          "type": "object",
          "displayName": "Pie Center",
          "help": "#pieCenter",
          "properties": {
            "converter": {
              "description": "The converter to format the label if it is numeric. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null
            },
            "label": {
              "description": "Specifies the text for the label. When a innerRadius is specified, the label will automatically be scaled to fit within the inner circle. If the innerRadius is 0, the default font size will be used.",
              "type": "number|string",
              "displayName": "Label",
              "value": null,
              "translatable": true
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Label Style",
              "value": {}
            },
            "renderer": {
              "description": "A function that returns custom center content. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null
            },
            "scaling": {
              "description": "The scaling behavior of the label if it is numeric. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Chart chooses the scaling based on the data.",
                  "displayName": "Auto"
                },
                "billion": {
                  "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                  "displayName": "Billion"
                },
                "million": {
                  "description": "Values will be scaled with suffix corresponding to million based on locale.",
                  "displayName": "Million"
                },
                "none": {
                  "description": "Values will not be scaled with any suffix.",
                  "displayName": "None"
                },
                "quadrillion": {
                  "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                  "displayName": "Thousand"
                },
                "trillion": {
                  "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                  "displayName": "Trillion"
                }
              }
            }
          }
        },
        "plotArea": {
          "description": "An object defining the style of the plot area.",
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "backgroundColor": {
              "description": "The color of the plot area background.",
              "type": "string",
              "displayName": "Background Color",
              "value": null,
              "format": "color"
            },
            "borderColor": {
              "description": "The border color to be set on the chart's plot area.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color"
            },
            "borderWidth": {
              "description": "The border width to be set on the chart's plot area.",
              "type": "number",
              "displayName": "Border Width",
              "value": null,
              "units": "pixels"
            },
            "rendered": {
              "description": "Specifies whether the plot area is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "The chart's plot area will not be rendered.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "The chart's plot area will be rendered.",
                  "displayName": "On"
                }
              }
            }
          }
        },
        "polarGridShape": {
          "description": "Defines whether the grid shape of the polar chart is circle or polygon. Only applies to polar line and area charts.",
          "type": "string",
          "displayName": "Polar Grid Shape",
          "value": "circle",
          "help": "#polarGridShape",
          "enumValues": [
            "circle",
            "polygon"
          ],
          "propertyEditorValues": {
            "circle": {
              "description": "The grid shape of polar chart will be circular.",
              "displayName": "Circle"
            },
            "polygon": {
              "description": "The grid shape of polar chart will be a polygonal with number of side of the polygon equal to number of groups in chart.",
              "displayName": "Polygon"
            }
          }
        },
        "selection": {
          "description": "An array used to define the ids of the initially selected objects. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "The type of selection behavior that is enabled on the chart. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "series": {
          "description": "An array of objects defining series labels and override series styles. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Series",
          "value": null,
          "help": "#series",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "displayName": "Area Color",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Area SVG Class Name"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Area SVG Style"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "displayName": "Assigned To Y2",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "The series is not associated with the y2 axis.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series is associated with the y2 axis.",
                      "displayName": "On"
                    }
                  }
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "displayName": "Border Width",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "displayName": "Box Plot",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string",
                      "displayName": "Median SVG Class Name"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Median SVG Style"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "displayName": "Q2 Color",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Q2 SVG Class Name"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object",
                      "displayName": "Q2 SVG Style"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "displayName": "Q3 Color",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Q3 SVG Class Name"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object",
                      "displayName": "Q3 SVG Style"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string",
                      "displayName": "Whisker End Length"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string",
                      "displayName": "Whisker End SVG Class Name"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Whisker End SVG Style"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string",
                      "displayName": "Whisker SVG Class Name"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Whisker SVG Style"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The color of the series. The chart legend item will inherit this color value.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "displayName": "Display In Legend",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Series will not be shown in the legend.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Series will be shown in the legend.",
                      "displayName": "On"
                    }
                  }
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "The series drilling behavior is inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "The series will not be drillable.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series will be drillable.",
                      "displayName": "On"
                    }
                  }
                },
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number",
                  "displayName": "Id"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "displayName": "Items",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color"
                    },
                    "borderWidth": {
                      "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                      "type": "number",
                      "displayName": "Border Width",
                      "units": "pixels"
                    },
                    "boxPlot": {
                      "description": "An object containing the style properties of the box plot item.",
                      "type": "object",
                      "displayName": "Box Plot",
                      "properties": {
                        "medianSvgClassName": {
                          "description": "The CSS style class to apply to the median line.",
                          "type": "string",
                          "displayName": "Median SVG Class Name"
                        },
                        "medianSvgStyle": {
                          "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                          "type": "object",
                          "displayName": "Median SVG Style"
                        },
                        "q2Color": {
                          "description": "The color of the Q2 segment of the box.",
                          "type": "string",
                          "displayName": "Q2 Color",
                          "format": "color"
                        },
                        "q2SvgClassName": {
                          "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Q2 SVG Class Name"
                        },
                        "q2SvgStyle": {
                          "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "object",
                          "displayName": "Q2 SVG Style"
                        },
                        "q3Color": {
                          "description": "The color of the Q3 segment of the box.",
                          "type": "string",
                          "displayName": "Q3 Color",
                          "format": "color"
                        },
                        "q3SvgClassName": {
                          "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Q3 SVG Class Name"
                        },
                        "q3SvgStyle": {
                          "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "object",
                          "displayName": "Q3 SVG Style"
                        },
                        "whiskerEndLength": {
                          "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                          "type": "string",
                          "displayName": "Whisker End Length"
                        },
                        "whiskerEndSvgClassName": {
                          "description": "The CSS style class to apply to the whisker ends.",
                          "type": "string",
                          "displayName": "Whisker End SVG Class Name"
                        },
                        "whiskerEndSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                          "type": "object",
                          "displayName": "Whisker End SVG Style"
                        },
                        "whiskerSvgClassName": {
                          "description": "The CSS style class to apply to the whisker stems.",
                          "type": "string",
                          "displayName": "Whisker SVG Class Name"
                        },
                        "whiskerSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                          "type": "object",
                          "displayName": "Whisker SVG Style"
                        }
                      }
                    },
                    "categories": {
                      "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                      "type": "Array<string>",
                      "displayName": "Categories"
                    },
                    "close": {
                      "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                      "type": "number",
                      "displayName": "Close"
                    },
                    "color": {
                      "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                      "type": "string",
                      "displayName": "Color",
                      "format": "color"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Drilling",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "Drilling behavior will be inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "Drilling will not be enabled for the data item.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Drilling will be enabled for the data item.",
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                      "type": "number",
                      "displayName": "High"
                    },
                    "id": {
                      "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "items": {
                      "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                      "type": "Array<Object>|Array<number>",
                      "displayName": "Items"
                    },
                    "label": {
                      "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                      "type": "string|Array<string>",
                      "displayName": "Label",
                      "translatable": true
                    },
                    "labelPosition": {
                      "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Label Position",
                      "enumValues": [
                        "aboveMarker",
                        "afterMarker",
                        "auto",
                        "beforeMarker",
                        "belowMarker",
                        "center",
                        "insideBarEdge",
                        "none",
                        "outsideBarEdge",
                        "outsideSlice"
                      ],
                      "propertyEditorValues": {
                        "aboveMarker": {
                          "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Above Marker"
                        },
                        "afterMarker": {
                          "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "After Marker"
                        },
                        "auto": {
                          "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                          "displayName": "Auto"
                        },
                        "beforeMarker": {
                          "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Before Marker"
                        },
                        "belowMarker": {
                          "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                          "displayName": "Below Marker"
                        },
                        "center": {
                          "description": "Label will be placed in the center of the data marker.",
                          "displayName": "Center"
                        },
                        "insideBarEdge": {
                          "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                          "displayName": "Inside Bar Edge"
                        },
                        "none": {
                          "description": "No data label is shown.",
                          "displayName": "None"
                        },
                        "outsideBarEdge": {
                          "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                          "displayName": "Outside Bar Edge"
                        },
                        "outsideSlice": {
                          "description": "Label will be placed outside the chart. Only applies to pie chart.",
                          "displayName": "Outside Slice"
                        }
                      }
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                      "type": "object|Array<Object>",
                      "displayName": "Label Style"
                    },
                    "low": {
                      "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                      "type": "number",
                      "displayName": "Low"
                    },
                    "markerDisplayed": {
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                      "type": "string",
                      "displayName": "Marker Displayed",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                          "displayName": "Auto"
                        },
                        "off": {
                          "description": "Data marker will be displayed.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Data marker will not be displayed.",
                          "displayName": "On"
                        }
                      }
                    },
                    "markerShape": {
                      "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Marker Shape",
                      "propertyEditorValues": {
                        "auto": {
                          "description": "Data marker shape will be based on chart type.",
                          "displayName": "Auto"
                        },
                        "circle": {
                          "description": "Data markers will be circular in shape.",
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "description": "Data markers will be diamond in shape.",
                          "displayName": "Diamond"
                        },
                        "human": {
                          "description": "Data markers will be human in shape.",
                          "displayName": "Human"
                        },
                        "plus": {
                          "description": "Data markers will be plus in shape.",
                          "displayName": "Plus"
                        },
                        "square": {
                          "description": "Data markers will be square in shape.",
                          "displayName": "Square"
                        },
                        "star": {
                          "description": "Data markers will be star in shape.",
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "description": "Data markers will be of a triangular shape facing down.",
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "description": "Data markers will be of a triangular shape facing up.",
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "markerSize": {
                      "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                      "type": "number",
                      "displayName": "Marker Size",
                      "units": "pixels"
                    },
                    "open": {
                      "description": "The open value for stock candlestick.",
                      "type": "number",
                      "displayName": "Open"
                    },
                    "pattern": {
                      "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "auto",
                      "enumValues": [
                        "auto",
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "No pattern is applied to data item fill.",
                          "displayName": "Auto"
                        },
                        "largeChecker": {
                          "description": "Large checker pattern is applied to the data item.",
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "description": "Large cross hatch pattern is applied to the data item.",
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "description": "Large diagonal left pattern is applied to the data item.",
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "description": "Large diagonal right pattern is applied to the data item.",
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "description": "Large diamond pattern is applied to the data item.",
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "description": "Large triangle pattern is applied to the data item.",
                          "displayName": "Large Triangle"
                        },
                        "smallChecker": {
                          "description": "Small checker pattern is applied to the data item.",
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "description": "Small cross hatch pattern is applied to the data item.",
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "description": "Small diagonal left pattern is applied to the data item.",
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "description": "Small diagonal right pattern is applied to the data item.",
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "description": "Small diamond pattern is applied to the data item.",
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "description": "Small triangle pattern is applied to the data item.",
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "q1": {
                      "description": "The first quartile value for box plot.",
                      "type": "number",
                      "displayName": "Q1"
                    },
                    "q2": {
                      "description": "The second quartile (median) value for box plot.",
                      "type": "number",
                      "displayName": "Q2"
                    },
                    "q3": {
                      "description": "The third quartile value for box plot.",
                      "type": "number",
                      "displayName": "Q3"
                    },
                    "shortDesc": {
                      "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string|function",
                      "displayName": "Short Desc",
                      "translatable": true
                    },
                    "source": {
                      "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                      "type": "string",
                      "displayName": "Source"
                    },
                    "sourceHover": {
                      "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                      "type": "string",
                      "displayName": "Source Hover"
                    },
                    "sourceHoverSelected": {
                      "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                      "type": "string",
                      "displayName": "Source Hover Selected"
                    },
                    "sourceSelected": {
                      "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                      "type": "string",
                      "displayName": "Source Selected"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "targetValue": {
                      "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                      "type": "number",
                      "displayName": "Target Value"
                    },
                    "value": {
                      "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                      "type": "number",
                      "displayName": "Value"
                    },
                    "volume": {
                      "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                      "type": "number",
                      "displayName": "Volume"
                    },
                    "x": {
                      "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                      "type": "number|string",
                      "displayName": "X"
                    },
                    "y": {
                      "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                      "type": "number",
                      "displayName": "Y"
                    },
                    "z": {
                      "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                      "type": "number",
                      "displayName": "Z"
                    }
                  }
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "displayName": "Line Style",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Line Type",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value depending on series type.",
                      "displayName": "Auto"
                    },
                    "centeredSegmented": {
                      "description": "Data points will be connected with a centered segmented line.",
                      "displayName": "Centered Segmented"
                    },
                    "centeredStepped": {
                      "description": "Data points will be connected with a centered stepped line.",
                      "displayName": "Centered Stepped"
                    },
                    "curved": {
                      "description": "Data points will be connected with a curved line.",
                      "displayName": "Curved"
                    },
                    "none": {
                      "description": "Data points will not be connected.",
                      "displayName": "None"
                    },
                    "segmented": {
                      "description": "Data points will be connected with a segmented line.",
                      "displayName": "Segmented"
                    },
                    "stepped": {
                      "description": "Data points will be connected with a stepped line.",
                      "displayName": "Stepped"
                    },
                    "straight": {
                      "description": "Data points will be connected with a straight line.",
                      "displayName": "Straight"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "displayName": "Line Width",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "displayName": "Marker Color",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Marker Displayed",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data markers belonging to the series will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data markers belonging to the series will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Marker Shape",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "displayName": "Marker Size",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Marker SVG Class Name"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Marker SVG Style"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string",
                  "displayName": "Name"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "displayName": "Pattern",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "displayName": "Pie Slice Explode",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "displayName": "Short Desc",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string",
                  "displayName": "Source"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover Selected"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Selected"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string",
                  "displayName": "Stack Category"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "displayName": "Type",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ],
                  "propertyEditorValues": {
                    "area": {
                      "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                      "displayName": "Area"
                    },
                    "auto": {
                      "description": "Series type will be inherited from chart type.",
                      "displayName": "Auto"
                    },
                    "bar": {
                      "description": "Series will be represented by a bar.",
                      "displayName": "Bar"
                    },
                    "boxPlot": {
                      "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                      "displayName": "Box Plot"
                    },
                    "candlestick": {
                      "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                      "displayName": "Candlestick"
                    },
                    "line": {
                      "description": "Series will be represented by a line.",
                      "displayName": "Line"
                    },
                    "lineWithArea": {
                      "description": "Series will be presented by a line and area.",
                      "displayName": "Line With Area"
                    }
                  }
                }
              }
            }
          }
        },
        "seriesComparator": {
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "type": "function",
          "displayName": "Series Comparator",
          "value": null,
          "help": "#seriesComparator"
        },
        "sorting": {
          "description": "Specifies the sorting of the data. It should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "#sorting",
          "enumValues": [
            "ascending",
            "descending",
            "off"
          ],
          "propertyEditorValues": {
            "ascending": {
              "description": "Data items are sorted in ascending order.",
              "displayName": "Ascending"
            },
            "descending": {
              "description": "Data items are sorted in descending order.",
              "displayName": "Descending"
            },
            "off": {
              "description": "Groups are sorted in the order they are discovered in the data.",
              "displayName": "Off"
            }
          }
        },
        "splitDualY": {
          "description": "Defines whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support \"off\".",
          "type": "string",
          "displayName": "Split Dual Y",
          "value": "auto",
          "help": "#splitDualY",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Plot area will not be split into two sections except for the stock charts.",
              "displayName": "Auto"
            },
            "off": {
              "description": "Plot area will not be split into two sections.",
              "displayName": "Off"
            },
            "on": {
              "description": "Plot area will be split into two sections corresponding to datasets assigned to the different Y-axes.",
              "displayName": "On"
            }
          }
        },
        "splitterPosition": {
          "description": "In a split dual-Y chart, specifies the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.",
          "type": "number",
          "displayName": "Splitter Position",
          "value": 0.5,
          "maximum": 1,
          "minimum": 0,
          "help": "#splitterPosition"
        },
        "stack": {
          "description": "Defines whether the data items are stacked. Only applies to bar, line, area, and combo charts. Does not apply to range series.",
          "type": "string",
          "displayName": "Stack",
          "value": "off",
          "help": "#stack",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Data items will not be stacked.",
              "displayName": "Off"
            },
            "on": {
              "description": "Data items belonging to same group will be stacked.",
              "displayName": "On"
            }
          }
        },
        "stackLabel": {
          "description": "Defines whether the total values of stacked data items should be displayed. Only applies to bar charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Stack Label",
          "value": "off",
          "help": "#stackLabel",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "The total value of the stacked data items will not be displayed.",
              "displayName": "Off"
            },
            "on": {
              "description": "The total value of the stacked data items will be displayed.",
              "displayName": "On"
            }
          }
        },
        "stackLabelProvider": {
          "description": "A function that returns a custom stack label. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Stack Label Provider",
          "value": null,
          "help": "#stackLabelProvider"
        },
        "styleDefaults": {
          "description": "An object defining the default styles for series colors, marker shapes, and other style attributes. Properties specified on this object may be overridden by specifications on the data object.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "animationDownColor": {
              "description": "The color of the indicator shown for a decreasing data change animation.",
              "type": "string",
              "displayName": "Animation Down Color",
              "value": null,
              "format": "color"
            },
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "value": null,
              "minimum": 0,
              "units": "milliseconds"
            },
            "animationIndicators": {
              "description": "Defines whether data change indicators are displayed during animation.",
              "type": "string",
              "displayName": "Animation Indicators",
              "value": "all",
              "enumValues": [
                "all",
                "none"
              ],
              "propertyEditorValues": {
                "all": {
                  "description": "Data change indicators will be enabled.",
                  "displayName": "All"
                },
                "none": {
                  "description": "Data change indicators will be disabled.",
                  "displayName": "None"
                }
              }
            },
            "animationUpColor": {
              "description": "The color of the indicator shown for an increasing data change animation.",
              "type": "string",
              "displayName": "Animation Up Color",
              "value": null,
              "format": "color"
            },
            "barGapRatio": {
              "description": "Specifies the width of the bar group gap as a ratio of the group width. The valid value is a number from 0 to 1.",
              "type": "number",
              "displayName": "Bar Gap Ratio",
              "value": null,
              "maximum": 1,
              "minimum": 0
            },
            "borderColor": {
              "description": "The default border color for the data items. For funnel and pyramid charts, it is used for the slice border.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color"
            },
            "borderWidth": {
              "description": "The default border width for the data items. For funnel and pyramid charts, it is used for the slice border.",
              "type": "number",
              "displayName": "Border Width",
              "value": null,
              "units": "pixels"
            },
            "boxPlot": {
              "description": "An object containing the style properties of the box plot items.",
              "type": "object",
              "displayName": "Box Plot",
              "properties": {
                "medianSvgClassName": {
                  "description": "The CSS style class to apply to the median line.",
                  "type": "string",
                  "displayName": "Median SVG Class Name",
                  "value": ""
                },
                "medianSvgStyle": {
                  "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "Median SVG Style",
                  "value": {}
                },
                "whiskerEndLength": {
                  "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                  "type": "string",
                  "displayName": "Whisker End Length",
                  "value": null
                },
                "whiskerEndSvgClassName": {
                  "description": "The CSS style class to apply to the whisker ends.",
                  "type": "string",
                  "displayName": "Whisker End SVG Class Name",
                  "value": ""
                },
                "whiskerEndSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker ends.",
                  "type": "object",
                  "displayName": "Whisker End SVG Style",
                  "value": {}
                },
                "whiskerSvgClassName": {
                  "description": "The CSS style class to apply to the whisker stems.",
                  "type": "string",
                  "displayName": "Whisker SVG Class Name",
                  "value": ""
                },
                "whiskerSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker stems.",
                  "type": "object",
                  "displayName": "Whisker SVG Style",
                  "value": {}
                }
              }
            },
            "colors": {
              "description": "The array defining the default color ramp for the series.",
              "type": "Array<string>",
              "displayName": "Colors",
              "value": null
            },
            "dataCursor": {
              "description": "An object defining the data cursor style.",
              "type": "object",
              "displayName": "Data Cursor",
              "properties": {
                "lineColor": {
                  "description": "The color of the data cursor line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the data cursor line.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data cursor line in pixels.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data cursor marker. Defaults to the data series color.",
                  "type": "string",
                  "displayName": "Marker Color",
                  "value": null,
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Whether the data cursor marker is displayed. Marker should only be hidden if the data cursor is displaying information for the entire group.",
                  "type": "string",
                  "displayName": "Marker Displayed",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "Data cursor marker will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data cursor marker will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data cursor marker in pixels.",
                  "type": "number",
                  "displayName": "Marker Size",
                  "value": null,
                  "units": "pixels"
                }
              }
            },
            "dataItemGaps": {
              "description": "Specifies the presence and size of the gaps between data items, such as bars, markers, and areas. Valid values are a percentage string from 0% to 100%, where 100% produces the maximum supported gaps.",
              "type": "string",
              "displayName": "Data Item Gaps",
              "value": null
            },
            "dataLabelCollision": {
              "description": "Rule for adjusting data label layout. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Data Label Collision",
              "value": "none",
              "enumValues": [
                "fitInBounds",
                "none"
              ],
              "propertyEditorValues": {
                "fitInBounds": {
                  "description": "Data label positions will be adjusted in order to fit in the plot area.",
                  "displayName": "Fit In Bounds"
                },
                "none": {
                  "description": "No data label positions will be adjusted to fit in the plot area. Labels may flow outside the plot area.",
                  "displayName": "None"
                }
              }
            },
            "dataLabelPosition": {
              "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
              "type": "string|Array<string>",
              "displayName": "Data Label Position",
              "value": "auto",
              "enumValues": [
                "aboveMarker",
                "afterMarker",
                "auto",
                "beforeMarker",
                "belowMarker",
                "center",
                "insideBarEdge",
                "none",
                "outsideBarEdge",
                "outsideSlice"
              ],
              "propertyEditorValues": {
                "aboveMarker": {
                  "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                  "displayName": "Above Marker"
                },
                "afterMarker": {
                  "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                  "displayName": "After Marker"
                },
                "auto": {
                  "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                  "displayName": "Auto"
                },
                "beforeMarker": {
                  "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                  "displayName": "Before Marker"
                },
                "belowMarker": {
                  "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                  "displayName": "Below Marker"
                },
                "center": {
                  "description": "Label will be placed in the center of the data marker.",
                  "displayName": "Center"
                },
                "insideBarEdge": {
                  "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                  "displayName": "Inside Bar Edge"
                },
                "none": {
                  "description": "No data label is shown.",
                  "displayName": "None"
                },
                "outsideBarEdge": {
                  "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                  "displayName": "Outside Bar Edge"
                },
                "outsideSlice": {
                  "description": "Label will be placed outside the chart. Only applies to pie chart.",
                  "displayName": "Outside Slice"
                }
              }
            },
            "dataLabelStyle": {
              "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
              "type": "object|Array<Object>",
              "displayName": "Data Label Style",
              "value": null
            },
            "funnelBackgroundColor": {
              "description": "The default background color of funnel slices that show actual/target values.",
              "type": "string",
              "displayName": "Funnel Background Color",
              "value": null,
              "format": "color"
            },
            "groupSeparators": {
              "description": "An object defining the style for hierarchical label separators.",
              "type": "object",
              "displayName": "Group Separators",
              "properties": {
                "color": {
                  "description": "The color of the separators lines.",
                  "type": "string",
                  "displayName": "Color",
                  "value": null,
                  "format": "color"
                },
                "rendered": {
                  "description": "Defines whether the group separators are displayed.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Group separators in hierarchical axis will be displayed.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Group separators in hierarchical axis will not be displayed.",
                      "displayName": "Off"
                    }
                  }
                }
              }
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting items in chart.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": null,
              "minimum": 0,
              "units": "milliseconds"
            },
            "lineStyle": {
              "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
              "type": "string",
              "displayName": "Line Style",
              "value": "solid",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "description": "Line will have dashed strokes.",
                  "displayName": "Dashed"
                },
                "dotted": {
                  "description": "Line will have dotted strokes.",
                  "displayName": "Dotted"
                },
                "solid": {
                  "description": "Line will have a solid stroke.",
                  "displayName": "Solid"
                }
              }
            },
            "lineType": {
              "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Line Type",
              "value": "auto",
              "enumValues": [
                "auto",
                "centeredSegmented",
                "centeredStepped",
                "curved",
                "none",
                "segmented",
                "stepped",
                "straight"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Defaults to none for scatter and bubble charts otherwise line type is straight.",
                  "displayName": "Auto"
                },
                "centeredSegmented": {
                  "description": "Data points will be connected with a centered segmented line.",
                  "displayName": "Centered Segmented"
                },
                "centeredStepped": {
                  "description": "Data points will be connected with a centered stepped line.",
                  "displayName": "Centered Stepped"
                },
                "curved": {
                  "description": "Data points will be connected with a curved line.",
                  "displayName": "Curved"
                },
                "none": {
                  "description": "Data points will not be connected.",
                  "displayName": "None"
                },
                "segmented": {
                  "description": "Data points will be connected with a segmented line.",
                  "displayName": "Segmented"
                },
                "stepped": {
                  "description": "Data points will be connected with a stepped line.",
                  "displayName": "Stepped"
                },
                "straight": {
                  "description": "Data points will be connected with a straight line.",
                  "displayName": "Straight"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
              "type": "number",
              "displayName": "Line Width",
              "value": null,
              "minimum": 0,
              "units": "pixels"
            },
            "markerColor": {
              "description": "The color of the data markers, if different from the series color.",
              "type": "string",
              "displayName": "Marker Color",
              "value": null,
              "format": "color"
            },
            "markerDisplayed": {
              "description": "Defines whether the data markers should be displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
              "type": "string",
              "displayName": "Marker Displayed",
              "value": "auto",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                  "displayName": "Auto"
                },
                "off": {
                  "description": "Data markers will not be displayed.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Data markers will be displayed.",
                  "displayName": "On"
                }
              }
            },
            "markerShape": {
              "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Marker Shape",
              "value": "auto",
              "propertyEditorValues": {
                "auto": {
                  "description": "Data marker shape will be based on chart type.",
                  "displayName": "Auto"
                },
                "circle": {
                  "description": "Data markers will be circular in shape.",
                  "displayName": "Circle"
                },
                "diamond": {
                  "description": "Data markers will be diamond in shape.",
                  "displayName": "Diamond"
                },
                "human": {
                  "description": "Data markers will be human in shape.",
                  "displayName": "Human"
                },
                "plus": {
                  "description": "Data markers will be plus in shape.",
                  "displayName": "Plus"
                },
                "square": {
                  "description": "Data markers will be square in shape.",
                  "displayName": "Square"
                },
                "star": {
                  "description": "Data markers will be star in shape.",
                  "displayName": "Star"
                },
                "triangleDown": {
                  "description": "Data markers will be of a triangular shape facing down.",
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "description": "Data markers will be of a triangular shape facing up.",
                  "displayName": "Triangle Up"
                }
              }
            },
            "markerSize": {
              "description": "The size of the data markers in pixels.",
              "type": "number",
              "displayName": "Marker Size",
              "value": null,
              "units": "pixels"
            },
            "marqueeBorderColor": {
              "description": "The border color of the marquee. Applies to marquee selection and marquee zoom.",
              "type": "string",
              "displayName": "Marquee Border Color",
              "value": null,
              "format": "color"
            },
            "marqueeColor": {
              "description": "The fill color of the marquee. Applies to marquee selection and marquee zoom.",
              "type": "string",
              "displayName": "Marquee Color",
              "value": null,
              "format": "color"
            },
            "maxBarWidth": {
              "description": "Specifies the maximum width of each bar in pixels.",
              "type": "number",
              "displayName": "Max Bar Width",
              "value": null,
              "units": "pixels"
            },
            "otherColor": {
              "description": "Specifies the color of the \"Other\" slice. Only applies to pie chart.",
              "type": "string",
              "displayName": "Other Color",
              "value": null,
              "format": "color"
            },
            "patterns": {
              "description": "The array defining the default pattern ramp for the series. This is used only when seriesEffect is 'pattern'.",
              "type": "Array<string>",
              "displayName": "Patterns",
              "value": null
            },
            "pieFeelerColor": {
              "description": "The color of the line extending from the pie slice to the slice label.",
              "type": "string",
              "displayName": "Pie Feeler Color",
              "value": null,
              "format": "color"
            },
            "pieInnerRadius": {
              "description": "Specifies the radius of the inner circle that can be used to create a donut chart. Valid values range from 0 (default) to 1. Not supported if 3D effect is on.",
              "type": "number",
              "displayName": "Pie Inner Radius",
              "value": 0,
              "maximum": 1,
              "minimum": 0
            },
            "selectionEffect": {
              "description": "The selection effect that is applied to selected items. The values explode and highlightAndExplode only apply to pie charts.",
              "type": "string",
              "displayName": "Selection Effect",
              "value": "highlight",
              "enumValues": [
                "explode",
                "highlight",
                "highlightAndExplode"
              ],
              "propertyEditorValues": {
                "explode": {
                  "description": "Selected data items will have an explode effect.",
                  "displayName": "Explode"
                },
                "highlight": {
                  "description": "Selected data items will be highlighted.",
                  "displayName": "Highlight"
                },
                "highlightAndExplode": {
                  "description": "Selected data items will have both the highligt and explode effect.",
                  "displayName": "Highlight And Explode"
                }
              }
            },
            "seriesEffect": {
              "description": "Defines the fill effect for the data items.",
              "type": "string",
              "displayName": "Series Effect",
              "value": "color",
              "enumValues": [
                "color",
                "gradient",
                "pattern"
              ],
              "propertyEditorValues": {
                "color": {
                  "description": "Data items will be filled with solid colors.",
                  "displayName": "Color"
                },
                "gradient": {
                  "description": "Data items will have a gradient.",
                  "displayName": "Gradient"
                },
                "pattern": {
                  "description": "Data items will be filled with colored patterns.",
                  "displayName": "Pattern"
                }
              }
            },
            "shapes": {
              "description": "The array defining the default shape ramp for the series. Valid values are defined in the markerShape attribute.",
              "type": "Array<string>",
              "displayName": "Shapes",
              "value": null
            },
            "stackLabelStyle": {
              "description": "The CSS style object defining the style of the stack label.",
              "type": "object",
              "displayName": "Stack Label Style",
              "value": {}
            },
            "stockFallingColor": {
              "description": "In stock charts, the color of the candlestick when the 'open' value is greater than the 'close' value.",
              "type": "string",
              "displayName": "Stock Falling Color",
              "value": null,
              "format": "color"
            },
            "stockRangeColor": {
              "description": "In stock charts, the color of the range bars for candlestick.",
              "type": "string",
              "displayName": "Stock Range Color",
              "value": null,
              "format": "color"
            },
            "stockRisingColor": {
              "description": "In stock charts, the color of the candlestick when the 'close' value is greater than the 'open' value.",
              "type": "string",
              "displayName": "Stock Rising Color",
              "value": null,
              "format": "color"
            },
            "stockVolumeColor": {
              "description": "In stock charts, the color of the volume bars. If specified, overrides the default rising and falling colors used by the volume bars.",
              "type": "string",
              "displayName": "Stock Volume Color",
              "value": null,
              "format": "color"
            },
            "threeDEffect": {
              "description": "Defines whether the chart is displayed with a 3D effect. Only applies to pie, funnel and pyramid charts.",
              "type": "string",
              "displayName": "Three D Effect",
              "value": "off",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Chart will not be displayed with a 3D effect.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Chart will be displayed with a 3D effect.",
                  "displayName": "On"
                }
              }
            },
            "tooltipLabelStyle": {
              "description": "The CSS style object defining the style of the labels in the tooltip.",
              "type": "object",
              "displayName": "Tooltip Label Style",
              "value": {}
            },
            "tooltipValueStyle": {
              "description": "The CSS style object defining the style of the values in the tooltip.",
              "type": "object",
              "displayName": "Tooltip Value Style",
              "value": {}
            }
          }
        },
        "timeAxisType": {
          "description": "The type of time axis to display in the chart. Time axis is only supported for Cartesian bar, line, area, stock, box plot, and combo charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Time Axis Type",
          "value": "auto",
          "help": "#timeAxisType",
          "enumValues": [
            "auto",
            "disabled",
            "enabled",
            "mixedFrequency",
            "skipGaps"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Time axis is disabled unless it is a stock chart, for which the timeAxisType is mixedFrequency.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Time axis is disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "The time value for each data item is passed using the group-id attribute of oj-chart-item. The time intervals do not have to be uniform. Data items from the same group should have the same time value.",
              "displayName": "Enabled"
            },
            "mixedFrequency": {
              "description": "The time value for each data item is passed using the x attribute of oj-chart-item. The time intervals do not have to be uniform. Data item from the same group can have different time values.",
              "displayName": "Mixed Frequency"
            },
            "skipGaps": {
              "description": "The time value for each data item is passed using the group-id attribute of oj-chart-item. The times will always be drawn uniformly ignoring gaps. Data items from the same group should have the same time value.",
              "displayName": "Skip Gaps"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for chart. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Chart will behave like touchStart if it determines that it is not rendered within scrolling content and if panning is not available for those elements that support the feature.",
              "displayName": "Auto"
            },
            "touchStart": {
              "description": "Chart will instantly trigger the touch gesture and consume the page pan events if it does not require an internal feature that requires a touch start gesture like panning, zooming, or when marquee selection is initiated.",
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelClose": {
              "description": "Used for the close value in the tooltip for stock data.",
              "type": "string",
              "help": "#translations.labelClose"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the date value in the tooltip, if a time axis is being used.",
              "type": "string",
              "help": "#translations.labelDate"
            },
            "labelDefaultGroupName": {
              "description": "Used when the group names are not specified.",
              "type": "string",
              "help": "#translations.labelDefaultGroupName"
            },
            "labelGroup": {
              "description": "Used for the default tooltip.",
              "type": "string",
              "help": "#translations.labelGroup"
            },
            "labelHigh": {
              "description": ">Used for the high value in the tooltip for stock and range data.",
              "type": "string",
              "help": "#translations.labelHigh"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelLow": {
              "description": "Used for the low value in the tooltip for stock and range data.",
              "type": "string",
              "help": "#translations.labelLow"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelOpen": {
              "description": "Used for the open value in the tooltip for stock data.",
              "type": "string",
              "help": "#translations.labelOpen"
            },
            "labelOther": {
              "description": "Used for the other series label which aggregates small data values.",
              "type": "string",
              "help": "#translations.labelOther"
            },
            "labelPercentage": {
              "description": "Used for displaying the percentage in the tooltip.",
              "type": "string",
              "help": "#translations.labelPercentage"
            },
            "labelQ1": {
              "description": "Used for displaying the first quartile for box plots.",
              "type": "string",
              "help": "#translations.labelQ1"
            },
            "labelQ2": {
              "description": "Used for displaying the second quartile (i.e. median) for box plots.",
              "type": "string",
              "help": "#translations.labelQ2"
            },
            "labelQ3": {
              "description": "Used for displaying the third quartile for box plots.",
              "type": "string",
              "help": "#translations.labelQ3"
            },
            "labelSeries": {
              "description": "Used for the default tooltip.",
              "type": "string",
              "help": "#translations.labelSeries"
            },
            "labelTargetValue": {
              "description": "Used for the funnel chart target value.",
              "type": "string",
              "help": "#translations.labelTargetValue"
            },
            "labelValue": {
              "description": "Used for the data item value in the tooltip.",
              "type": "string",
              "help": "#translations.labelValue"
            },
            "labelVolume": {
              "description": "Used for the volume value in the tooltip for stock data.",
              "type": "string",
              "help": "#translations.labelVolume"
            },
            "labelX": {
              "description": "Used for the x value in the tooltip.",
              "type": "string",
              "help": "#translations.labelX"
            },
            "labelY": {
              "description": "Used for the y value in the tooltip.",
              "type": "string",
              "help": "#translations.labelY"
            },
            "labelZ": {
              "description": "Used for the z value in the tooltip.",
              "type": "string",
              "help": "#translations.labelZ"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "tooltipPan": {
              "description": "Used for the pan tooltip.",
              "type": "string",
              "help": "#translations.tooltipPan"
            },
            "tooltipSelect": {
              "description": "Used for the marquee select tooltip.",
              "type": "string",
              "help": "#translations.tooltipSelect"
            },
            "tooltipZoom": {
              "description": "Used for the marquee zoom tooltip.",
              "type": "string",
              "help": "#translations.tooltipZoom"
            }
          }
        },
        "type": {
          "description": "Specifies the chart type. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Type",
          "value": "bar",
          "help": "#type",
          "enumValues": [
            "area",
            "bar",
            "boxPlot",
            "bubble",
            "combo",
            "funnel",
            "line",
            "lineWithArea",
            "pie",
            "pyramid",
            "scatter",
            "stock"
          ],
          "propertyEditorValues": {
            "area": {
              "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
              "displayName": "Area"
            },
            "bar": {
              "description": "Data items will be represented by bars.",
              "displayName": "Bar"
            },
            "boxPlot": {
              "description": "Series will be represented by box plot markers.",
              "displayName": "Box Plot"
            },
            "bubble": {
              "description": "Data items will be represented as bubble markers with x, y, and z values. z value defines the relative size of the bubbles.",
              "displayName": "Bubble"
            },
            "combo": {
              "description": "Multiple series can be represented with multiple types of markers: bar, line and area.",
              "displayName": "Combo"
            },
            "funnel": {
              "description": "Data items are represented as funnel slices.",
              "displayName": "Funnel"
            },
            "line": {
              "description": "Series will be represented by a line.",
              "displayName": "Line"
            },
            "lineWithArea": {
              "description": "Series will be presented by a line and area.",
              "displayName": "Line With Area"
            },
            "pie": {
              "description": "Data items are represented as pie slices.",
              "displayName": "Pie"
            },
            "pyramid": {
              "description": "Data items are represented as pyramid slices.",
              "displayName": "Pyramid"
            },
            "scatter": {
              "description": "Data items will be represented as markers with x and y values.",
              "displayName": "Scatter"
            },
            "stock": {
              "description": "Series will be represented by candlestick markers. There are other representations available like area, bar, line and line with area.",
              "displayName": "Stock"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "#valueFormats",
          "properties": {
            "close": {
              "description": "Specifies the value formatting and tooltip behavior for the close values of a stock chart.",
              "type": "object",
              "displayName": "Close",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "group": {
              "description": "Specifies tooltip behavior for the groups.",
              "type": "object",
              "displayName": "Group",
              "properties": {
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Value will be displayed in the tooltip.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Value will not be displayed in the tooltip.",
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip. This value can also take an array of strings to be applied to hierarchical group names, from outermost to innermost.",
                  "type": "string|Array<string>",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "high": {
              "description": "Specifies the value formatting and tooltip behavior for the high values.",
              "type": "object",
              "displayName": "High",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "label": {
              "description": "Specifies the value formatting for the data item labels.",
              "type": "object",
              "displayName": "Label",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                }
              }
            },
            "low": {
              "description": "Specifies the value formatting and tooltip behavior for the low values.",
              "type": "object",
              "displayName": "Low",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "open": {
              "description": "Specifies the value formatting and tooltip behavior for the open values of a stock chart.",
              "type": "object",
              "displayName": "Open",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "q1": {
              "description": "Specifies the value formatting and tooltip behavior for the q1 values of a box plot.",
              "type": "object",
              "displayName": "Q1",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "q2": {
              "description": "Specifies the value formatting and tooltip behavior for the q2 values of a box plot.",
              "type": "object",
              "displayName": "Q2",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "q3": {
              "description": "Specifies the value formatting and tooltip behavior for the q3 values of a box plot.",
              "type": "object",
              "displayName": "Q3",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "series": {
              "description": "Specifies tooltip behavior for the series.",
              "type": "object",
              "displayName": "Series",
              "properties": {
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "targetValue": {
              "description": "Specifies the value formatting and tooltip behavior for the target values of a funnel chart.",
              "type": "object",
              "displayName": "Target Value",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "value": {
              "description": "Specifies the value formatting and tooltip behavior for the values.",
              "type": "object",
              "displayName": "Value",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "volume": {
              "description": "Specifies the value formatting and tooltip behavior for the volume values of a stock chart.",
              "type": "object",
              "displayName": "Volume",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "x": {
              "description": "Specifies the value formatting and tooltip behavior for the x values.",
              "type": "object",
              "displayName": "X",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "y": {
              "description": "Specifies the value formatting and tooltip behavior for the y values.",
              "type": "object",
              "displayName": "Y",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "y2": {
              "description": "Specifies the value formatting and tooltip behavior for the y2 values.",
              "type": "object",
              "displayName": "Y2",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            },
            "z": {
              "description": "Specifies the value formatting and tooltip behavior for the z values.",
              "type": "object",
              "displayName": "Z",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true
                }
              }
            }
          }
        },
        "xAxis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
          "type": "object",
          "displayName": "X Axis",
          "help": "#xAxis",
          "properties": {
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "description": "Baseline starts at the minimum value of the data.",
                  "displayName": "Min"
                },
                "zero": {
                  "description": "Baseline starts at zero.",
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Max",
              "value": null
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Min",
              "value": null
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline. Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value according to theme is used.",
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "description": "Axis baseline color will be same as lineColor.",
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline. If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline. If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Max",
              "value": null
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Min",
              "value": null
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "description": "Reference object will not be shown in the legend.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Reference object will be shown in the legend.",
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of an area reference object. See the Help documentation for more information.",
                      "type": "number|string",
                      "displayName": "High",
                      "value": null
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null
                    },
                    "lineStyle": {
                      "description": "The line style of the line reference object. Does not apply to area reference objects.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "description": "Line will have dashed strokes.",
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "description": "Line will have dotted strokes.",
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "description": "Line will have a solid stroke.",
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the line reference object. Does not apply to area reference objects.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "description": "Reference object is rendered behind the data items.",
                          "displayName": "Back"
                        },
                        "front": {
                          "description": "Reference object is rendered in front of data items.",
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of an area reference object. See the Help documentation for more information.",
                      "type": "number|string",
                      "displayName": "Low",
                      "value": null
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "SVG Class Name",
                      "value": null
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "SVG Style",
                      "value": null
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true
                    },
                    "type": {
                      "description": "The type of reference object being shown. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "description": "Area reference object.",
                          "displayName": "Area"
                        },
                        "line": {
                          "description": "Line reference object.",
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a line reference object. This property defines a constant value across the entire reference object. See the Help documentation for more information.",
                      "type": "number|string",
                      "displayName": "Value",
                      "value": null
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Axis will not be rendered.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Axis will be rendered.",
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "description": "Axis values will follow a linear scale.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Axis values will follow a log scale.",
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "Axis tick labels will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis tick labels will be rendered.",
                      "displayName": "On"
                    }
                  }
                },
                "rotation": {
                  "description": "Defines whether the chart will automatically rotate the labels by 90 degrees in order to fit more labels on the axis. The rotation will only be applied to categorical labels for a horizontal axis.",
                  "type": "string",
                  "displayName": "Rotation",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "none"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Labels will automatically rotate by 90 degree in order to fit more labels on the axis if needed.",
                      "displayName": "Auto"
                    },
                    "none": {
                      "description": "Labels will not be rotated in order to fit more labels on the axis.",
                      "displayName": "None"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {}
                }
              }
            },
            "title": {
              "description": "The axis title. Does not apply to polar charts.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {}
            },
            "viewportEndGroup": {
              "description": "Specifies the end group of the current viewport. Only applies to charts with group or time axis. If not specified, the default end group is the last group in the data set.",
              "type": "number|string",
              "displayName": "Viewport End Group",
              "value": null
            },
            "viewportMax": {
              "description": "Specifies the maximum x coordinate of the current viewport for zoom and scroll. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Viewport Max",
              "value": null
            },
            "viewportMin": {
              "description": "Specifies the minimum x coordinate of the current viewport for zoom and scroll. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Viewport Min",
              "value": null
            },
            "viewportStartGroup": {
              "description": "Specifies the start group of the current viewport. Only applies to charts with group or time axis. If not specified, the default start group is the first group in the data set.",
              "type": "number|string",
              "displayName": "Viewport Start Group",
              "value": null
            }
          }
        },
        "y2Axis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles. Y2 axis is only supported for Cartesian bar, line, area, and combo charts.",
          "type": "object",
          "displayName": "Y2 Axis",
          "help": "#y2Axis",
          "properties": {
            "alignTickMarks": {
              "description": "Defines whether the tick marks of the y1 and y2 axes are aligned. Not supported for logarithmic axes.",
              "type": "string",
              "displayName": "Align Tick Marks",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Tick marks of y1 and y2 axes may not be aligned.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Tick marks of y1 and y2 axes will be aligned.",
                  "displayName": "On"
                }
              }
            },
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "description": "Baseline starts at the minimum value of the data.",
                  "displayName": "Min"
                },
                "zero": {
                  "description": "Baseline starts at zero.",
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Max",
              "value": null
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Min",
              "value": null
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline. Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value according to theme is used.",
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "description": "Axis baseline color will be same as lineColor.",
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline. If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline. If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Max",
              "value": null
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Min",
              "value": null
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "position": {
              "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "The axis position will be based on the chart's orientation.",
                  "displayName": "Auto"
                },
                "bottom": {
                  "description": "The axis will be placed at the bottom of the chart. Only applies to horizontal charts.",
                  "displayName": "Bottom"
                },
                "end": {
                  "description": "The axis will be placed at end of the chart. Only applies to vertical charts.",
                  "displayName": "End"
                },
                "start": {
                  "description": "The axis will be placed at start of the chart. Only applies to vertical charts.",
                  "displayName": "Start"
                },
                "top": {
                  "description": "The axis will be placed at the top of the chart. Only applies to horizontal charts.",
                  "displayName": "Top"
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "description": "Reference object will not be shown in the legend.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Reference object will be shown in the legend.",
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of an area reference object. This property defines a constant value across the entire reference area. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "High",
                      "value": null
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null
                    },
                    "items": {
                      "description": "An array of values or an array of objects that define the data for a varying reference object. See the Help documentation for more information.",
                      "type": "Array<Object>",
                      "displayName": "Items",
                      "value": null,
                      "properties": {
                        "high": {
                          "description": "The high value of this point of a varying area reference object.",
                          "type": "number",
                          "displayName": "High",
                          "value": null
                        },
                        "low": {
                          "description": "The low value of this point of a varying area reference object.",
                          "type": "number",
                          "displayName": "Low",
                          "value": null
                        },
                        "value": {
                          "description": "The value of this point of a varying line reference object. Null can be specified to skip a data point.",
                          "type": "number",
                          "displayName": "Value",
                          "value": null
                        },
                        "x": {
                          "description": "The x value of this point. Mainly used for scatter and bubble charts, and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string",
                          "displayName": "X",
                          "value": null
                        }
                      }
                    },
                    "lineStyle": {
                      "description": "The line style of the line reference object. Does not apply to area reference objects.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "description": "Line will have dashed strokes.",
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "description": "Line will have dotted strokes.",
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "description": "Line will have a solid stroke.",
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the varying reference object. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Line Type",
                      "value": "straight",
                      "enumValues": [
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "centeredSegmented": {
                          "description": "Data points will be connected with a centered segmented line.",
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "description": "Data points will be connected with a centered stepped line.",
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "description": "Data points will be connected with a curved line.",
                          "displayName": "Curved"
                        },
                        "segmented": {
                          "description": "Data points will be connected with a segmented line.",
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "description": "Data points will be connected with a stepped line.",
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "description": "Data points will be connected with a straight line.",
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the line reference object. Does not apply to area reference objects.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "description": "Reference object is rendered behind the data items.",
                          "displayName": "Back"
                        },
                        "front": {
                          "description": "Reference object is rendered in front of data items.",
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of an area reference object. This property defines a constant value across the entire reference area. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "Low",
                      "value": null
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "SVG Class Name",
                      "value": null
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "SVG Style",
                      "value": null
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true
                    },
                    "type": {
                      "description": "The type of reference object being shown. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "description": "Area reference object.",
                          "displayName": "Area"
                        },
                        "line": {
                          "description": "Line reference object.",
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a line reference object. This property defines a constant value across the entire reference object. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "Value",
                      "value": null
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Axis will not be rendered.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Axis will be rendered.",
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "description": "Axis values will follow a linear scale.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Axis values will follow a log scale.",
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "position": {
                  "description": "Defines the position of the tick labels relative to the plot area. Inside position is not supported for scatter and bubble charts.",
                  "type": "string",
                  "displayName": "Position",
                  "value": "outside",
                  "enumValues": [
                    "inside",
                    "outside"
                  ],
                  "propertyEditorValues": {
                    "inside": {
                      "description": "Tick labels will be rendered inside the plot area.",
                      "displayName": "Inside"
                    },
                    "outside": {
                      "description": "Tick labels will be rendered outside the plot area.",
                      "displayName": "Outside"
                    }
                  }
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "Axis tick labels will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis tick labels will be rendered.",
                      "displayName": "On"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {}
                }
              }
            },
            "title": {
              "description": "The axis title. Does not apply to polar charts.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {}
            }
          }
        },
        "yAxis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
          "type": "object",
          "displayName": "Y Axis",
          "help": "#yAxis",
          "properties": {
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "description": "Baseline starts at the minimum value of the data.",
                  "displayName": "Min"
                },
                "zero": {
                  "description": "Baseline starts at zero.",
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Max",
              "value": null
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Min",
              "value": null
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline. Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value according to theme is used.",
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "description": "Axis baseline color will be same as lineColor.",
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline. If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline. If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Max",
              "value": null
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Min",
              "value": null
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "properties": {
                "lineColor": {
                  "description": "The color of the line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color"
                },
                "lineStyle": {
                  "description": "The line style of the tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels"
                },
                "rendered": {
                  "description": "Defines whether the line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Axis line will not be rendered for y and y2 axis of bar, area, line, and combo charts.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Axis line will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis line will be rendered.",
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "position": {
              "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "The axis position will be based on the chart's orientation.",
                  "displayName": "Auto"
                },
                "bottom": {
                  "description": "The axis will be placed at the bottom of the chart. Only applies to horizontal charts.",
                  "displayName": "Bottom"
                },
                "end": {
                  "description": "The axis will be placed at end of the chart. Only applies to vertical charts.",
                  "displayName": "End"
                },
                "start": {
                  "description": "The axis will be placed at start of the chart. Only applies to vertical charts.",
                  "displayName": "Start"
                },
                "top": {
                  "description": "The axis will be placed at the top of the chart. Only applies to horizontal charts.",
                  "displayName": "Top"
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "description": "Reference object will not be shown in the legend.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Reference object will be shown in the legend.",
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of an area reference object. This property defines a constant value across the entire reference area. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "High",
                      "value": null
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null
                    },
                    "items": {
                      "description": "An array of values or an array of objects that define the data for a varying reference object. See the Help documentation for more information.",
                      "type": "Array<Object>",
                      "displayName": "Items",
                      "value": null,
                      "properties": {
                        "high": {
                          "description": "The high value of this point of a varying area reference object.",
                          "type": "number",
                          "displayName": "High",
                          "value": null
                        },
                        "low": {
                          "description": "The low value of this point of a varying area reference object.",
                          "type": "number",
                          "displayName": "Low",
                          "value": null
                        },
                        "value": {
                          "description": "The value of this point of a varying line reference object. Null can be specified to skip a data point.",
                          "type": "number",
                          "displayName": "Value",
                          "value": null
                        },
                        "x": {
                          "description": "The x value of this point. Mainly used for scatter and bubble charts, and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string",
                          "displayName": "X",
                          "value": null
                        }
                      }
                    },
                    "lineStyle": {
                      "description": "The line style of the line reference object. Does not apply to area reference objects.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "description": "Line will have dashed strokes.",
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "description": "Line will have dotted strokes.",
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "description": "Line will have a solid stroke.",
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the varying reference object. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Line Type",
                      "value": "straight",
                      "enumValues": [
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "centeredSegmented": {
                          "description": "Data points will be connected with a centered segmented line.",
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "description": "Data points will be connected with a centered stepped line.",
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "description": "Data points will be connected with a curved line.",
                          "displayName": "Curved"
                        },
                        "segmented": {
                          "description": "Data points will be connected with a segmented line.",
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "description": "Data points will be connected with a stepped line.",
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "description": "Data points will be connected with a straight line.",
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the line reference object. Does not apply to area reference objects.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "description": "Reference object is rendered behind the data items.",
                          "displayName": "Back"
                        },
                        "front": {
                          "description": "Reference object is rendered in front of data items.",
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of an area reference object. This property defines a constant value across the entire reference area. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "Low",
                      "value": null
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "SVG Class Name",
                      "value": null
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "SVG Style",
                      "value": null
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true
                    },
                    "type": {
                      "description": "The type of reference object being shown. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "description": "Area reference object.",
                          "displayName": "Area"
                        },
                        "line": {
                          "description": "Line reference object.",
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a line reference object. This property defines a constant value across the entire reference object. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "Value",
                      "value": null
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Axis will not be rendered.",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Axis will be rendered.",
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "description": "Axis values will follow a linear scale.",
                  "displayName": "Linear"
                },
                "log": {
                  "description": "Axis values will follow a log scale.",
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null
                },
                "position": {
                  "description": "Defines the position of the tick labels relative to the plot area. Inside position is not supported for scatter and bubble charts.",
                  "type": "string",
                  "displayName": "Position",
                  "value": "outside",
                  "enumValues": [
                    "inside",
                    "outside"
                  ],
                  "propertyEditorValues": {
                    "inside": {
                      "description": "Tick labels will be rendered inside the plot area.",
                      "displayName": "Inside"
                    },
                    "outside": {
                      "description": "Tick labels will be rendered outside the plot area.",
                      "displayName": "Outside"
                    }
                  }
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "Axis tick labels will not be rendered.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Axis tick labels will be rendered.",
                      "displayName": "On"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Chart chooses the scaling based on the data.",
                      "displayName": "Auto"
                    },
                    "billion": {
                      "description": "Values will be scaled with suffix corresponding to billion based on locale.",
                      "displayName": "Billion"
                    },
                    "million": {
                      "description": "Values will be scaled with suffix corresponding to million based on locale.",
                      "displayName": "Million"
                    },
                    "none": {
                      "description": "Values will not be scaled with any suffix.",
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "description": "Values will be scaled with suffix corresponding to quadrillion based on locale.",
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "description": "Values will be scaled with suffix corresponding to thousand based on locale.",
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "description": "Values will be scaled with suffix corresponding to trillion based on locale.",
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {}
                }
              }
            },
            "title": {
              "description": "The axis title. Does not apply to polar charts.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {}
            },
            "viewportMax": {
              "description": "Specifies the maximum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis max.",
              "type": "number",
              "displayName": "Viewport Max",
              "value": null
            },
            "viewportMin": {
              "description": "Specifies the minimum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis min.",
              "type": "number",
              "displayName": "Viewport Min",
              "value": null
            }
          }
        },
        "zoomAndScroll": {
          "description": "Specifies the zoom and scroll behavior of the chart. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Zoom And Scroll",
          "value": "off",
          "help": "#zoomAndScroll",
          "enumValues": [
            "delayed",
            "delayedScrollOnly",
            "live",
            "liveScrollOnly",
            "off"
          ],
          "propertyEditorValues": {
            "delayed": {
              "description": "When zooming or scrolling, chart will wait to update until the zoom/scroll action is done.",
              "displayName": "Delayed"
            },
            "delayedScrollOnly": {
              "description": "Zooming is disabled and chart will wait to update until scroll action is done.",
              "displayName": "Delayed Scroll Only"
            },
            "live": {
              "description": "When zooming or scrolling, chart will be updated continuously as it is being manipulated.",
              "displayName": "Live"
            },
            "liveScrollOnly": {
              "description": "Zooming is disabled and chart is updated continuously when scrolled.",
              "displayName": "Live Scroll Only"
            },
            "off": {
              "description": "Zoom and scroll will be disabled.",
              "displayName": "Off"
            }
          }
        },
        "zoomDirection": {
          "description": "Specifies the zoom direction of bubble and scatter charts. \"Auto\" zooms in both x and y direction. Use \"x\" or \"y\" for single direction zooming.",
          "type": "string",
          "displayName": "Zoom Direction",
          "value": "auto",
          "help": "#zoomDirection",
          "enumValues": [
            "auto",
            "x",
            "y"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Chart will zoom in both x and y direction.",
              "displayName": "Auto"
            },
            "x": {
              "description": "Chart will only zoom in x direction.",
              "displayName": "X"
            },
            "y": {
              "description": "Chart will only zoom in y direction.",
              "displayName": "Y"
            }
          }
        }
      },
      "methods": {
        "getAutomation": {
          "description": "Returns the chart automation component used by webdriver.",
          "visible": false,
          "help": "#getAutomation"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDataItem": {
          "description": "Returns information for automation testing verification of a specified data item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getDataItem",
          "params": [
            {
              "name": "seriesIndex",
              "description": "",
              "type": "number"
            },
            {
              "name": "groupIndex",
              "description": "",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getGroup": {
          "description": "Returns the group corresponding to the given index",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getGroup",
          "params": [
            {
              "name": "groupIndex",
              "description": "the group index",
              "type": "string"
            }
          ],
          "return": "string"
        },
        "getGroupCount": {
          "description": "Returns number of groups in the chart data",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getGroupCount",
          "return": "number"
        },
        "getLegend": {
          "description": "Returns an object that contains sizing information for the chart legend.",
          "help": "#getLegend",
          "return": "object"
        },
        "getPlotArea": {
          "description": "Returns an object that contains sizing information for the chart plot area.",
          "help": "#getPlotArea",
          "return": "object"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "getSeries": {
          "description": "Returns the series corresponding to the given index",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getSeries",
          "params": [
            {
              "name": "seriesIndex",
              "description": "the series index",
              "type": "string"
            }
          ],
          "return": "string"
        },
        "getSeriesCount": {
          "description": "Returns number of series in the chart data",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getSeriesCount",
          "return": "number"
        },
        "getValuesAt": {
          "description": "Returns the x, y, and y2 axis values at the specified X and Y coordinate.",
          "help": "#getValuesAt",
          "params": [
            {
              "name": "x",
              "description": "The X coordinate relative to the component.",
              "type": "number"
            },
            {
              "name": "y",
              "description": "The Y coordinate relative to the component.",
              "type": "number"
            }
          ],
          "return": "object"
        },
        "getXAxis": {
          "description": "Returns an object that contains sizing information for the chart X-Axis.",
          "help": "#getXAxis",
          "return": "object"
        },
        "getY2Axis": {
          "description": "Returns an object that contains sizing information for the chart Y2-Axis.",
          "help": "#getY2Axis",
          "return": "object"
        },
        "getYAxis": {
          "description": "Returns an object that contains sizing information for the chart Y-Axis.",
          "help": "#getYAxis",
          "return": "object"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "bubbles": true,
          "status": [
            {
              "type": "deprecated",
              "since": "10.0.0",
              "description": "No longer recommended. Use separate drill listeners - ojItemDrill, ojGroupDrill, ojSeriesDrill, and ojMultiSeriesDrill instead."
            }
          ],
          "help": "#event:drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "string"
            },
            "series": {
              "description": "the series id of the drilled object, if applicable",
              "type": "string"
            },
            "group": {
              "description": "the group id of the drilled object, if applicable",
              "type": "string"
            },
            "data": {
              "description": "the data object of the drilled item",
              "type": "object|null",
              "properties": {
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "color": {
                  "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                  "type": "string",
                  "format": "color"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "Drilling behavior will be inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "Drilling will not be enabled for the data item.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Drilling will be enabled for the data item.",
                      "displayName": "On"
                    }
                  }
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "string|Array<string>",
                  "enumValues": [
                    "aboveMarker",
                    "afterMarker",
                    "auto",
                    "beforeMarker",
                    "belowMarker",
                    "center",
                    "insideBarEdge",
                    "none",
                    "outsideBarEdge",
                    "outsideSlice"
                  ],
                  "propertyEditorValues": {
                    "aboveMarker": {
                      "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Above Marker"
                    },
                    "afterMarker": {
                      "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "After Marker"
                    },
                    "auto": {
                      "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                      "displayName": "Auto"
                    },
                    "beforeMarker": {
                      "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Before Marker"
                    },
                    "belowMarker": {
                      "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Below Marker"
                    },
                    "center": {
                      "description": "Label will be placed in the center of the data marker.",
                      "displayName": "Center"
                    },
                    "insideBarEdge": {
                      "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Inside Bar Edge"
                    },
                    "none": {
                      "description": "No data label is shown.",
                      "displayName": "None"
                    },
                    "outsideBarEdge": {
                      "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Outside Bar Edge"
                    },
                    "outsideSlice": {
                      "description": "Label will be placed outside the chart. Only applies to pie chart.",
                      "displayName": "Outside Slice"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                  "type": "object|Array<Object>"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data marker will be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data marker will not be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                }
              }
            },
            "itemData": {
              "description": "the row data object of the drilled item. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "seriesData": {
              "description": "the data for the series of the drilled object",
              "type": "object|null",
              "properties": {
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "The series is not associated with the y2 axis.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series is associated with the y2 axis.",
                      "displayName": "On"
                    }
                  }
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series. The chart legend item will inherit this color value.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Series will not be shown in the legend.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Series will be shown in the legend.",
                      "displayName": "On"
                    }
                  }
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "The series drilling behavior is inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "The series will not be drillable.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series will be drillable.",
                      "displayName": "On"
                    }
                  }
                },
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value depending on series type.",
                      "displayName": "Auto"
                    },
                    "centeredSegmented": {
                      "description": "Data points will be connected with a centered segmented line.",
                      "displayName": "Centered Segmented"
                    },
                    "centeredStepped": {
                      "description": "Data points will be connected with a centered stepped line.",
                      "displayName": "Centered Stepped"
                    },
                    "curved": {
                      "description": "Data points will be connected with a curved line.",
                      "displayName": "Curved"
                    },
                    "none": {
                      "description": "Data points will not be connected.",
                      "displayName": "None"
                    },
                    "segmented": {
                      "description": "Data points will be connected with a segmented line.",
                      "displayName": "Segmented"
                    },
                    "stepped": {
                      "description": "Data points will be connected with a stepped line.",
                      "displayName": "Stepped"
                    },
                    "straight": {
                      "description": "Data points will be connected with a straight line.",
                      "displayName": "Straight"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data markers belonging to the series will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data markers belonging to the series will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ],
                  "propertyEditorValues": {
                    "area": {
                      "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                      "displayName": "Area"
                    },
                    "auto": {
                      "description": "Series type will be inherited from chart type.",
                      "displayName": "Auto"
                    },
                    "bar": {
                      "description": "Series will be represented by a bar.",
                      "displayName": "Bar"
                    },
                    "boxPlot": {
                      "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                      "displayName": "Box Plot"
                    },
                    "candlestick": {
                      "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                      "displayName": "Candlestick"
                    },
                    "line": {
                      "description": "Series will be represented by a line.",
                      "displayName": "Line"
                    },
                    "lineWithArea": {
                      "description": "Series will be presented by a line and area.",
                      "displayName": "Line With Area"
                    }
                  }
                }
              }
            },
            "groupData": {
              "description": "an array of data for the group the drilled object belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the drilled object",
              "type": "Array<Object>|null",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "Drilling behavior will be inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "Drilling will not be enabled on group label.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Drilling will be enabled on group label.",
                          "displayName": "On"
                        }
                      }
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                      "type": "string|number"
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            }
          }
        },
        "ojGroupDrill": {
          "description": "Triggered on a chart group drill gesture (double click if selection is enabled, single click otherwise).",
          "bubbles": true,
          "help": "#event:groupDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "string"
            },
            "group": {
              "description": "the group id of the drilled object. For hierarchical groups, it will be an array of outermost to innermost group id related to the drilled object",
              "type": "string|Array<string>"
            },
            "groupData": {
              "description": "an array of data for the group the drilled object belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the drilled object",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "Drilling behavior will be inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "Drilling will not be enabled on group label.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Drilling will be enabled on group label.",
                          "displayName": "On"
                        }
                      }
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                      "type": "string|number"
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            },
            "items": {
              "description": "an array containing objects describing the data items belonging to the drilled group",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "description": "The id for the data item.",
                      "type": "string|number"
                    },
                    "data": {
                      "description": "The data object of the drilled item.",
                      "type": "object|number",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    },
                    "itemData": {
                      "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used.",
                      "type": "object"
                    },
                    "series": {
                      "description": "The series id of the data item.",
                      "type": "string"
                    },
                    "group": {
                      "description": "The group id of the data item. For hierarchical group, it will be an array of outermost to innermost group related to the object.",
                      "type": "string|Array<string>"
                    }
                  }
                }
              }
            }
          }
        },
        "ojItemDrill": {
          "description": "Triggered on a chart item (double click if selection is enabled, single click otherwise).",
          "bubbles": true,
          "help": "#event:itemDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "string"
            },
            "series": {
              "description": "the series id of the drilled object",
              "type": "string"
            },
            "group": {
              "description": "the group id of the drilled object. For hierarchical groups, it will be an array of outermost to innermost group id related to the drilled object",
              "type": "string|Array<string>"
            },
            "data": {
              "description": "the data object of the drilled item",
              "type": "object",
              "properties": {
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "color": {
                  "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                  "type": "string",
                  "format": "color"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "Drilling behavior will be inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "Drilling will not be enabled for the data item.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Drilling will be enabled for the data item.",
                      "displayName": "On"
                    }
                  }
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "string|Array<string>",
                  "enumValues": [
                    "aboveMarker",
                    "afterMarker",
                    "auto",
                    "beforeMarker",
                    "belowMarker",
                    "center",
                    "insideBarEdge",
                    "none",
                    "outsideBarEdge",
                    "outsideSlice"
                  ],
                  "propertyEditorValues": {
                    "aboveMarker": {
                      "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Above Marker"
                    },
                    "afterMarker": {
                      "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "After Marker"
                    },
                    "auto": {
                      "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                      "displayName": "Auto"
                    },
                    "beforeMarker": {
                      "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Before Marker"
                    },
                    "belowMarker": {
                      "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Below Marker"
                    },
                    "center": {
                      "description": "Label will be placed in the center of the data marker.",
                      "displayName": "Center"
                    },
                    "insideBarEdge": {
                      "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Inside Bar Edge"
                    },
                    "none": {
                      "description": "No data label is shown.",
                      "displayName": "None"
                    },
                    "outsideBarEdge": {
                      "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Outside Bar Edge"
                    },
                    "outsideSlice": {
                      "description": "Label will be placed outside the chart. Only applies to pie chart.",
                      "displayName": "Outside Slice"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                  "type": "object|Array<Object>"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data marker will be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data marker will not be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                }
              }
            },
            "itemData": {
              "description": "the row data object of the drilled item. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "seriesData": {
              "description": "the data for the series of the drilled object",
              "type": "object",
              "properties": {
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "The series is not associated with the y2 axis.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series is associated with the y2 axis.",
                      "displayName": "On"
                    }
                  }
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series. The chart legend item will inherit this color value.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Series will not be shown in the legend.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Series will be shown in the legend.",
                      "displayName": "On"
                    }
                  }
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "The series drilling behavior is inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "The series will not be drillable.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series will be drillable.",
                      "displayName": "On"
                    }
                  }
                },
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value depending on series type.",
                      "displayName": "Auto"
                    },
                    "centeredSegmented": {
                      "description": "Data points will be connected with a centered segmented line.",
                      "displayName": "Centered Segmented"
                    },
                    "centeredStepped": {
                      "description": "Data points will be connected with a centered stepped line.",
                      "displayName": "Centered Stepped"
                    },
                    "curved": {
                      "description": "Data points will be connected with a curved line.",
                      "displayName": "Curved"
                    },
                    "none": {
                      "description": "Data points will not be connected.",
                      "displayName": "None"
                    },
                    "segmented": {
                      "description": "Data points will be connected with a segmented line.",
                      "displayName": "Segmented"
                    },
                    "stepped": {
                      "description": "Data points will be connected with a stepped line.",
                      "displayName": "Stepped"
                    },
                    "straight": {
                      "description": "Data points will be connected with a straight line.",
                      "displayName": "Straight"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data markers belonging to the series will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data markers belonging to the series will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ],
                  "propertyEditorValues": {
                    "area": {
                      "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                      "displayName": "Area"
                    },
                    "auto": {
                      "description": "Series type will be inherited from chart type.",
                      "displayName": "Auto"
                    },
                    "bar": {
                      "description": "Series will be represented by a bar.",
                      "displayName": "Bar"
                    },
                    "boxPlot": {
                      "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                      "displayName": "Box Plot"
                    },
                    "candlestick": {
                      "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                      "displayName": "Candlestick"
                    },
                    "line": {
                      "description": "Series will be represented by a line.",
                      "displayName": "Line"
                    },
                    "lineWithArea": {
                      "description": "Series will be presented by a line and area.",
                      "displayName": "Line With Area"
                    }
                  }
                }
              }
            },
            "groupData": {
              "description": "an array of data for the group the drilled object belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the drilled object",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "Drilling behavior will be inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "Drilling will not be enabled on group label.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Drilling will be enabled on group label.",
                          "displayName": "On"
                        }
                      }
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                      "type": "string|number"
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            }
          }
        },
        "ojMultiSeriesDrill": {
          "description": "Triggered on the drill gesture on chart object representing multiple series (e.g. other slice and legend item in pie charts). (double click if selection is enabled, single click otherwise). Multi series drilling is enabled when multi-series-drilling is set to on.",
          "bubbles": true,
          "help": "#event:multiSeriesDrill",
          "detail": {
            "series": {
              "description": "an array of series id of all the series belonging to the drill event",
              "type": "Array<string>"
            },
            "seriesData": {
              "description": "an array of series data of all the series belonging to the drill event",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "areaColor": {
                      "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                      "type": "string",
                      "format": "color"
                    },
                    "areaSvgClassName": {
                      "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "areaSvgStyle": {
                      "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "assignedToY2": {
                      "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                      "type": "string",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "description": "The series is not associated with the y2 axis.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "The series is associated with the y2 axis.",
                          "displayName": "On"
                        }
                      }
                    },
                    "borderColor": {
                      "description": "The border color of the series.",
                      "type": "string",
                      "format": "color"
                    },
                    "borderWidth": {
                      "description": "The border width of the series.",
                      "type": "number",
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "boxPlot": {
                      "description": "An object containing the style properties of the box plot series.",
                      "type": "object",
                      "properties": {
                        "medianSvgClassName": {
                          "description": "The CSS style class to apply to the median line.",
                          "type": "string"
                        },
                        "medianSvgStyle": {
                          "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                          "type": "object"
                        },
                        "q2Color": {
                          "description": "The color of the Q2 segment of the box.",
                          "type": "string",
                          "format": "color"
                        },
                        "q2SvgClassName": {
                          "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "q2SvgStyle": {
                          "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "q3Color": {
                          "description": "The color of the Q3 segment of the box.",
                          "type": "string",
                          "format": "color"
                        },
                        "q3SvgClassName": {
                          "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "q3SvgStyle": {
                          "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "whiskerEndLength": {
                          "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                          "type": "string"
                        },
                        "whiskerEndSvgClassName": {
                          "description": "The CSS style class to apply to the whisker ends.",
                          "type": "string"
                        },
                        "whiskerEndSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                          "type": "object"
                        },
                        "whiskerSvgClassName": {
                          "description": "The CSS style class to apply to the whisker stems.",
                          "type": "string"
                        },
                        "whiskerSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                          "type": "object"
                        }
                      }
                    },
                    "categories": {
                      "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                      "type": "Array<string>"
                    },
                    "color": {
                      "description": "The color of the series. The chart legend item will inherit this color value.",
                      "type": "string",
                      "format": "color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "type": "string",
                      "value": "auto",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                          "displayName": "Auto"
                        },
                        "off": {
                          "description": "Series will not be shown in the legend.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Series will be shown in the legend.",
                          "displayName": "On"
                        }
                      }
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "The series drilling behavior is inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "The series will not be drillable.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "The series will be drillable.",
                          "displayName": "On"
                        }
                      }
                    },
                    "id": {
                      "description": "The id of the series. Defaults to the name or the series index if not specified.",
                      "type": "string|number"
                    },
                    "items": {
                      "description": "An array of values or an array of objects that defines the data items for the series.",
                      "type": "Array<Object>",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    },
                    "lineStyle": {
                      "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                      "type": "string",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "description": "Line will have dashed strokes.",
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "description": "Line will have dotted strokes.",
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "description": "Line will have a solid stroke.",
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "auto",
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "none",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "Default value depending on series type.",
                          "displayName": "Auto"
                        },
                        "centeredSegmented": {
                          "description": "Data points will be connected with a centered segmented line.",
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "description": "Data points will be connected with a centered stepped line.",
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "description": "Data points will be connected with a curved line.",
                          "displayName": "Curved"
                        },
                        "none": {
                          "description": "Data points will not be connected.",
                          "displayName": "None"
                        },
                        "segmented": {
                          "description": "Data points will be connected with a segmented line.",
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "description": "Data points will be connected with a stepped line.",
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "description": "Data points will be connected with a straight line.",
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                      "type": "number",
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "markerColor": {
                      "description": "The color of the data markers, if different from the series color.",
                      "type": "string",
                      "format": "color"
                    },
                    "markerDisplayed": {
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                          "displayName": "Auto"
                        },
                        "off": {
                          "description": "Data markers belonging to the series will not be displayed.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Data markers belonging to the series will be displayed.",
                          "displayName": "On"
                        }
                      }
                    },
                    "markerShape": {
                      "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                      "type": "string",
                      "propertyEditorValues": {
                        "auto": {
                          "description": "Data marker shape will be based on chart type.",
                          "displayName": "Auto"
                        },
                        "circle": {
                          "description": "Data markers will be circular in shape.",
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "description": "Data markers will be diamond in shape.",
                          "displayName": "Diamond"
                        },
                        "human": {
                          "description": "Data markers will be human in shape.",
                          "displayName": "Human"
                        },
                        "plus": {
                          "description": "Data markers will be plus in shape.",
                          "displayName": "Plus"
                        },
                        "square": {
                          "description": "Data markers will be square in shape.",
                          "displayName": "Square"
                        },
                        "star": {
                          "description": "Data markers will be star in shape.",
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "description": "Data markers will be of a triangular shape facing down.",
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "description": "Data markers will be of a triangular shape facing up.",
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "markerSize": {
                      "description": "The size of the data markers.",
                      "type": "number",
                      "minimum": 0,
                      "units": "pixels"
                    },
                    "markerSvgClassName": {
                      "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "markerSvgStyle": {
                      "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the series, displayed in the legend and tooltips.",
                      "type": "string"
                    },
                    "pattern": {
                      "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                      "type": "string",
                      "value": "auto",
                      "enumValues": [
                        "auto",
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "No pattern is applied to data item fill.",
                          "displayName": "Auto"
                        },
                        "largeChecker": {
                          "description": "Large checker pattern is applied to the data item.",
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "description": "Large cross hatch pattern is applied to the data item.",
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "description": "Large diagonal left pattern is applied to the data item.",
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "description": "Large diagonal right pattern is applied to the data item.",
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "description": "Large diamond pattern is applied to the data item.",
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "description": "Large triangle pattern is applied to the data item.",
                          "displayName": "Large Triangle"
                        },
                        "smallChecker": {
                          "description": "Small checker pattern is applied to the data item.",
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "description": "Small cross hatch pattern is applied to the data item.",
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "description": "Small diagonal left pattern is applied to the data item.",
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "description": "Small diagonal right pattern is applied to the data item.",
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "description": "Small diamond pattern is applied to the data item.",
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "description": "Small triangle pattern is applied to the data item.",
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "pieSliceExplode": {
                      "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                      "type": "number",
                      "value": 0,
                      "maximum": 1,
                      "minimum": 0
                    },
                    "shortDesc": {
                      "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                      "type": "string",
                      "translatable": true
                    },
                    "source": {
                      "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                      "type": "string"
                    },
                    "sourceHover": {
                      "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "sourceHoverSelected": {
                      "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "sourceSelected": {
                      "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "stackCategory": {
                      "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "type": {
                      "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                      "type": "string",
                      "value": "auto",
                      "enumValues": [
                        "area",
                        "auto",
                        "bar",
                        "boxPlot",
                        "candlestick",
                        "line",
                        "lineWithArea"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                          "displayName": "Area"
                        },
                        "auto": {
                          "description": "Series type will be inherited from chart type.",
                          "displayName": "Auto"
                        },
                        "bar": {
                          "description": "Series will be represented by a bar.",
                          "displayName": "Bar"
                        },
                        "boxPlot": {
                          "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                          "displayName": "Box Plot"
                        },
                        "candlestick": {
                          "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                          "displayName": "Candlestick"
                        },
                        "line": {
                          "description": "Series will be represented by a line.",
                          "displayName": "Line"
                        },
                        "lineWithArea": {
                          "description": "Series will be presented by a line and area.",
                          "displayName": "Line With Area"
                        }
                      }
                    }
                  }
                }
              }
            },
            "items": {
              "description": "an array containing objects describing the data items belonging to the drilled group",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "description": "The id for the data item.",
                      "type": "string|number"
                    },
                    "data": {
                      "description": "The data object of the drilled item.",
                      "type": "object|number",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    },
                    "itemData": {
                      "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used.",
                      "type": "object"
                    },
                    "series": {
                      "description": "The series id of the data item.",
                      "type": "string"
                    },
                    "group": {
                      "description": "The group id of the data item. For hierarchical group, it will be an array of outermost to innermost group related to the object.",
                      "type": "string|Array<string>"
                    }
                  }
                }
              }
            }
          }
        },
        "ojSelectInput": {
          "description": "Triggered during a selection gesture, such as a change in the marquee selection rectangle.",
          "bubbles": true,
          "help": "#event:selectInput",
          "detail": {
            "items": {
              "description": "an array containing the string ids of the selected data items",
              "type": "Array<string>"
            },
            "selectionData": {
              "description": "an array containing objects describing the selected data items",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "the data of the item, if one was specified",
                      "type": "object",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    },
                    "itemData": {
                      "description": "the row data of the item, if one was specified. This will only be set if a DataProvider is used.",
                      "type": "object"
                    },
                    "groupData": {
                      "description": "the group data of the item",
                      "type": "Array<Object>",
                      "properties": {
                        "drilling": {
                          "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled on group label.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled on group label.",
                              "displayName": "On"
                            }
                          }
                        },
                        "groups": {
                          "description": "An array of nested group objects.",
                          "type": "Array<Object>"
                        },
                        "id": {
                          "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                          "type": "string|number"
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "name": {
                          "description": "The name of the group.",
                          "type": "string"
                        },
                        "shortDesc": {
                          "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                          "type": "string",
                          "translatable": true
                        }
                      }
                    },
                    "seriesData": {
                      "description": "the series data of the item",
                      "type": "object",
                      "properties": {
                        "areaColor": {
                          "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                          "type": "string",
                          "format": "color"
                        },
                        "areaSvgClassName": {
                          "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "areaSvgStyle": {
                          "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "assignedToY2": {
                          "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                          "type": "string",
                          "value": "off",
                          "enumValues": [
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "off": {
                              "description": "The series is not associated with the y2 axis.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "The series is associated with the y2 axis.",
                              "displayName": "On"
                            }
                          }
                        },
                        "borderColor": {
                          "description": "The border color of the series.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the series.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot series.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                          "type": "Array<string>"
                        },
                        "color": {
                          "description": "The color of the series. The chart legend item will inherit this color value.",
                          "type": "string",
                          "format": "color"
                        },
                        "displayInLegend": {
                          "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Series will not be shown in the legend.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Series will be shown in the legend.",
                              "displayName": "On"
                            }
                          }
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "The series drilling behavior is inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "The series will not be drillable.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "The series will be drillable.",
                              "displayName": "On"
                            }
                          }
                        },
                        "id": {
                          "description": "The id of the series. Defaults to the name or the series index if not specified.",
                          "type": "string|number"
                        },
                        "items": {
                          "description": "An array of values or an array of objects that defines the data items for the series.",
                          "type": "Array<Object>",
                          "properties": {
                            "borderColor": {
                              "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                              "type": "string",
                              "format": "color"
                            },
                            "borderWidth": {
                              "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "boxPlot": {
                              "description": "An object containing the style properties of the box plot item.",
                              "type": "object",
                              "properties": {
                                "medianSvgClassName": {
                                  "description": "The CSS style class to apply to the median line.",
                                  "type": "string"
                                },
                                "medianSvgStyle": {
                                  "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                                  "type": "object"
                                },
                                "q2Color": {
                                  "description": "The color of the Q2 segment of the box.",
                                  "type": "string",
                                  "format": "color"
                                },
                                "q2SvgClassName": {
                                  "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "q2SvgStyle": {
                                  "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                                  "type": "object"
                                },
                                "q3Color": {
                                  "description": "The color of the Q3 segment of the box.",
                                  "type": "string",
                                  "format": "color"
                                },
                                "q3SvgClassName": {
                                  "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "q3SvgStyle": {
                                  "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                                  "type": "object"
                                },
                                "whiskerEndLength": {
                                  "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                                  "type": "string"
                                },
                                "whiskerEndSvgClassName": {
                                  "description": "The CSS style class to apply to the whisker ends.",
                                  "type": "string"
                                },
                                "whiskerEndSvgStyle": {
                                  "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                                  "type": "object"
                                },
                                "whiskerSvgClassName": {
                                  "description": "The CSS style class to apply to the whisker stems.",
                                  "type": "string"
                                },
                                "whiskerSvgStyle": {
                                  "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                                  "type": "object"
                                }
                              }
                            },
                            "categories": {
                              "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                              "type": "Array<string>"
                            },
                            "close": {
                              "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                              "type": "number"
                            },
                            "color": {
                              "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                              "type": "string",
                              "format": "color"
                            },
                            "drilling": {
                              "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                              "type": "string",
                              "value": "inherit",
                              "enumValues": [
                                "inherit",
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "inherit": {
                                  "description": "Drilling behavior will be inherited from the chart.",
                                  "displayName": "Inherit"
                                },
                                "off": {
                                  "description": "Drilling will not be enabled for the data item.",
                                  "displayName": "Off"
                                },
                                "on": {
                                  "description": "Drilling will be enabled for the data item.",
                                  "displayName": "On"
                                }
                              }
                            },
                            "high": {
                              "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                              "type": "number"
                            },
                            "id": {
                              "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                              "type": "any"
                            },
                            "items": {
                              "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                              "type": "Array<Object>|Array<number>"
                            },
                            "label": {
                              "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                              "type": "string|Array<string>",
                              "translatable": true
                            },
                            "labelPosition": {
                              "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                              "type": "string|Array<string>",
                              "enumValues": [
                                "aboveMarker",
                                "afterMarker",
                                "auto",
                                "beforeMarker",
                                "belowMarker",
                                "center",
                                "insideBarEdge",
                                "none",
                                "outsideBarEdge",
                                "outsideSlice"
                              ],
                              "propertyEditorValues": {
                                "aboveMarker": {
                                  "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                                  "displayName": "Above Marker"
                                },
                                "afterMarker": {
                                  "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                                  "displayName": "After Marker"
                                },
                                "auto": {
                                  "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                                  "displayName": "Auto"
                                },
                                "beforeMarker": {
                                  "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                                  "displayName": "Before Marker"
                                },
                                "belowMarker": {
                                  "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                                  "displayName": "Below Marker"
                                },
                                "center": {
                                  "description": "Label will be placed in the center of the data marker.",
                                  "displayName": "Center"
                                },
                                "insideBarEdge": {
                                  "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                                  "displayName": "Inside Bar Edge"
                                },
                                "none": {
                                  "description": "No data label is shown.",
                                  "displayName": "None"
                                },
                                "outsideBarEdge": {
                                  "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                                  "displayName": "Outside Bar Edge"
                                },
                                "outsideSlice": {
                                  "description": "Label will be placed outside the chart. Only applies to pie chart.",
                                  "displayName": "Outside Slice"
                                }
                              }
                            },
                            "labelStyle": {
                              "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                              "type": "object|Array<Object>"
                            },
                            "low": {
                              "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                              "type": "number"
                            },
                            "markerDisplayed": {
                              "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                                  "displayName": "Auto"
                                },
                                "off": {
                                  "description": "Data marker will be displayed.",
                                  "displayName": "Off"
                                },
                                "on": {
                                  "description": "Data marker will not be displayed.",
                                  "displayName": "On"
                                }
                              }
                            },
                            "markerShape": {
                              "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                              "type": "string",
                              "propertyEditorValues": {
                                "auto": {
                                  "description": "Data marker shape will be based on chart type.",
                                  "displayName": "Auto"
                                },
                                "circle": {
                                  "description": "Data markers will be circular in shape.",
                                  "displayName": "Circle"
                                },
                                "diamond": {
                                  "description": "Data markers will be diamond in shape.",
                                  "displayName": "Diamond"
                                },
                                "human": {
                                  "description": "Data markers will be human in shape.",
                                  "displayName": "Human"
                                },
                                "plus": {
                                  "description": "Data markers will be plus in shape.",
                                  "displayName": "Plus"
                                },
                                "square": {
                                  "description": "Data markers will be square in shape.",
                                  "displayName": "Square"
                                },
                                "star": {
                                  "description": "Data markers will be star in shape.",
                                  "displayName": "Star"
                                },
                                "triangleDown": {
                                  "description": "Data markers will be of a triangular shape facing down.",
                                  "displayName": "Triangle Down"
                                },
                                "triangleUp": {
                                  "description": "Data markers will be of a triangular shape facing up.",
                                  "displayName": "Triangle Up"
                                }
                              }
                            },
                            "markerSize": {
                              "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "open": {
                              "description": "The open value for stock candlestick.",
                              "type": "number"
                            },
                            "pattern": {
                              "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                              "type": "string",
                              "value": "auto",
                              "enumValues": [
                                "auto",
                                "largeChecker",
                                "largeCrosshatch",
                                "largeDiagonalLeft",
                                "largeDiagonalRight",
                                "largeDiamond",
                                "largeTriangle",
                                "smallChecker",
                                "smallCrosshatch",
                                "smallDiagonalLeft",
                                "smallDiagonalRight",
                                "smallDiamond",
                                "smallTriangle"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "description": "No pattern is applied to data item fill.",
                                  "displayName": "Auto"
                                },
                                "largeChecker": {
                                  "description": "Large checker pattern is applied to the data item.",
                                  "displayName": "Large Checker"
                                },
                                "largeCrosshatch": {
                                  "description": "Large cross hatch pattern is applied to the data item.",
                                  "displayName": "Large Crosshatch"
                                },
                                "largeDiagonalLeft": {
                                  "description": "Large diagonal left pattern is applied to the data item.",
                                  "displayName": "Large Diagonal Left"
                                },
                                "largeDiagonalRight": {
                                  "description": "Large diagonal right pattern is applied to the data item.",
                                  "displayName": "Large Diagonal Right"
                                },
                                "largeDiamond": {
                                  "description": "Large diamond pattern is applied to the data item.",
                                  "displayName": "Large Diamond"
                                },
                                "largeTriangle": {
                                  "description": "Large triangle pattern is applied to the data item.",
                                  "displayName": "Large Triangle"
                                },
                                "smallChecker": {
                                  "description": "Small checker pattern is applied to the data item.",
                                  "displayName": "Small Checker"
                                },
                                "smallCrosshatch": {
                                  "description": "Small cross hatch pattern is applied to the data item.",
                                  "displayName": "Small Crosshatch"
                                },
                                "smallDiagonalLeft": {
                                  "description": "Small diagonal left pattern is applied to the data item.",
                                  "displayName": "Small Diagonal Left"
                                },
                                "smallDiagonalRight": {
                                  "description": "Small diagonal right pattern is applied to the data item.",
                                  "displayName": "Small Diagonal Right"
                                },
                                "smallDiamond": {
                                  "description": "Small diamond pattern is applied to the data item.",
                                  "displayName": "Small Diamond"
                                },
                                "smallTriangle": {
                                  "description": "Small triangle pattern is applied to the data item.",
                                  "displayName": "Small Triangle"
                                }
                              }
                            },
                            "q1": {
                              "description": "The first quartile value for box plot.",
                              "type": "number"
                            },
                            "q2": {
                              "description": "The second quartile (median) value for box plot.",
                              "type": "number"
                            },
                            "q3": {
                              "description": "The third quartile value for box plot.",
                              "type": "number"
                            },
                            "shortDesc": {
                              "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                              "type": "string|function",
                              "translatable": true
                            },
                            "source": {
                              "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                              "type": "string"
                            },
                            "sourceHover": {
                              "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "sourceHoverSelected": {
                              "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "sourceSelected": {
                              "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "targetValue": {
                              "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                              "type": "number"
                            },
                            "value": {
                              "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                              "type": "number"
                            },
                            "volume": {
                              "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                              "type": "number"
                            },
                            "x": {
                              "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                              "type": "number|string"
                            },
                            "y": {
                              "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                              "type": "number"
                            },
                            "z": {
                              "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                              "type": "number"
                            }
                          }
                        },
                        "lineStyle": {
                          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                          "type": "string",
                          "enumValues": [
                            "dashed",
                            "dotted",
                            "solid"
                          ],
                          "propertyEditorValues": {
                            "dashed": {
                              "description": "Line will have dashed strokes.",
                              "displayName": "Dashed"
                            },
                            "dotted": {
                              "description": "Line will have dotted strokes.",
                              "displayName": "Dotted"
                            },
                            "solid": {
                              "description": "Line will have a solid stroke.",
                              "displayName": "Solid"
                            }
                          }
                        },
                        "lineType": {
                          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "centeredSegmented",
                            "centeredStepped",
                            "curved",
                            "none",
                            "segmented",
                            "stepped",
                            "straight"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Default value depending on series type.",
                              "displayName": "Auto"
                            },
                            "centeredSegmented": {
                              "description": "Data points will be connected with a centered segmented line.",
                              "displayName": "Centered Segmented"
                            },
                            "centeredStepped": {
                              "description": "Data points will be connected with a centered stepped line.",
                              "displayName": "Centered Stepped"
                            },
                            "curved": {
                              "description": "Data points will be connected with a curved line.",
                              "displayName": "Curved"
                            },
                            "none": {
                              "description": "Data points will not be connected.",
                              "displayName": "None"
                            },
                            "segmented": {
                              "description": "Data points will be connected with a segmented line.",
                              "displayName": "Segmented"
                            },
                            "stepped": {
                              "description": "Data points will be connected with a stepped line.",
                              "displayName": "Stepped"
                            },
                            "straight": {
                              "description": "Data points will be connected with a straight line.",
                              "displayName": "Straight"
                            }
                          }
                        },
                        "lineWidth": {
                          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "markerColor": {
                          "description": "The color of the data markers, if different from the series color.",
                          "type": "string",
                          "format": "color"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data markers belonging to the series will not be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data markers belonging to the series will be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "markerSvgClassName": {
                          "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "markerSvgStyle": {
                          "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "name": {
                          "description": "The name of the series, displayed in the legend and tooltips.",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "pieSliceExplode": {
                          "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                          "type": "number",
                          "value": 0,
                          "maximum": 1,
                          "minimum": 0
                        },
                        "shortDesc": {
                          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                          "type": "string",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "stackCategory": {
                          "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "area",
                            "auto",
                            "bar",
                            "boxPlot",
                            "candlestick",
                            "line",
                            "lineWithArea"
                          ],
                          "propertyEditorValues": {
                            "area": {
                              "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                              "displayName": "Area"
                            },
                            "auto": {
                              "description": "Series type will be inherited from chart type.",
                              "displayName": "Auto"
                            },
                            "bar": {
                              "description": "Series will be represented by a bar.",
                              "displayName": "Bar"
                            },
                            "boxPlot": {
                              "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                              "displayName": "Box Plot"
                            },
                            "candlestick": {
                              "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                              "displayName": "Candlestick"
                            },
                            "line": {
                              "description": "Series will be represented by a line.",
                              "displayName": "Line"
                            },
                            "lineWithArea": {
                              "description": "Series will be presented by a line and area.",
                              "displayName": "Line With Area"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "endGroup": {
              "description": "the end group of a marquee selection on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of a marquee selection on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of a marquee selection",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of a marquee selection",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of a marquee selection",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of a marquee selection",
              "type": "number"
            }
          }
        },
        "ojSeriesDrill": {
          "description": "Triggered on a chart series drill gesture (double click if selection is enabled, single click otherwise).",
          "bubbles": true,
          "help": "#event:seriesDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "string"
            },
            "series": {
              "description": "the series id of the drilled object",
              "type": "string"
            },
            "seriesData": {
              "description": "the data for the series of the drilled object",
              "type": "object",
              "properties": {
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "The series is not associated with the y2 axis.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series is associated with the y2 axis.",
                      "displayName": "On"
                    }
                  }
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series. The chart legend item will inherit this color value.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Series will not be shown in the legend.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Series will be shown in the legend.",
                      "displayName": "On"
                    }
                  }
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "The series drilling behavior is inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "The series will not be drillable.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series will be drillable.",
                      "displayName": "On"
                    }
                  }
                },
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value depending on series type.",
                      "displayName": "Auto"
                    },
                    "centeredSegmented": {
                      "description": "Data points will be connected with a centered segmented line.",
                      "displayName": "Centered Segmented"
                    },
                    "centeredStepped": {
                      "description": "Data points will be connected with a centered stepped line.",
                      "displayName": "Centered Stepped"
                    },
                    "curved": {
                      "description": "Data points will be connected with a curved line.",
                      "displayName": "Curved"
                    },
                    "none": {
                      "description": "Data points will not be connected.",
                      "displayName": "None"
                    },
                    "segmented": {
                      "description": "Data points will be connected with a segmented line.",
                      "displayName": "Segmented"
                    },
                    "stepped": {
                      "description": "Data points will be connected with a stepped line.",
                      "displayName": "Stepped"
                    },
                    "straight": {
                      "description": "Data points will be connected with a straight line.",
                      "displayName": "Straight"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data markers belonging to the series will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data markers belonging to the series will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ],
                  "propertyEditorValues": {
                    "area": {
                      "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                      "displayName": "Area"
                    },
                    "auto": {
                      "description": "Series type will be inherited from chart type.",
                      "displayName": "Auto"
                    },
                    "bar": {
                      "description": "Series will be represented by a bar.",
                      "displayName": "Bar"
                    },
                    "boxPlot": {
                      "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                      "displayName": "Box Plot"
                    },
                    "candlestick": {
                      "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                      "displayName": "Candlestick"
                    },
                    "line": {
                      "description": "Series will be represented by a line.",
                      "displayName": "Line"
                    },
                    "lineWithArea": {
                      "description": "Series will be presented by a line and area.",
                      "displayName": "Line With Area"
                    }
                  }
                }
              }
            },
            "items": {
              "description": "an array containing objects describing the data items belonging to the drilled group",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "description": "The id for the data item.",
                      "type": "string|number"
                    },
                    "data": {
                      "description": "The data object of the drilled item.",
                      "type": "object|number",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    },
                    "itemData": {
                      "description": "The row data object of the drilled item. This will only be set if a DataProvider is being used.",
                      "type": "object"
                    },
                    "series": {
                      "description": "The series id of the data item.",
                      "type": "string"
                    },
                    "group": {
                      "description": "The group id of the data item. For hierarchical group, it will be an array of outermost to innermost group related to the object.",
                      "type": "string|Array<string>"
                    }
                  }
                }
              }
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "bubbles": true,
          "help": "#event:viewportChange",
          "detail": {
            "endGroup": {
              "description": "the end group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of the new viewport",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of the new viewport",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of the new viewport",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of the new viewport",
              "type": "number"
            }
          }
        },
        "ojViewportChangeInput": {
          "description": "Triggered during a viewport change gesture, such as a drag operation on the overview window. See the Help documentation for more information.",
          "bubbles": true,
          "help": "#event:viewportChangeInput",
          "detail": {
            "endGroup": {
              "description": "the end group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of the new viewport",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of the new viewport",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of the new viewport",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of the new viewport",
              "type": "number"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "ChartItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The zero-based index of the current item",
              "type": "number"
            },
            "data": {
              "description": "The data object for the current item",
              "type": "object"
            },
            "key": {
              "description": "The key of the current item",
              "type": "any"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#seriesTemplate",
          "preferredContent": [
            "ChartSeriesElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The series index",
              "type": "number"
            },
            "id": {
              "description": "The series id",
              "type": "string"
            },
            "items": {
              "description": "The array of objects which are chart items that belong to this series. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the current item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#groupTemplate",
          "preferredContent": [
            "ChartGroupElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The group index",
              "type": "number"
            },
            "ids": {
              "description": "An array of group IDs, from the outermost group to the current group. For non-hierarchical group, the array will contain only one id.",
              "type": "Array<string>"
            },
            "depth": {
              "description": "The depth of the group. The depth of the outermost group under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the group is a leaf group.",
              "type": "boolean"
            },
            "items": {
              "description": "The array of objects which are chart items that belong to this group. The objects will have the following properties:",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the current item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "pieCenterTemplate": {
          "description": "The pieCenterTemplate slot is used to specify custom center content for a pie chart. This slot takes precedence over the pieCenter.renderer property if specified. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#pieCenterTemplate",
          "data": {
            "outerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle circumscribing the center area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate of the rectangle circumscribing the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate of the rectangle circumscribing the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle circumscribing the center area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle circumscribing the center area.",
                  "type": "number"
                }
              }
            },
            "innerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle inscribed in the center area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate of the rectangle inscribed in the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate of the rectangle inscribed in the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle inscribed in the center area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle inscribed in the center area.",
                  "type": "number"
                }
              }
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
              "type": "object"
            },
            "label": {
              "description": "The pieCenter label.",
              "type": "string"
            },
            "totalValue": {
              "description": "The total of all values in the pie chart.",
              "type": "number"
            },
            "componentElement": {
              "description": "The chart element.",
              "type": "Element"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "series": {
              "description": "The id of the series the hovered item belongs to.",
              "type": "string"
            },
            "group": {
              "description": "The ids or an array of ids of the group(s) the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids.",
              "type": "string|Array<string>"
            },
            "label": {
              "description": "The data label of the hovered item.",
              "type": "string"
            },
            "totalValue": {
              "description": "The total of all values in the chart. This will only be included for pie charts.",
              "type": "number"
            },
            "value": {
              "description": "The value of the hovered item.",
              "type": "number"
            },
            "x": {
              "description": "The x value of the hovered item.",
              "type": "number|string"
            },
            "y": {
              "description": "The y value of the hovered item.",
              "type": "number"
            },
            "z": {
              "description": "The z value of the hovered item.",
              "type": "number"
            },
            "q1": {
              "description": "The first quartile value of the hovered the box plot item.",
              "type": "number"
            },
            "q2": {
              "description": "The second quartile (median) value of the hovered box plot item.",
              "type": "number"
            },
            "q3": {
              "description": "The third quartile value of the hovered box plot item.",
              "type": "number"
            },
            "low": {
              "description": "The low value of the data item present in range bar/area, stock candlestick, or box plot item.",
              "type": "number"
            },
            "high": {
              "description": "The high value of the data item present in range bar/area, stock candlestick, or box plot item.",
              "type": "number"
            },
            "open": {
              "description": "The open value of the hovered stock chart item.",
              "type": "number"
            },
            "close": {
              "description": "The close value of the hovered stock chart item.",
              "type": "number"
            },
            "volume": {
              "description": "The volume value of the hovered stock chart item.",
              "type": "number"
            },
            "targetValue": {
              "description": "The target value of the hovered funnel item.",
              "type": "number"
            },
            "data": {
              "description": "The data object of the hovered item. For nested items, it will be an array containing the parent item data and nested item data.",
              "type": "object|null",
              "properties": {
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "color": {
                  "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                  "type": "string",
                  "format": "color"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "Drilling behavior will be inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "Drilling will not be enabled for the data item.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Drilling will be enabled for the data item.",
                      "displayName": "On"
                    }
                  }
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "string|Array<string>",
                  "enumValues": [
                    "aboveMarker",
                    "afterMarker",
                    "auto",
                    "beforeMarker",
                    "belowMarker",
                    "center",
                    "insideBarEdge",
                    "none",
                    "outsideBarEdge",
                    "outsideSlice"
                  ],
                  "propertyEditorValues": {
                    "aboveMarker": {
                      "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Above Marker"
                    },
                    "afterMarker": {
                      "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "After Marker"
                    },
                    "auto": {
                      "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                      "displayName": "Auto"
                    },
                    "beforeMarker": {
                      "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Before Marker"
                    },
                    "belowMarker": {
                      "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                      "displayName": "Below Marker"
                    },
                    "center": {
                      "description": "Label will be placed in the center of the data marker.",
                      "displayName": "Center"
                    },
                    "insideBarEdge": {
                      "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Inside Bar Edge"
                    },
                    "none": {
                      "description": "No data label is shown.",
                      "displayName": "None"
                    },
                    "outsideBarEdge": {
                      "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                      "displayName": "Outside Bar Edge"
                    },
                    "outsideSlice": {
                      "description": "Label will be placed outside the chart. Only applies to pie chart.",
                      "displayName": "Outside Slice"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                  "type": "object|Array<Object>"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data marker will be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data marker will not be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                }
              }
            },
            "itemData": {
              "description": "The row data object for the hovered item. This will only be set if a DataProvider is being used.",
              "type": "object|null"
            },
            "seriesData": {
              "description": "The data for the series the hovered item belongs to.",
              "type": "object|null",
              "properties": {
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "description": "The series is not associated with the y2 axis.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series is associated with the y2 axis.",
                      "displayName": "On"
                    }
                  }
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series. The chart legend item will inherit this color value.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Series will not be shown in the legend.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Series will be shown in the legend.",
                      "displayName": "On"
                    }
                  }
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "inherit": {
                      "description": "The series drilling behavior is inherited from the chart.",
                      "displayName": "Inherit"
                    },
                    "off": {
                      "description": "The series will not be drillable.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "The series will be drillable.",
                      "displayName": "On"
                    }
                  }
                },
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems. Only SVG CSS style properties are supported.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "color": {
                          "description": "The color of the data item. This color value is not inherited by chart legend. See chart series color and display-in-legend for more details.",
                          "type": "string",
                          "format": "color"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "inherit",
                          "enumValues": [
                            "inherit",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "inherit": {
                              "description": "Drilling behavior will be inherited from the chart.",
                              "displayName": "Inherit"
                            },
                            "off": {
                              "description": "Drilling will not be enabled for the data item.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Drilling will be enabled for the data item.",
                              "displayName": "On"
                            }
                          }
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "aboveMarker",
                            "afterMarker",
                            "auto",
                            "beforeMarker",
                            "belowMarker",
                            "center",
                            "insideBarEdge",
                            "none",
                            "outsideBarEdge",
                            "outsideSlice"
                          ],
                          "propertyEditorValues": {
                            "aboveMarker": {
                              "description": "Label will be placed above the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Above Marker"
                            },
                            "afterMarker": {
                              "description": "Label will be placed after the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "After Marker"
                            },
                            "auto": {
                              "description": "For un-stacked bar charts, 'auto' will act as 'insideBarEdge'. For other chart types, 'auto' will act as 'center'.",
                              "displayName": "Auto"
                            },
                            "beforeMarker": {
                              "description": "Label will be placed before the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Before Marker"
                            },
                            "belowMarker": {
                              "description": "Label will be placed below the data marker. Only applies to line, area, scatter, and bubble series.",
                              "displayName": "Below Marker"
                            },
                            "center": {
                              "description": "Label will be placed in the center of the data marker.",
                              "displayName": "Center"
                            },
                            "insideBarEdge": {
                              "description": "Label will be placed inside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Inside Bar Edge"
                            },
                            "none": {
                              "description": "No data label is shown.",
                              "displayName": "None"
                            },
                            "outsideBarEdge": {
                              "description": "Label will be placed outside the bar edge. Only applies to non polar bar series.",
                              "displayName": "Outside Bar Edge"
                            },
                            "outsideSlice": {
                              "description": "Label will be placed outside the chart. Only applies to pie chart.",
                              "displayName": "Outside Slice"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. See the Help documentation for more information.",
                          "type": "object|Array<Object>"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                              "displayName": "Auto"
                            },
                            "off": {
                              "description": "Data marker will be displayed.",
                              "displayName": "Off"
                            },
                            "on": {
                              "description": "Data marker will not be displayed.",
                              "displayName": "On"
                            }
                          }
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "string",
                          "propertyEditorValues": {
                            "auto": {
                              "description": "Data marker shape will be based on chart type.",
                              "displayName": "Auto"
                            },
                            "circle": {
                              "description": "Data markers will be circular in shape.",
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "description": "Data markers will be diamond in shape.",
                              "displayName": "Diamond"
                            },
                            "human": {
                              "description": "Data markers will be human in shape.",
                              "displayName": "Human"
                            },
                            "plus": {
                              "description": "Data markers will be plus in shape.",
                              "displayName": "Plus"
                            },
                            "square": {
                              "description": "Data markers will be square in shape.",
                              "displayName": "Square"
                            },
                            "star": {
                              "description": "Data markers will be star in shape.",
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "description": "Data markers will be of a triangular shape facing down.",
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "description": "Data markers will be of a triangular shape facing up.",
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Only applies to line, area, and scatter series. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "No pattern is applied to data item fill.",
                              "displayName": "Auto"
                            },
                            "largeChecker": {
                              "description": "Large checker pattern is applied to the data item.",
                              "displayName": "Large Checker"
                            },
                            "largeCrosshatch": {
                              "description": "Large cross hatch pattern is applied to the data item.",
                              "displayName": "Large Crosshatch"
                            },
                            "largeDiagonalLeft": {
                              "description": "Large diagonal left pattern is applied to the data item.",
                              "displayName": "Large Diagonal Left"
                            },
                            "largeDiagonalRight": {
                              "description": "Large diagonal right pattern is applied to the data item.",
                              "displayName": "Large Diagonal Right"
                            },
                            "largeDiamond": {
                              "description": "Large diamond pattern is applied to the data item.",
                              "displayName": "Large Diamond"
                            },
                            "largeTriangle": {
                              "description": "Large triangle pattern is applied to the data item.",
                              "displayName": "Large Triangle"
                            },
                            "smallChecker": {
                              "description": "Small checker pattern is applied to the data item.",
                              "displayName": "Small Checker"
                            },
                            "smallCrosshatch": {
                              "description": "Small cross hatch pattern is applied to the data item.",
                              "displayName": "Small Crosshatch"
                            },
                            "smallDiagonalLeft": {
                              "description": "Small diagonal left pattern is applied to the data item.",
                              "displayName": "Small Diagonal Left"
                            },
                            "smallDiagonalRight": {
                              "description": "Small diagonal right pattern is applied to the data item.",
                              "displayName": "Small Diagonal Right"
                            },
                            "smallDiamond": {
                              "description": "Small diamond pattern is applied to the data item.",
                              "displayName": "Small Diamond"
                            },
                            "smallTriangle": {
                              "description": "Small triangle pattern is applied to the data item.",
                              "displayName": "Small Triangle"
                            }
                          }
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string|function",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over marker-shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        }
                      }
                    }
                  }
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "description": "Line will have dashed strokes.",
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "description": "Line will have dotted strokes.",
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "description": "Line will have a solid stroke.",
                      "displayName": "Solid"
                    }
                  }
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Default value depending on series type.",
                      "displayName": "Auto"
                    },
                    "centeredSegmented": {
                      "description": "Data points will be connected with a centered segmented line.",
                      "displayName": "Centered Segmented"
                    },
                    "centeredStepped": {
                      "description": "Data points will be connected with a centered stepped line.",
                      "displayName": "Centered Stepped"
                    },
                    "curved": {
                      "description": "Data points will be connected with a curved line.",
                      "displayName": "Curved"
                    },
                    "none": {
                      "description": "Data points will not be connected.",
                      "displayName": "None"
                    },
                    "segmented": {
                      "description": "Data points will be connected with a segmented line.",
                      "displayName": "Segmented"
                    },
                    "stepped": {
                      "description": "Data points will be connected with a stepped line.",
                      "displayName": "Stepped"
                    },
                    "straight": {
                      "description": "Data points will be connected with a straight line.",
                      "displayName": "Straight"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data markers will be displayed whenever the data points are not connected by a line.",
                      "displayName": "Auto"
                    },
                    "off": {
                      "description": "Data markers belonging to the series will not be displayed.",
                      "displayName": "Off"
                    },
                    "on": {
                      "description": "Data markers belonging to the series will be displayed.",
                      "displayName": "On"
                    }
                  }
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Data marker shape will be based on chart type.",
                      "displayName": "Auto"
                    },
                    "circle": {
                      "description": "Data markers will be circular in shape.",
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "description": "Data markers will be diamond in shape.",
                      "displayName": "Diamond"
                    },
                    "human": {
                      "description": "Data markers will be human in shape.",
                      "displayName": "Human"
                    },
                    "plus": {
                      "description": "Data markers will be plus in shape.",
                      "displayName": "Plus"
                    },
                    "square": {
                      "description": "Data markers will be square in shape.",
                      "displayName": "Square"
                    },
                    "star": {
                      "description": "Data markers will be star in shape.",
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "description": "Data markers will be of a triangular shape facing down.",
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "description": "Data markers will be of a triangular shape facing up.",
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "No pattern is applied to data item fill.",
                      "displayName": "Auto"
                    },
                    "largeChecker": {
                      "description": "Large checker pattern is applied to the data item.",
                      "displayName": "Large Checker"
                    },
                    "largeCrosshatch": {
                      "description": "Large cross hatch pattern is applied to the data item.",
                      "displayName": "Large Crosshatch"
                    },
                    "largeDiagonalLeft": {
                      "description": "Large diagonal left pattern is applied to the data item.",
                      "displayName": "Large Diagonal Left"
                    },
                    "largeDiagonalRight": {
                      "description": "Large diagonal right pattern is applied to the data item.",
                      "displayName": "Large Diagonal Right"
                    },
                    "largeDiamond": {
                      "description": "Large diamond pattern is applied to the data item.",
                      "displayName": "Large Diamond"
                    },
                    "largeTriangle": {
                      "description": "Large triangle pattern is applied to the data item.",
                      "displayName": "Large Triangle"
                    },
                    "smallChecker": {
                      "description": "Small checker pattern is applied to the data item.",
                      "displayName": "Small Checker"
                    },
                    "smallCrosshatch": {
                      "description": "Small cross hatch pattern is applied to the data item.",
                      "displayName": "Small Crosshatch"
                    },
                    "smallDiagonalLeft": {
                      "description": "Small diagonal left pattern is applied to the data item.",
                      "displayName": "Small Diagonal Left"
                    },
                    "smallDiagonalRight": {
                      "description": "Small diagonal right pattern is applied to the data item.",
                      "displayName": "Small Diagonal Right"
                    },
                    "smallDiamond": {
                      "description": "Small diamond pattern is applied to the data item.",
                      "displayName": "Small Diamond"
                    },
                    "smallTriangle": {
                      "description": "Small triangle pattern is applied to the data item.",
                      "displayName": "Small Triangle"
                    }
                  }
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ],
                  "propertyEditorValues": {
                    "area": {
                      "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
                      "displayName": "Area"
                    },
                    "auto": {
                      "description": "Series type will be inherited from chart type.",
                      "displayName": "Auto"
                    },
                    "bar": {
                      "description": "Series will be represented by a bar.",
                      "displayName": "Bar"
                    },
                    "boxPlot": {
                      "description": "Series will be represented by box plot markers. This is only supported for stock charts.",
                      "displayName": "Box Plot"
                    },
                    "candlestick": {
                      "description": "Series will be represented by candlestick markers. This is only supported for stock charts.",
                      "displayName": "Candlestick"
                    },
                    "line": {
                      "description": "Series will be represented by a line.",
                      "displayName": "Line"
                    },
                    "lineWithArea": {
                      "description": "Series will be presented by a line and area.",
                      "displayName": "Line With Area"
                    }
                  }
                }
              }
            },
            "groupData": {
              "description": "An array of data for the group the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the hovered item.",
              "type": "Array<Object>|null",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "inherit": {
                          "description": "Drilling behavior will be inherited from the chart.",
                          "displayName": "Inherit"
                        },
                        "off": {
                          "description": "Drilling will not be enabled on group label.",
                          "displayName": "Off"
                        },
                        "on": {
                          "description": "Drilling will be enabled on group label.",
                          "displayName": "On"
                        }
                      }
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes. The specified date for non mixed frequency time axes must be an ISO string.",
                      "type": "string|number"
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            },
            "componentElement": {
              "description": "The chart element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-checkboxset": {
      "name": "oj-checkboxset",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Checkbox Set",
      "implements": [
        "CheckboxsetElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcheckboxset",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-checkboxset-input-end"
              ],
              "description": "Use this style class to order the checkbox at the end and the label text at the start, even if a theme has a different default order."
            },
            {
              "styleGroup": [
                "oj-checkboxset-input-start"
              ],
              "description": "Use this style class to order the checkbox at the start and label text at the end, even if a theme has a different default order."
            },
            {
              "styleGroup": [
                "oj-checkboxset-no-chrome"
              ],
              "description": "Use this style class if you don't want the chrome around the set."
            },
            {
              "styleGroup": [
                "oj-choice-direction-column"
              ],
              "description": "Use this style class to lay out the checkboxes in a column. This is the default."
            },
            {
              "styleGroup": [
                "oj-choice-direction-row"
              ],
              "description": "Use this style class to lay out the checkboxes in a row."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-checkbox-set",
          "uxSpecs": [
            "checkboxset"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-checkboxset-input-end",
          "kind": "class",
          "displayName": "Input End",
          "description": "Use this style class to order the checkbox at the end and the label text at the start, even if a theme has a different default order.",
          "help": "#oj-checkboxset-input-end"
        },
        {
          "name": "oj-checkboxset-input-start",
          "kind": "class",
          "displayName": "Input Start",
          "description": "Use this style class to order the checkbox at the start and label text at the end, even if a theme has a different default order.",
          "help": "#oj-checkboxset-input-start"
        },
        {
          "name": "oj-checkboxset-no-chrome",
          "kind": "class",
          "displayName": "No Chrome",
          "description": "Use this style class if you don't want the chrome around the set.",
          "help": "#oj-checkboxset-no-chrome"
        },
        {
          "name": "oj-choice-direction-column",
          "kind": "class",
          "displayName": "Column Layout",
          "description": "Use this style class to lay out the checkboxes in a column. This is the default.",
          "help": "#oj-choice-direction-column"
        },
        {
          "name": "oj-choice-direction-row",
          "kind": "class",
          "displayName": "Row Layout",
          "description": "Use this style class to lay out the checkboxes in a row.",
          "help": "#oj-choice-direction-row"
        }
      ],
      "description": "A checkbox set allows the user to select one or more options from a set.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojCheckboxset.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies if the component is disabled. If true, then all of its inputs and labels are also disabled. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documenation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the checkbox set.",
          "type": "object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "readonlyNoValue": {
              "description": "Used for the readonly checkbox set when no option is selected.",
              "type": "string",
              "help": "#translations.readonlyNoValue"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "An array that represents the value of the component. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Value",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the checkbox set. A refresh is required after a checkbox set is programmatically changed. See the Help documentation for more information.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-checkboxset element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-collapsible": {
      "name": "oj-collapsible",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Collapsible",
      "implements": [
        "CollapsibleElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcollapsible",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-clickthrough-disabled"
              ],
              "description": "Use on any element inside the header where you do not want Collapsible to process the click event."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-collapsible",
          "uxSpecs": [
            "collapsible-header"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-clickthrough-disabled",
          "kind": "class",
          "displayName": "Prevent Clickthrough",
          "description": "Use on any element inside the header where you do not want Collapsible to process the click event.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Specify data-oj-clickthrough attribute with value disabled instead."
            }
          ],
          "styleSelector": "oj-collapsible *",
          "help": "#oj-clickthrough-disabled"
        }
      ],
      "description": "A collapsible displays a header that can be expanded to show its content.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojCollapsible.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "expandArea",
            "expanded",
            "disabled"
          ]
        }
      ],
      "properties": {
        "disabled": {
          "description": "Disables the collapsible if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "expandArea": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "The expand-area attribute should no longer be used and will be removed in the future. A click anywhere in the header area will toggle the disclosure (current default setting)."
            }
          ],
          "description": "Where in the header to click to toggle disclosure.",
          "type": "string",
          "displayName": "Expand Area",
          "value": "header",
          "help": "#expandArea",
          "enumValues": [
            "disclosureIcon",
            "header"
          ],
          "propertyEditorValues": {
            "disclosureIcon": {
              "description": "click the disclosureIcon to toggle disclosure",
              "displayName": "Disclosure Icon"
            },
            "header": {
              "description": "click any where in the header to toggle disclosure",
              "displayName": "Header"
            }
          }
        },
        "expanded": {
          "description": "Specifies if the content is expanded.",
          "type": "boolean",
          "displayName": "Expanded",
          "eventGroup": "common",
          "value": false,
          "writeback": true,
          "help": "#expanded",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "13.0.0",
                  "description": "Use doCollapse/doExpand instead"
                }
              ]
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the collapsible.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "description": "Triggered immediately before the collapsible is collapsed.",
          "cancelable": true,
          "help": "#event:beforeCollapse",
          "detail": {
            "header": {
              "description": "The header that is about to be collapsed.",
              "type": "Element"
            },
            "content": {
              "description": "The content that is about to be collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered immediately before the collapsible is expanded.",
          "cancelable": true,
          "help": "#event:beforeExpand",
          "detail": {
            "header": {
              "description": "The header that is about to be expanded.",
              "type": "Element"
            },
            "content": {
              "description": "The content that is about to be expanded.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered immediately after the collapsible is collapsed.",
          "help": "#event:collapse",
          "detail": {
            "header": {
              "description": "The header that was just collapsed.",
              "type": "Element"
            },
            "content": {
              "description": "The content that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered immediately after the collapsible is expanded.",
          "help": "#event:expand",
          "detail": {
            "header": {
              "description": "The header that was just expanded.",
              "type": "Element"
            },
            "content": {
              "description": "The content that was just expanded.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the collapsible's content.",
          "displayName": "default",
          "help": "#Default"
        },
        "header": {
          "description": "The header slot is the collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.",
          "help": "#header"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-color-palette": {
      "name": "oj-color-palette",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Color Palette",
      "implements": [
        "ColorPaletteElement"
      ],
      "type": "core",
      "since": "3.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcolorpalette",
          "defaultColumns": "4",
          "minColumns": "4"
        },
        "oracle": {
          "icon": "oj-ux-ico-color-palette",
          "uxSpecs": [
            "color-palette"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Color palette swatch inner border color",
          "name": "oj-color-palette-swatch-inner-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Color palette swatch outer border color selected",
          "name": "oj-color-palette-swatch-outer-border-color-selected",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Color palette border radius",
          "name": "oj-color-palette-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Color palette swatch margin",
          "name": "oj-color-palette-swatch-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Color palette grid font size",
          "name": "oj-color-palette-grid-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A color palette displays a set of predefined colors from which a specific color can be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojColorPalette.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "layout",
            "swatchSize",
            "labelDisplay",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "palette",
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelDisplay": {
          "description": "Specifies whether a text label accompanies the color swatch.",
          "type": "string",
          "displayName": "Label Display",
          "value": "off",
          "help": "#labelDisplay",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "labels are displayed if the layout property is 'list' and swatch-size is 'sm' or if the layout is 'grid' and swatch-size is 'lg'",
              "displayName": "Auto"
            },
            "off": {
              "description": "labels are not displayed",
              "displayName": "Off"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "Used to establish a relationship between this element and another element.",
          "type": "string",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "layout": {
          "description": "Specifies the layout of the color swatches.",
          "type": "string",
          "displayName": "Layout",
          "value": "grid",
          "help": "#layout",
          "enumValues": [
            "grid",
            "list"
          ],
          "propertyEditorValues": {
            "grid": {
              "description": "Layout the color swatches in a grid",
              "displayName": "Grid"
            },
            "list": {
              "description": "Layout the color swatches in a list",
              "displayName": "List"
            }
          }
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "palette": {
          "description": "Specifies an array of objects defining the palette's color set.",
          "type": "Array<Object>",
          "displayName": "Palette",
          "value": null,
          "translatable": true,
          "help": "#palette",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "the color definition",
                  "type": "object",
                  "displayName": "Color"
                },
                "label": {
                  "description": "optional descriptive string (refer to attribute label-display). If omitted, label defaults to the color's hex string format.",
                  "type": "string",
                  "displayName": "Label"
                }
              }
            }
          }
        },
        "swatchSize": {
          "description": "Specifies the swatch size.",
          "type": "string",
          "displayName": "Swatch Size",
          "value": "lg",
          "help": "#swatchSize",
          "enumValues": [
            "xs",
            "sm",
            "lg"
          ],
          "propertyEditorValues": {
            "xs": {
              "description": "extra small swatch",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small swatch",
              "displayName": "Small"
            },
            "lg": {
              "description": "large swatch",
              "displayName": "Large"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "labelNone": {
              "description": "Label for swatch with no color.",
              "type": "string",
              "help": "#translations.labelNone"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The current value of the palette element.",
          "type": "object|string",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "format": "color",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ]
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ]
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-color-spectrum": {
      "name": "oj-color-spectrum",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Color Spectrum",
      "implements": [
        "ColorSpectrumElement"
      ],
      "type": "core",
      "since": "3.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcolorspectrum",
          "defaultColumns": "4",
          "minColumns": "4"
        },
        "oracle": {
          "icon": "oj-ux-ico-color-spectrum",
          "uxSpecs": [
            "color-spectrum"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Color spectrum border color",
          "name": "oj-color-spectrum-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A color spectrum allows a custom color value to be specified from a display containing a saturation/luminosity spectrum, plus hue and opacity sliders.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojColorSpectrum.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "Used to establish a relationship between this element and another element.",
          "type": "string",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "transientValue": {
          "description": "Retrieves the transient value of the component.",
          "type": "object",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "format": "color",
          "help": "#transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "labelHue": {
              "description": "Label for Hue slider tooltip.",
              "type": "string",
              "help": "#translations.labelHue"
            },
            "labelOpacity": {
              "description": "Label for Opacity slider tooltip.",
              "type": "string",
              "help": "#translations.labelOpacity"
            },
            "labelSatLum": {
              "description": "Label for spectrum thumb tooltip.",
              "type": "string",
              "help": "#translations.labelSatLum"
            },
            "labelThumbDesc": {
              "description": "Label for spectrum thumb description.",
              "type": "string",
              "help": "#translations.labelThumbDesc"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "Specifies the value of the element representing the current color.",
          "type": "object|string",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "format": "color",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ]
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ]
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-combobox-many": {
      "name": "oj-combobox-many",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Combobox (Many)",
      "implements": [
        "ComboboxManyElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-combo-many"
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "text-Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "A combobox many is a dropdown list that supports multiple selections, text input, and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojComboboxMany.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "options"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "maximumResultCount": {
          "description": "The maximum number of results displayed in the dropdown.",
          "type": "number",
          "displayName": "Maximum Result Count",
          "value": 15,
          "help": "#maximumResultCount"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "minLength": {
          "description": "The minimum number of characters a user must type before search filtering is performed.",
          "type": "number",
          "displayName": "Min Length",
          "value": 0,
          "minimum": 0,
          "help": "#minLength"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the Combobox.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "#optionsKeys.childKeys",
              "properties": {
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "displayName": "Child Keys",
                  "properties": {
                    "childKeys": {
                      "description": "The object for the child keys.",
                      "type": "object",
                      "displayName": "Child Keys"
                    },
                    "children": {
                      "description": "The key name for the children.",
                      "type": "string",
                      "displayName": "Children"
                    },
                    "label": {
                      "description": "The key name for the label.",
                      "type": "string",
                      "displayName": "Label"
                    },
                    "value": {
                      "description": "The key name for the value.",
                      "type": "string",
                      "displayName": "Value"
                    }
                  }
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string",
                  "displayName": "Children"
                },
                "label": {
                  "description": "The key name for the label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "#optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "The css style to append to the picker.",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "The currently displayed text retrieved from the input field.",
          "type": "Array<string>",
          "displayName": "Raw Value",
          "value": null,
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "#translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "#translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "No options found text for drop down.",
              "type": "string",
              "help": "#translations.noMatchesFound"
            },
            "noMoreResults": {
              "description": "Text for the drop down when all options are selected",
              "type": "string",
              "help": "#translations.noMoreResults"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "#translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        },
        "valueOptions": {
          "description": "The current values of the element and their associated display labels.",
          "type": "null|Array<Object>",
          "displayName": "Value Options",
          "value": null,
          "writeback": true,
          "help": "#valueOptions",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "description": "display label of value above. If missing, String(value) is used.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "the current value of JET Combobox",
                  "type": "any",
                  "displayName": "Value"
                }
              }
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the combobox.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-combobox-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement",
            "OptgroupElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-combobox-one": {
      "name": "oj-combobox-one",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Combobox (One)",
      "implements": [
        "ComboboxOneElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-combo"
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "A combobox one is a dropdown list that supports single selection, text input, and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojComboboxOne.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "options"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "filterOnOpen": {
          "description": "Whether to filter the drop down list on open.",
          "type": "string",
          "displayName": "Filter On Open",
          "value": "none",
          "help": "#filterOnOpen",
          "enumValues": [
            "none",
            "rawValue"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Show all available options without filtering on open.",
              "displayName": "None"
            },
            "rawValue": {
              "description": "Filter the drop down list on open with the rawValue (current display value).",
              "displayName": "Raw Value"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "maximumResultCount": {
          "description": "The maximum number of results displayed in the dropdown.",
          "type": "number",
          "displayName": "Maximum Result Count",
          "value": 15,
          "help": "#maximumResultCount"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "minLength": {
          "description": "The minimum number of characters a user must type before search filtering is performed.",
          "type": "number",
          "displayName": "Min Length",
          "value": 0,
          "minimum": 0,
          "help": "#minLength"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the Combobox.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "#optionsKeys.childKeys",
              "properties": {
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "displayName": "Child Keys",
                  "properties": {
                    "childKeys": {
                      "description": "The object for the child keys.",
                      "type": "object",
                      "displayName": "Child Keys"
                    },
                    "children": {
                      "description": "The key name for the children.",
                      "type": "string",
                      "displayName": "Children"
                    },
                    "label": {
                      "description": "The key name for the label.",
                      "type": "string",
                      "displayName": "Label"
                    },
                    "value": {
                      "description": "The key name for the value.",
                      "type": "string",
                      "displayName": "Value"
                    }
                  }
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string",
                  "displayName": "Children"
                },
                "label": {
                  "description": "The key name for the label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "#optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "The css style to append to the picker.",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "The currently displayed text retrieved from the input field.",
          "type": "string",
          "displayName": "Raw Value",
          "value": null,
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information. * @expose",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "#translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "#translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "No options found text for drop down.",
              "type": "string",
              "help": "#translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "#translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the element.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        },
        "valueOption": {
          "description": "The current value of the element and its associated display label.",
          "type": "null|object",
          "displayName": "Value Option",
          "value": null,
          "writeback": true,
          "help": "#valueOption",
          "properties": {
            "label": {
              "description": "display label of value above. If missing, String(value) is used.",
              "type": "string",
              "displayName": "Label"
            },
            "value": {
              "description": "current value of multiple selected JET Combobox values",
              "type": "any",
              "displayName": "Value"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the combobox.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojValueUpdated": {
          "description": "Event handler for when the value is submitted by the user.",
          "help": "#event:valueUpdated",
          "detail": {
            "value": {
              "description": "the current value",
              "type": "any"
            },
            "previousValue": {
              "description": "the previous value",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-combobox-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement",
            "OptgroupElement"
          ]
        },
        "end": {
          "description": "The end slot enables replacement of the combobox's drop down arrow and divider. See the Help documentation for more information.",
          "help": "#end"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-conveyor-belt": {
      "name": "oj-conveyor-belt",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Conveyor Belt",
      "implements": [
        "ConveyorBeltElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojconveyorbelt",
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-conveyor-belt",
          "uxSpecs": [
            "conveyor-belt"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Conveyor belt box-shadow width",
          "name": "oj-conveyor-belt-box-shadow-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A conveyor belt manages overflow for its child elements and allows scrolling among them.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojConveyorBelt.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation"
          ]
        }
      ],
      "properties": {
        "arrowVisibility": {
          "description": "Specifies visibility of overflow arrow buttons.",
          "type": "string",
          "displayName": "Arrow Visibility",
          "writeback": true,
          "help": "#arrowVisibility",
          "enumValues": [
            "auto",
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "show overflow arrows on desktop, hide on mobile.",
              "displayName": "Auto"
            },
            "hidden": {
              "description": "never show overflow arrows.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "always show overflow arrows.",
              "displayName": "Visible"
            }
          }
        },
        "contentParent": {
          "description": "Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.",
          "type": "string",
          "displayName": "Content Parent",
          "value": null,
          "writeback": true,
          "help": "#contentParent"
        },
        "orientation": {
          "description": "Specifies the orientation of the conveyorBelt.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "writeback": true,
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the conveyorBelt horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the conveyorBelt vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "scrollPosition": {
          "description": "Gets or sets the number of pixels that an element's content is scrolled from its initial position.",
          "type": "number",
          "displayName": "Scroll Position",
          "value": 0,
          "writeback": true,
          "help": "#scrollPosition"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "tipArrowNext": {
              "description": "Tooltip for the next overflow content arrow.",
              "type": "string",
              "help": "#translations.tipArrowNext"
            },
            "tipArrowPrevious": {
              "description": "Tooltip for the previous overflow content arrow.",
              "type": "string",
              "help": "#translations.tipArrowPrevious"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the conveyorBelt.",
          "help": "#refresh",
          "return": "void"
        },
        "scrollElementIntoView": {
          "description": "Scrolls child item of conveyor belt into the view.",
          "help": "#scrollElementIntoView",
          "params": [
            {
              "name": "elem",
              "description": "DOM element to scroll",
              "type": "Element"
            }
          ],
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-conveyor-belt element manages overflow for its child elements and allows scrolling among them. See the Help documentation for more information.",
          "displayName": "default",
          "help": "#Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-data-grid": {
      "name": "oj-data-grid",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Data Grid",
      "implements": [
        "DataGridElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatagrid",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-datagrid-cell-no-padding",
                "oj-datagrid-cell-padding"
              ],
              "description": "Used to style a datagrid cell so that it has no padding or default padding."
            },
            {
              "styleGroup": [
                "oj-sm-align-items",
                "oj-sm-align-items-flex-start",
                "oj-sm-align-items-flex-end",
                "oj-sm-align-items-center",
                "oj-sm-align-items-baseline",
                "oj-md-align-items",
                "oj-md-align-items-flex-start",
                "oj-md-align-items-flex-end",
                "oj-md-align-items-center",
                "oj-md-align-items-baseline",
                "oj-lg-align-items",
                "oj-lg-align-items-flex-start",
                "oj-lg-align-items-flex-end",
                "oj-lg-align-items-center",
                "oj-lg-align-items-baseline",
                "oj-xl-align-items",
                "oj-xl-align-items-flex-start",
                "oj-xl-align-items-flex-end",
                "oj-xl-align-items-center",
                "oj-xl-align-items-baseline"
              ],
              "description": "Use this class on cells' and headers' className property to align your content vertically."
            },
            {
              "styleGroup": [
                "oj-sm-justify-content",
                "oj-sm-justify-content-flex-start",
                "oj-sm-justify-content-flex-end",
                "oj-sm-justify-content-center",
                "oj-sm-justify-content-space-between",
                "oj-sm-justify-content-space-around",
                "oj-md-justify-content",
                "oj-md-justify-content-flex-start",
                "oj-md-justify-content-flex-end",
                "oj-md-justify-content-center",
                "oj-md-justify-content-space-between",
                "oj-md-justify-content-space-around",
                "oj-lg-justify-content",
                "oj-lg-justify-content-flex-start",
                "oj-lg-justify-content-flex-end",
                "oj-lg-justify-content-center",
                "oj-lg-justify-content-space-between",
                "oj-lg-justify-content-space-around",
                "oj-xl-justify-content",
                "oj-xl-justify-content-flex-start",
                "oj-xl-justify-content-flex-end",
                "oj-xl-justify-content-center",
                "oj-xl-justify-content-space-between",
                "oj-xl-justify-content-space-around"
              ],
              "description": "Use this class on cells' and headers' className property to align your content horizontally."
            },
            {
              "styleGroup": [
                "oj-datagrid-depth-1",
                "oj-datagrid-depth-2",
                "oj-datagrid-depth-3",
                "oj-datagrid-depth-4",
                "oj-datagrid-depth-5",
                "oj-datagrid-depth-6",
                "oj-datagrid-depth-7"
              ],
              "description": "Used to style the default header widths and heights. By default the datagrid supports up to depth 7."
            },
            {
              "styleGroup": [
                "oj-helper-justify-content-left",
                "oj-helper-justify-content-right"
              ],
              "description": "Direction can be left or right. Use this class on cells' and headers' className property to align your content horizontally to the left or right."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-tables-basic",
          "uxSpecs": [
            "data-grid"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "padding",
          "kind": "set",
          "displayName": "padding",
          "description": "Used to style a datagrid cell so that it has no padding or default padding.",
          "help": "#padding",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-datagrid-cell-no-padding",
              "kind": "class",
              "displayName": "oj-datagrid-cell-no-padding",
              "description": "No Padding"
            },
            {
              "name": "oj-datagrid-cell-padding",
              "kind": "class",
              "displayName": "oj-datagrid-cell-padding",
              "description": "Default Padding"
            }
          ]
        },
        {
          "name": "oj-[size]-align-items(-flexalign)",
          "kind": "template",
          "displayName": "align-items",
          "description": "Use this class on cells' and headers' className property to align your content vertically.",
          "help": "#oj-[size]-align-items(-flexalign)",
          "tokens": [
            {
              "name": "[size]",
              "description": "Screen Size",
              "styleRelation": "inclusive",
              "values": [
                {
                  "name": "sm",
                  "displayName": "Small",
                  "description": "Small screen size range"
                },
                {
                  "name": "md",
                  "displayName": "Medium",
                  "description": "Medium screen size range"
                },
                {
                  "name": "lg",
                  "displayName": "Large",
                  "description": "Large screen size range"
                },
                {
                  "name": "xl",
                  "displayName": "X-Large",
                  "description": "Extra large screen size and up"
                }
              ]
            },
            {
              "name": "(-flexalign)",
              "description": "Values for align-items property.",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "-flex-start",
                  "displayName": "Flex Start",
                  "description": "Flex items are packed toward the start of the line."
                },
                {
                  "name": "-flex-end",
                  "displayName": "Flex End",
                  "description": "Flex items are packed toward the end of the line."
                },
                {
                  "name": "-center",
                  "displayName": "Center",
                  "description": "Flex items are packed toward the center of the line."
                },
                {
                  "name": "-baseline",
                  "displayName": "Baseline",
                  "description": "All participating flex items on the line are aligned such that their baselines align"
                }
              ]
            }
          ]
        },
        {
          "name": "oj-[size]-justify-content(-flexjustify)",
          "kind": "template",
          "displayName": "justify-content",
          "description": "Use this class on cells' and headers' className property to align your content horizontally.",
          "help": "#oj-[size]-justify-content(-flexjustify)",
          "tokens": [
            {
              "name": "[size]",
              "description": "Screen Size",
              "styleRelation": "inclusive",
              "values": [
                {
                  "name": "sm",
                  "displayName": "Small",
                  "description": "Small screen size range"
                },
                {
                  "name": "md",
                  "displayName": "Medium",
                  "description": "Medium screen size range"
                },
                {
                  "name": "lg",
                  "displayName": "Large",
                  "description": "Large screen size range"
                },
                {
                  "name": "xl",
                  "displayName": "X-Large",
                  "description": "Extra large screen size and up"
                }
              ]
            },
            {
              "name": "(-flexjustify)",
              "description": "Values for justify-content property.",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "-flex-start",
                  "displayName": "Flex Start",
                  "description": "Items are at the start."
                },
                {
                  "name": "-flex-end",
                  "displayName": "Flex End",
                  "description": "Items are at the end."
                },
                {
                  "name": "-center",
                  "displayName": "Center",
                  "description": "Items are centered."
                },
                {
                  "name": "-space-between",
                  "displayName": "Space Between",
                  "description": "Space is distributed between items."
                },
                {
                  "name": "-space-around",
                  "displayName": "Space Around",
                  "description": "Space is distributed around items."
                }
              ]
            }
          ]
        },
        {
          "name": "oj-datagrid-depth-[1-7]",
          "kind": "template",
          "displayName": "depth",
          "description": "Used to style the default header widths and heights. By default the datagrid supports up to depth 7.",
          "help": "#oj-datagrid-depth-[1-7]",
          "tokens": [
            {
              "name": "[1-7]",
              "description": "Depth",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "1",
                  "displayName": "1",
                  "description": "Datagrid Depth level 1"
                },
                {
                  "name": "2",
                  "displayName": "2",
                  "description": "Datagrid Depth level 2"
                },
                {
                  "name": "3",
                  "displayName": "3",
                  "description": "Datagrid Depth level 3"
                },
                {
                  "name": "4",
                  "displayName": "4",
                  "description": "Datagrid Depth level 4"
                },
                {
                  "name": "5",
                  "displayName": "5",
                  "description": "Datagrid Depth level 5"
                },
                {
                  "name": "6",
                  "displayName": "6",
                  "description": "Datagrid Depth level 6"
                },
                {
                  "name": "7",
                  "displayName": "7",
                  "description": "Datagrid Depth level 7"
                }
              ]
            }
          ]
        },
        {
          "name": "oj-helper-justify-content-[left|right]",
          "kind": "template",
          "displayName": "direction",
          "description": "Direction can be left or right. Use this class on cells' and headers' className property to align your content horizontally to the left or right.",
          "help": "#oj-helper-justify-content-[left|right]",
          "tokens": [
            {
              "name": "[left|right]",
              "description": "Justify content to left or right",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "left",
                  "displayName": "Left",
                  "description": "Justify content to left"
                },
                {
                  "name": "right",
                  "displayName": "Right",
                  "description": "Justify content to right"
                }
              ]
            }
          ]
        }
      ],
      "styleVariables": [
        {
          "description": "Data grid column width",
          "name": "oj-data-grid-column-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A data grid displays data in a cell oriented grid.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDataGrid.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "editMode",
            "gridlines.horizontal",
            "gridlines.vertical"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "bandingInterval": {
          "description": "Specifies the data body row and column banding intervals.",
          "type": "object",
          "displayName": "Banding Interval",
          "help": "#bandingInterval",
          "properties": {
            "column": {
              "description": "Specifies the data body column banding intervals.",
              "type": "number",
              "displayName": "Column",
              "value": 0,
              "minimum": 0,
              "help": "#bandingInterval.column"
            },
            "row": {
              "description": "Specifies the data body row banding intervals.",
              "type": "number",
              "displayName": "Row",
              "value": 0,
              "minimum": 0,
              "help": "#bandingInterval.row"
            }
          }
        },
        "cell": {
          "description": "Specifies attributes on the cells.",
          "type": "object",
          "displayName": "Cell",
          "help": "#cell",
          "properties": {
            "className": {
              "description": "Specifies CSS class names to apply to cells. See the Help documentation for more information.",
              "type": "function|string|null",
              "displayName": "Class Name",
              "value": null,
              "help": "#cell.className"
            },
            "renderer": {
              "description": "A function that returns cell content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "#cell.renderer"
            },
            "style": {
              "description": "Specifies inline style to add to the cells. See the Help documentation for more information.",
              "type": "function|string|null",
              "displayName": "Style",
              "value": null,
              "help": "#cell.style"
            }
          }
        },
        "currentCell": {
          "description": "Specifies the grid's currently focused cell.",
          "type": "object",
          "displayName": "Current Cell",
          "value": null,
          "writeback": true,
          "help": "#currentCell"
        },
        "data": {
          "description": "Specifies the data for the grid. See the Help documentation for more information.",
          "type": "DataGridProvider|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dataTransferOptions": {
          "description": "Specifies data transfer features.",
          "type": "object",
          "displayName": "Data Transfer Options",
          "help": "#dataTransferOptions",
          "properties": {
            "copy": {
              "description": "Allows copy on selected range.",
              "type": "string",
              "displayName": "Copy",
              "value": "disable",
              "help": "#dataTransferOptions.copy",
              "enumValues": [
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "disable": {
                  "description": "the default DataGrid option which is disabled.",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "allows to copy selected range of cells.",
                  "displayName": "Enable"
                }
              }
            },
            "cut": {
              "description": "Allows cut on selected range.",
              "type": "string",
              "displayName": "Cut",
              "value": "disable",
              "help": "#dataTransferOptions.cut",
              "enumValues": [
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "disable": {
                  "description": "the default DataGrid option which is disabled.",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "allows to cut selected range of cells.",
                  "displayName": "Enable"
                }
              }
            },
            "fill": {
              "description": "Allows auto fill data to selected range.",
              "type": "string",
              "displayName": "Fill",
              "value": "disable",
              "help": "#dataTransferOptions.fill",
              "enumValues": [
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "disable": {
                  "description": "the default DataGrid option which is disabled.",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "allows for selecting a range of cells and flood filling another selected range.",
                  "displayName": "Enable"
                }
              }
            },
            "paste": {
              "description": "Allows paste on selected range.",
              "type": "string",
              "displayName": "Paste",
              "value": "disable",
              "help": "#dataTransferOptions.paste",
              "enumValues": [
                "disable",
                "enable"
              ],
              "propertyEditorValues": {
                "disable": {
                  "description": "the default DataGrid option which is disabled.",
                  "displayName": "Disable"
                },
                "enable": {
                  "description": "allows to paste selected range of cells.",
                  "displayName": "Enable"
                }
              }
            }
          }
        },
        "dnd": {
          "description": "Specifies drag and drop features.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "An object that describes drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "value": null,
              "help": "#dnd.drag",
              "properties": {
                "columns": {
                  "description": "An object that describes drag functionality for a selected set of columns. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Columns",
                  "help": "#dnd.drag.columns",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start"
                    }
                  }
                },
                "rows": {
                  "description": "An object that describes drag functionality for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "#dnd.drag.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "value": null,
              "help": "#dnd.drop",
              "properties": {
                "columns": {
                  "description": "An object that describes drop functionality for a selected set of columns. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Columns",
                  "help": "#dnd.drop.columns",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop"
                    }
                  }
                },
                "rows": {
                  "description": "An object that describes drop functionality for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "#dnd.drop.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop"
                    }
                  }
                }
              }
            },
            "reorder": {
              "description": "Specifies drag and drop reordering features.",
              "type": "object",
              "displayName": "Reorder",
              "help": "#dnd.reorder",
              "properties": {
                "row": {
                  "description": "Specifies whether drag and drop row reordering is enabled.",
                  "type": "string",
                  "displayName": "Row",
                  "value": "disable",
                  "help": "#dnd.reorder.row",
                  "enumValues": [
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "disable": {
                      "description": "disable row reordering",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable row reordering",
                      "displayName": "Enable"
                    }
                  }
                }
              }
            }
          }
        },
        "editMode": {
          "description": "Specifies if the grid is read-only or editable.",
          "type": "string",
          "displayName": "Edit Mode",
          "value": "none",
          "writeback": true,
          "help": "#editMode",
          "enumValues": [
            "cellEdit",
            "cellNavigation",
            "none"
          ],
          "propertyEditorValues": {
            "cellEdit": {
              "description": "the DataGrid cells are individually tabbable and editable",
              "displayName": "Cell Edit"
            },
            "cellNavigation": {
              "description": "the DataGrid is a single tab stop and editable at the cell level, but currently read-only",
              "displayName": "Cell Navigation"
            },
            "none": {
              "description": "the DataGrid is read-only",
              "displayName": "None"
            }
          }
        },
        "gridlines": {
          "description": "Specifies the visibility of the grid body vertical and horizontal gridlines.",
          "type": "object",
          "displayName": "Gridlines",
          "help": "#gridlines",
          "properties": {
            "horizontal": {
              "description": "Specifies the visibility of the horizontal gridlines.",
              "type": "string",
              "displayName": "Horizontal",
              "value": "visible",
              "help": "#gridlines.horizontal",
              "enumValues": [
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "hide horizontal gridlines",
                  "displayName": "Hidden"
                },
                "visible": {
                  "description": "show horizontal gridlines",
                  "displayName": "Visible"
                }
              }
            },
            "vertical": {
              "description": "Specifies the visibility of the vertical gridlines.",
              "type": "string",
              "displayName": "Vertical",
              "value": "visible",
              "help": "#gridlines.vertical",
              "enumValues": [
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "hide vertical gridlines",
                  "displayName": "Hidden"
                },
                "visible": {
                  "description": "show vertical gridlines",
                  "displayName": "Visible"
                }
              }
            }
          }
        },
        "header": {
          "description": "Specifies attributes on the headers.",
          "type": "object",
          "displayName": "Header",
          "help": "#header",
          "properties": {
            "column": {
              "description": "Specifies attributes on the column headers.",
              "type": "object",
              "displayName": "Column",
              "help": "#header.column",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to column headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "#header.column.className"
                },
                "label": {
                  "description": "Specifies attributes on the column header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "#header.column.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to column header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "#header.column.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns column header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "#header.column.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to column header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "#header.column.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns column header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "#header.column.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the column headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "#header.column.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the column headers.",
                      "type": "string",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "#header.column.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on column headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on column headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the column headers.",
                      "type": "string|function",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "#header.column.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on column headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on column headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "sortable": {
                  "description": "Specifies whether sorting is enabled on the column headers. See the Help documentation for more information.",
                  "type": "function|string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "help": "#header.column.sortable",
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "12.0.0",
                      "description": "This value will be removed in the future. Use auto and ensure DataGridProvider support for sort.",
                      "target": "propertyValue",
                      "value": [
                        "enable"
                      ]
                    }
                  ],
                  "enumValues": [
                    "auto",
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "get the sortable property from the data grid provider header item metadata",
                      "displayName": "Auto"
                    },
                    "disable": {
                      "description": "disable sorting on column headers",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable sorting on column headers",
                      "displayName": "Enable"
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the column headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "#header.column.style"
                }
              }
            },
            "columnEnd": {
              "description": "Specifies attributes on the column end headers.",
              "type": "object",
              "displayName": "Column End",
              "help": "#header.columnEnd",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to column end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "#header.columnEnd.className"
                },
                "label": {
                  "description": "Specifies attributes on the column end header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "#header.columnEnd.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to column end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "#header.columnEnd.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns column end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "#header.columnEnd.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to column end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "#header.columnEnd.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns column end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "#header.columnEnd.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the column end headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "#header.columnEnd.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the column end headers.",
                      "type": "string",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "#header.columnEnd.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on columnEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on columnEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the column end headers.",
                      "type": "string|function",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "#header.columnEnd.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on columnEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on columnEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the column end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "#header.columnEnd.style"
                }
              }
            },
            "row": {
              "description": "Specifies attributes on the row headers.",
              "type": "object",
              "displayName": "Row",
              "help": "#header.row",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to row headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "#header.row.className"
                },
                "label": {
                  "description": "Specifies attributes on the row header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "#header.row.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to row header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "#header.row.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns row header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "#header.row.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to row header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "#header.row.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns row header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "#header.row.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options on the row headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "#header.row.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the row headers.",
                      "type": "string|function",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "#header.row.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on row headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on row headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the row headers.",
                      "type": "string",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "#header.row.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on row headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on row headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "sortable": {
                  "description": "Specifies whether sorting is enabled on the row headers. See the Help documentation for more information.",
                  "type": "function|string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "help": "#header.row.sortable",
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "12.0.0",
                      "description": "This value will be removed in the future. Use auto and ensure DataGridProvider support for sort.",
                      "target": "propertyValue",
                      "value": [
                        "enable"
                      ]
                    }
                  ],
                  "enumValues": [
                    "auto",
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "get the sortable property from the data grid provider header item metadata",
                      "displayName": "Auto"
                    },
                    "disable": {
                      "description": "disable sorting on row headers",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable sorting on row header",
                      "displayName": "Enable"
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the row headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "#header.row.style"
                }
              }
            },
            "rowEnd": {
              "description": "Specifies attributes on the row end headers.",
              "type": "object",
              "displayName": "Row End",
              "help": "#header.rowEnd",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to row end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "#header.rowEnd.className"
                },
                "label": {
                  "description": "Specifies attributes on the row end header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "#header.rowEnd.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to row end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "#header.rowEnd.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns row end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "#header.rowEnd.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to row end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "#header.rowEnd.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns row end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "#header.rowEnd.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the row end headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "#header.rowEnd.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the row end headers.",
                      "type": "string|function",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "#header.rowEnd.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on rowEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on rowEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the row end headers.",
                      "type": "string",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "#header.rowEnd.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on rowEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on rowEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the row end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "#header.rowEnd.style"
                }
              }
            }
          }
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls through the data grid.",
          "type": "string|null",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "#scrollPolicy",
          "enumValues": [
            "auto",
            "loadMoreOnScroll",
            "scroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "the DataGrid will decide the scroll policy",
              "displayName": "Auto"
            },
            "loadMoreOnScroll": {
              "description": "additional data are fetched when the user scrolls to the bottom of the DataGrid and all previous data are kept in the DOM.",
              "displayName": "Load More On Scroll"
            },
            "scroll": {
              "description": "virtual scrolling is used meaning only rows/columns visible in the viewport are fetched and kept in the DOM",
              "displayName": "Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "type": "object|null",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "maxColumnCount": {
              "description": "The maximum number of columns to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Column Count",
              "value": 500,
              "minimum": -1,
              "help": "#scrollPolicyOptions.maxColumnCount"
            },
            "maxRowCount": {
              "description": "The maximum number of rows to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Row Count",
              "value": 500,
              "minimum": -1,
              "help": "#scrollPolicyOptions.maxRowCount"
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the current scroll position of the data grid. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "#scrollPosition",
          "properties": {
            "columnIndex": {
              "description": "The zero-based column index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number",
              "displayName": "Column Index"
            },
            "columnKey": {
              "description": "The column key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
              "type": "any",
              "displayName": "Column Key"
            },
            "offsetX": {
              "description": "The horizontal offset in pixel relative to the cell identified by key/index.",
              "type": "number",
              "displayName": "Offset X"
            },
            "offsetY": {
              "description": "The vertical offset in pixel relative to the cell identified by key/index.",
              "type": "number",
              "displayName": "Offset Y"
            },
            "rowIndex": {
              "description": "The zero-based row index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number",
              "displayName": "Row Index"
            },
            "rowKey": {
              "description": "The row key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
              "type": "any",
              "displayName": "Row Key"
            },
            "x": {
              "description": "The horizontal position in pixels.",
              "type": "number",
              "displayName": "X"
            },
            "y": {
              "description": "The vertical position in pixels.",
              "type": "number",
              "displayName": "Y"
            }
          }
        },
        "scrollToKey": {
          "description": "Specifies the behavior when DataGrid needs to scroll to a position based on a row/column key.",
          "type": "string|null",
          "displayName": "Scroll To Key",
          "value": "auto",
          "help": "#scrollToKey",
          "enumValues": [
            "always",
            "auto",
            "capability",
            "never"
          ],
          "propertyEditorValues": {
            "always": {
              "description": "DataGrid will scroll to a position based on row/column key as long as the row/column keys are valid.",
              "displayName": "Always"
            },
            "auto": {
              "description": "The behavior is determined by the component. By default the behavior is the same as \"capability\" except when the deprecated DataGridDataSource is used, in which case the behavior is the same as \"always\".",
              "displayName": "Auto"
            },
            "capability": {
              "description": "DataGrid will only scroll to a position based on row/column key if either the cell has already been fetched or if the associated DataProvider supports 'immediate' for 'iterationSpeed' capability.",
              "displayName": "Capability"
            },
            "never": {
              "description": "DataGrid will not change the scroll position if the request is based on a row/column key.",
              "displayName": "Never"
            }
          }
        },
        "selection": {
          "description": "Specifies the grid's current selection.",
          "type": "Array<Object>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the row and cell selection modes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "properties": {
            "cell": {
              "description": "Specifies the cell selection mode. By default, cell selection is disabled.",
              "type": "string",
              "displayName": "Cell",
              "value": "none",
              "help": "#selectionMode.cell",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Multiple cells can be selected at the same time.",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "Selection is disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "Only a single cell can be selected at a time.",
                  "displayName": "Single"
                }
              }
            },
            "row": {
              "description": "Specifies the row selection mode. By default, row selection is disabled.",
              "type": "string",
              "displayName": "Row",
              "value": "none",
              "help": "#selectionMode.row",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Multiple rows can be selected at the same time.",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "Selection is disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "Only a single row can be selected at a time.",
                  "displayName": "Single"
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleActionableMode": {
              "description": "Provides properties to customize the accessible context to enter actionable mode.",
              "type": "string",
              "help": "#translations.accessibleActionableMode"
            },
            "accessibleCollapsed": {
              "description": "Provides properties to customize the accessible context when a header is collapsible.",
              "type": "string",
              "help": "#translations.accessibleCollapsed"
            },
            "accessibleColumnContext": {
              "description": "Provides properties to customize the accessible context for the column index.",
              "type": "string",
              "help": "#translations.accessibleColumnContext"
            },
            "accessibleColumnEndHeaderContext": {
              "description": "Provides properties to customize the accessible context for the column end header index.",
              "type": "string",
              "help": "#translations.accessibleColumnEndHeaderContext"
            },
            "accessibleColumnEndHeaderLabelContext": {
              "description": "Provides properties to customize the accessible context for the column end header label.",
              "type": "string",
              "help": "#translations.accessibleColumnEndHeaderLabelContext"
            },
            "accessibleColumnHeaderContext": {
              "description": "Provides properties to customize the accessible context for the column header index.",
              "type": "string",
              "help": "#translations.accessibleColumnHeaderContext"
            },
            "accessibleColumnHeaderLabelContext": {
              "description": "Provides properties to customize the accessible context for the column header label.",
              "type": "string",
              "help": "#translations.accessibleColumnHeaderLabelContext"
            },
            "accessibleColumnHierarchicalFull": {
              "description": "Hierarchical information for screen readers on the column's position in it's set and it's set size when available.",
              "type": "string",
              "help": "#translations.accessibleColumnHierarchicalFull"
            },
            "accessibleColumnHierarchicalPartial": {
              "description": "Hierarchical information for screen readers when the column's set size is not available.",
              "type": "string",
              "help": "#translations.accessibleColumnHierarchicalPartial"
            },
            "accessibleColumnHierarchicalUnknown": {
              "description": "Hierarchical information for screen readers when the column's position in the set and the set size is not available.",
              "type": "string",
              "help": "#translations.accessibleColumnHierarchicalUnknown"
            },
            "accessibleColumnSelected": {
              "description": "Provides properties to customize the accessible context when a column is selected.",
              "type": "string",
              "help": "#translations.accessibleColumnSelected"
            },
            "accessibleColumnSpanContext": {
              "description": "Provides properties to customize the accessible context for the cell column extent/span.",
              "type": "string",
              "help": "#translations.accessibleColumnSpanContext"
            },
            "accessibleContainsControls": {
              "description": "Provides properties to customize the accessible text when a cell contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "accessibleExpanded": {
              "description": "Provides properties to customize the accessible context when a row is expanded.",
              "type": "string",
              "help": "#translations.accessibleExpanded"
            },
            "accessibleFirstColumn": {
              "description": "Provides properties to customize the accessible context when the first column is reached.",
              "type": "string",
              "help": "#translations.accessibleFirstColumn"
            },
            "accessibleFirstRow": {
              "description": "Provides properties to customize the accessible context when the first row is reached.",
              "type": "string",
              "help": "#translations.accessibleFirstRow"
            },
            "accessibleLastColumn": {
              "description": "Provides properties to customize the accessible context when the last column is reached.",
              "type": "string",
              "help": "#translations.accessibleLastColumn"
            },
            "accessibleLastRow": {
              "description": "Provides properties to customize the accessible context when the last row is reached.",
              "type": "string",
              "help": "#translations.accessibleLastRow"
            },
            "accessibleLevelContext": {
              "description": "Provides properties to customize the accessible context for the header level when grouped.",
              "type": "string",
              "help": "#translations.accessibleLevelContext"
            },
            "accessibleLevelHierarchicalContext": {
              "description": "Provides properties to customize the accessible context for the header level when hierarchical.",
              "type": "string",
              "help": "#translations.accessibleLevelHierarchicalContext"
            },
            "accessibleMultiCellSelected": {
              "description": "Provides properties to customize the accessible context when multiple cells are selected.",
              "type": "string",
              "help": "#translations.accessibleMultiCellSelected"
            },
            "accessibleNavigationMode": {
              "description": "Provides properties to customize the accessible context to enter navigation mode.",
              "type": "string",
              "help": "#translations.accessibleNavigationMode"
            },
            "accessibleRangeSelectModeOff": {
              "description": "Provides properties to customize the accessible context for discontinuous selection off.",
              "type": "string",
              "help": "#translations.accessibleRangeSelectModeOff"
            },
            "accessibleRangeSelectModeOn": {
              "description": "Provides properties to customize the accessible context for discontinuous selection on.",
              "type": "string",
              "help": "#translations.accessibleRangeSelectModeOn"
            },
            "accessibleRowCollapsed": {
              "description": "Provides properties to customize the accessible context when a row is collapsed.",
              "type": "string",
              "help": "#translations.accessibleRowCollapsed"
            },
            "accessibleRowContext": {
              "description": "Provides properties to customize the accessible context for the row index.",
              "type": "string",
              "help": "#translations.accessibleRowContext"
            },
            "accessibleRowEndHeaderContext": {
              "description": "Provides properties to customize the accessible context for the row end header index.",
              "type": "string",
              "help": "#translations.accessibleRowEndHeaderContext"
            },
            "accessibleRowEndHeaderLabelContext": {
              "description": "Provides properties to customize the accessible context for the row end header label.",
              "type": "string",
              "help": "#translations.accessibleRowEndHeaderLabelContext"
            },
            "accessibleRowExpanded": {
              "description": "Provides properties to customize the accessible context when a header is expandable.",
              "type": "string",
              "help": "#translations.accessibleRowExpanded"
            },
            "accessibleRowHeaderContext": {
              "description": "Provides properties to customize the accessible context for the row header index.",
              "type": "string",
              "help": "#translations.accessibleRowHeaderContext"
            },
            "accessibleRowHeaderLabelContext": {
              "description": "Provides properties to customize the accessible context for the row header label.",
              "type": "string",
              "help": "#translations.accessibleRowHeaderLabelContext"
            },
            "accessibleRowHierarchicalFull": {
              "description": "Hierarchical information for screen readers on the row's position in it's set and it's set size when available.",
              "type": "string",
              "help": "#translations.accessibleRowHierarchicalFull"
            },
            "accessibleRowHierarchicalPartial": {
              "description": "Hierarchical information for screen readers when the rows's set size is not available..",
              "type": "string",
              "help": "#translations.accessibleRowHierarchicalPartial"
            },
            "accessibleRowHierarchicalUnknown": {
              "description": "Hierarchical information for screen readers when the row's position in the set and the set size is not available.",
              "type": "string",
              "help": "#translations.accessibleRowHierarchicalUnknown"
            },
            "accessibleRowSelected": {
              "description": "Provides properties to customize the accessible context when a row is selected.",
              "type": "string",
              "help": "#translations.accessibleRowSelected"
            },
            "accessibleRowSpanContext": {
              "description": "Provides properties to customize the accessible context for the cell extent/span.",
              "type": "string",
              "help": "#translations.accessibleRowSpanContext"
            },
            "accessibleSelectionAffordanceBottom": {
              "description": "Provides properties to customize the accessible context for the bottom selection affordance on touch device.",
              "type": "string",
              "help": "#translations.accessibleSelectionAffordanceBottom"
            },
            "accessibleSelectionAffordanceTop": {
              "description": "Provides properties to customize the accessible context for the top selection affordance on touch devices.",
              "type": "string",
              "help": "#translations.accessibleSelectionAffordanceTop"
            },
            "accessibleSortAscending": {
              "description": "Provides properties to customize the accessible text when a header is sorted ascending.",
              "type": "string",
              "help": "#translations.accessibleSortAscending"
            },
            "accessibleSortDescending": {
              "description": "Provides properties to customize the accessible text when a header is sorted descending.",
              "type": "string",
              "help": "#translations.accessibleSortDescending"
            },
            "accessibleSortable": {
              "description": "Provides properties to customize the accesible text when a header is able to be sorted.",
              "type": "string",
              "help": "#translations.accessibleSortable"
            },
            "accessibleStateSelected": {
              "description": "Provides properties to customize the accessible context when an item has been selected.",
              "type": "string",
              "help": "#translations.accessibleStateSelected"
            },
            "accessibleSummaryEstimate": {
              "description": "Provides properties to customize the accessible context read when the exact row and column count are unknown.",
              "type": "string",
              "help": "#translations.accessibleSummaryEstimate"
            },
            "accessibleSummaryExact": {
              "description": "Provides properties to customize the accessible context read when the exact row and column count are known.",
              "type": "string",
              "help": "#translations.accessibleSummaryExact"
            },
            "accessibleSummaryExpanded": {
              "description": "Provides properties to customize the accessible context reading out the total number of rows expanded inside the data grid.",
              "type": "string",
              "help": "#translations.accessibleSummaryExpanded"
            },
            "collapsedText": {
              "description": "Title of the tooltip when header has the ability to be collapsed",
              "type": "string",
              "help": "#translations.collapsedText"
            },
            "columnWidth": {
              "description": "Field in dialog to enter the desired column width for the selected column or columns.",
              "type": "string",
              "help": "#translations.columnWidth"
            },
            "expandedText": {
              "description": "Title of the tooltip when header has the ability to be expanded.",
              "type": "string",
              "help": "#translations.expandedText"
            },
            "labelCopyCells": {
              "description": "Provides properties to customize the context menu copy label for data transfer action.",
              "type": "string",
              "help": "#translations.labelCopyCells"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label for row reordering.",
              "type": "string",
              "help": "#translations.labelCut"
            },
            "labelCutCells": {
              "description": "Provides properties to customize the context menu cut for data transfer action.",
              "type": "string",
              "help": "#translations.labelCutCells"
            },
            "labelDisableNonContiguous": {
              "description": "Provides properties to customize the context menu label for exiting non-contiguous selection.",
              "type": "string",
              "help": "#translations.labelDisableNonContiguous"
            },
            "labelEnableNonContiguous": {
              "description": "Provides properties to customize the context menu label for entering non-contiguous selection.",
              "type": "string",
              "help": "#translations.labelEnableNonContiguous"
            },
            "labelFillCells": {
              "description": "Provides properties to customize the context menu fill label for data transfer action.",
              "type": "string",
              "help": "#translations.labelFillCells"
            },
            "labelPaste": {
              "description": "Provides properties to customize the context menu paste label for row reordering.",
              "type": "string",
              "help": "#translations.labelPaste"
            },
            "labelPasteCells": {
              "description": "Provides properties to customize the context menu paste label for data transfer action.",
              "type": "string",
              "help": "#translations.labelPasteCells"
            },
            "labelResize": {
              "description": "Provides properties to customize the context menu resize label.",
              "type": "string",
              "help": "#translations.labelResize"
            },
            "labelResizeColumn": {
              "description": "Action menu item in the context menu to open the dialog to change the column width of the selection.",
              "type": "string",
              "help": "#translations.labelResizeColumn"
            },
            "labelResizeDialogApply": {
              "description": "Button to apply the resize values.",
              "type": "string",
              "help": "#translations.labelResizeDialogApply"
            },
            "labelResizeDialogCancel": {
              "description": "Button to cancel the resize action and close the resize dialog.",
              "type": "string",
              "help": "#translations.labelResizeDialogCancel"
            },
            "labelResizeDialogSubmit": {
              "description": "Provides properties to customize the resize dialog submit button.",
              "type": "string",
              "help": "#translations.labelResizeDialogSubmit"
            },
            "labelResizeFitToContent": {
              "description": "Action menu item in the context menu to resize the selection to fit.",
              "type": "string",
              "help": "#translations.labelResizeFitToContent"
            },
            "labelResizeHeight": {
              "description": "Action menu item in the context menu to open the dialog to change the row height of the selection.",
              "type": "string",
              "help": "#translations.labelResizeHeight"
            },
            "labelResizeRow": {
              "description": "Action menu item in the context menu to open the dialog to change the row height of the selection.",
              "type": "string",
              "help": "#translations.labelResizeRow"
            },
            "labelResizeWidth": {
              "description": "Action menu item in the context menu to open the dialog to change the column width of the selection.",
              "type": "string",
              "help": "#translations.labelResizeWidth"
            },
            "labelSelectMultiple": {
              "description": "Action menu item in the row and column context menus to change state to select multiple cells.",
              "type": "string",
              "help": "#translations.labelSelectMultiple"
            },
            "labelSortAsc": {
              "description": "Context menu label and sort icon tooltip for sort ascending.",
              "type": "string",
              "help": "#translations.labelSortAsc"
            },
            "labelSortCol": {
              "description": "Provides properties to customize the context menu sort column label.",
              "type": "string",
              "help": "#translations.labelSortCol"
            },
            "labelSortColAsc": {
              "description": "Action menu item in the row context menu to sort column in ascending order.",
              "type": "string",
              "help": "#translations.labelSortColAsc"
            },
            "labelSortColDsc": {
              "description": "Action menu item in the row context menu to sort column in descending order.",
              "type": "string",
              "help": "#translations.labelSortColDsc"
            },
            "labelSortDsc": {
              "description": "Context menu label and sort icon tooltip for sort descending.",
              "type": "string",
              "help": "#translations.labelSortDsc"
            },
            "labelSortRow": {
              "description": "Provides properties to customize the context menu sort row label.",
              "type": "string",
              "help": "#translations.labelSortRow"
            },
            "labelSortRowAsc": {
              "description": "Action menu item in the row context menu to sort row in ascending order.",
              "type": "string",
              "help": "#translations.labelSortRowAsc"
            },
            "labelSortRowDsc": {
              "description": "Action menu item in the row context menu to sort row in descending order.",
              "type": "string",
              "help": "#translations.labelSortRowDsc"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the text when fetching data.",
              "type": "string",
              "help": "#translations.msgFetchingData"
            },
            "msgNoData": {
              "description": "Provides properties to customize the empty data grid text.",
              "type": "string",
              "help": "#translations.msgNoData"
            },
            "resizeColumnDialog": {
              "description": "Title of the dialog to set and apply column width.",
              "type": "string",
              "help": "#translations.resizeColumnDialog"
            },
            "resizeRowDialog": {
              "description": "Title of the dialog to set and apply row height.",
              "type": "string",
              "help": "#translations.resizeRowDialog"
            },
            "rowHeight": {
              "description": "Field in dialog to enter the desired row height for the selected row or rows.",
              "type": "string",
              "help": "#translations.rowHeight"
            },
            "tooltipRequired": {
              "description": "Used for the default required icon tooltip.",
              "type": "string",
              "help": "#translations.tooltipRequired"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "the child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refresh the data grid.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeCurrentCell": {
          "description": "Triggered before the current cell is changed.",
          "help": "#event:beforeCurrentCell",
          "detail": {
            "currentCell": {
              "description": "the new current cell, see currentCell for the object information",
              "type": "object",
              "properties": {
                "type": {
                  "description": "designates whether a header or databody cell is the current cell",
                  "type": "\"cell\"|\"header\"|\"label\""
                },
                "axis": {
                  "description": "header axis, available if type is header or label",
                  "type": "\"column\"|\"columnEnd\"|\"row\"|\"rowEnd\""
                },
                "index": {
                  "description": "header index, available if type is header",
                  "type": "number"
                },
                "level": {
                  "description": "header level, available if type is header or label",
                  "type": "number"
                },
                "key": {
                  "description": "header key, available if type is header",
                  "type": "any"
                },
                "indexes": {
                  "description": "cell indexes, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "cell column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "cell keys, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "cell column key",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "previousCurrentCell": {
              "description": "the previous current cell, see currentCell for the object information",
              "type": "object",
              "properties": {
                "type": {
                  "description": "designates whether a header or databody cell is the current cell",
                  "type": "\"cell\"|\"header\"|\"label\""
                },
                "axis": {
                  "description": "header axis, available if type is header or label",
                  "type": "\"column\"|\"columnEnd\"|\"row\"|\"rowEnd\""
                },
                "index": {
                  "description": "header index, available if type is header",
                  "type": "number"
                },
                "level": {
                  "description": "header level, available if type is header or label",
                  "type": "number"
                },
                "key": {
                  "description": "header key, available if type is header",
                  "type": "any"
                },
                "indexes": {
                  "description": "cell indexes, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "cell column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "cell keys, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "cell column key",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "ojBeforeEdit": {
          "description": "Triggered before the DataGrid is going to enter edit mode.",
          "help": "#event:beforeEdit",
          "detail": {
            "cellContext": {
              "description": "the cellContext of the cell that editing is going to be performed on",
              "type": "object",
              "properties": {
                "componentElement": {
                  "description": "a reference to the DataGrid root Element",
                  "type": "Element"
                },
                "parentElement": {
                  "description": "empty rendered cell element",
                  "type": "Element"
                },
                "cell": {
                  "description": "the container data object for the cell",
                  "type": "object"
                },
                "data": {
                  "description": "the data object for the cell",
                  "type": "any"
                },
                "datasource": {
                  "description": "a reference to the data source object",
                  "type": "object|null"
                },
                "indexes": {
                  "description": "the object that contains both the zero based row index and column index in which the cell is bound to",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the zero based absolute row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "the zero based absolute column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "the object that contains both the row key and column key which identifies the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "the column key",
                      "type": "any"
                    }
                  }
                },
                "extents": {
                  "description": "the object that contains both the row extent and column extent of the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row extent",
                      "type": "number"
                    },
                    "column": {
                      "description": "the column extent",
                      "type": "number"
                    }
                  }
                },
                "indexFromParent": {
                  "description": "if flattened tree data provider, the offset from the parent key",
                  "type": "number"
                },
                "parentKey": {
                  "description": "if flattened tree data provider, the parent row key",
                  "type": "any"
                },
                "treeDepth": {
                  "description": "if flattened tree data provider, the depth of the node",
                  "type": "number"
                },
                "isLeaf": {
                  "description": "if flattened tree data provider, true if it is a leaf node",
                  "type": "boolean"
                },
                "metadata": {
                  "description": "the top level item metadata object if using a DataGridProvider",
                  "type": "any"
                },
                "mode": {
                  "description": "the mode the cell is rendered in",
                  "type": "\"edit\"|\"navigation\""
                }
              }
            }
          }
        },
        "ojBeforeEditEnd": {
          "description": "Triggered before the DataGrid is going to exit edit mode. See the Help documentation for more information.",
          "help": "#event:beforeEditEnd",
          "detail": {
            "cellContext": {
              "description": "the cellContext of the cell that editing is going to be performed on",
              "type": "object",
              "properties": {
                "componentElement": {
                  "description": "a reference to the DataGrid root Element",
                  "type": "Element"
                },
                "parentElement": {
                  "description": "empty rendered cell element",
                  "type": "Element"
                },
                "cell": {
                  "description": "the container data object for the cell",
                  "type": "object"
                },
                "data": {
                  "description": "the data object for the cell",
                  "type": "any"
                },
                "datasource": {
                  "description": "a reference to the data source object",
                  "type": "object|null"
                },
                "indexes": {
                  "description": "the object that contains both the zero based row index and column index in which the cell is bound to",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the zero based absolute row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "the zero based absolute column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "the object that contains both the row key and column key which identifies the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "the column key",
                      "type": "any"
                    }
                  }
                },
                "extents": {
                  "description": "the object that contains both the row extent and column extent of the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row extent",
                      "type": "number"
                    },
                    "column": {
                      "description": "the column extent",
                      "type": "number"
                    }
                  }
                },
                "indexFromParent": {
                  "description": "if flattened tree data provider, the offset from the parent key",
                  "type": "number"
                },
                "parentKey": {
                  "description": "if flattened tree data provider, the parent row key",
                  "type": "any"
                },
                "treeDepth": {
                  "description": "if flattened tree data provider, the depth of the node",
                  "type": "number"
                },
                "isLeaf": {
                  "description": "if flattened tree data provider, true if it is a leaf node",
                  "type": "boolean"
                },
                "metadata": {
                  "description": "the top level item metadata object if using a DataGridProvider",
                  "type": "any"
                },
                "mode": {
                  "description": "the mode the cell is rendered in",
                  "type": "\"edit\"|\"navigation\""
                }
              }
            },
            "cancelEdit": {
              "description": "true if the edit should be negated based on actions (i.e. escape key)",
              "type": "boolean"
            }
          }
        },
        "ojCollapseRequest": {
          "description": "Triggered when a collapse gesture is performed on the DataGrid with DataGridProvider. Use this event to communicate a collapse to the DataGridProvider. The DataGridProvider must then fire a refresh event to trigger the collapse fetches from the grid.",
          "help": "#event:collapseRequest",
          "detail": {
            "axis": {
              "description": "the axis for which collapse is occuring",
              "type": "'row'|'column'"
            },
            "item": {
              "description": "the item information of the header which was collapsed on",
              "type": "GridHeaderItem<D>"
            }
          }
        },
        "ojCopyRequest": {
          "description": "Triggered on copy.",
          "help": "#event:copyRequest",
          "detail": {
            "sourceRange": {
              "description": "The range of cells being copy, only a single range may be copied.",
              "type": "oj.ojDataGrid.Range"
            }
          }
        },
        "ojCutRequest": {
          "description": "Triggered on cut.",
          "help": "#event:cutRequest",
          "detail": {
            "sourceRange": {
              "description": "The range of cells being cut, only a single range may be cut.",
              "type": "oj.ojDataGrid.Range"
            }
          }
        },
        "ojExpandRequest": {
          "description": "Triggered when a expand gesture is performed on the DataGrid with DataGridProvider. Use this event to communicate a expand to the DataGridProvider. The DataGridProvider must then fire a refresh/mutation event to trigger the expand fetches from the grid.",
          "help": "#event:expandRequest",
          "detail": {
            "axis": {
              "description": "the axis for which expand is occuring",
              "type": "'row'|'column'"
            },
            "item": {
              "description": "the item information of the header which was expanded on",
              "type": "GridHeaderItem<D>"
            }
          }
        },
        "ojFillRequest": {
          "description": "Triggered on autofill.",
          "help": "#event:fillRequest",
          "detail": {
            "action": {
              "description": "The direction of the fill. Flood is the traditional spreadsheet fill. Down and End refer to specific keyboard and touch fill gestures, where the fill operates from the first cells in a row or column to the rest of the selection.",
              "type": "'flood'|'down'|'end'"
            },
            "sourceRange": {
              "description": "The range of cells being filled from.",
              "type": "oj.ojDataGrid.Range"
            },
            "targetRange": {
              "description": "The range of cells being filled to.",
              "type": "oj.ojDataGrid.Range"
            }
          }
        },
        "ojPasteRequest": {
          "description": "Triggered on paste.",
          "help": "#event:pasteRequest",
          "detail": {
            "action": {
              "description": "The action in the grid that paste is fired for. Cut or copy would be fired if there is an active cut or copy on the grid. Unknown means a paste gesture was fired but there is no active cut or copy. Applications can inspect the clipboard in this case.",
              "type": "'cut'|'copy'|'unknown'"
            },
            "sourceRange": {
              "description": "The range of cells being pasted from. Can be null if action is unknown.",
              "type": "oj.ojDataGrid.Range"
            },
            "targetRange": {
              "description": "The range of cells being pasted to.",
              "type": "oj.ojDataGrid.Range"
            }
          }
        },
        "ojResize": {
          "description": "Triggered when a portion of the DataGrid is resized.",
          "help": "#event:resize",
          "detail": {
            "header": {
              "description": "the key of the header which was resized",
              "type": "string|number"
            },
            "oldDimensions": {
              "description": "the oldDimensions",
              "type": "object",
              "properties": {
                "width": {
                  "description": "the old pixel size (ex: '75px' would be 75)",
                  "type": "number"
                },
                "height": {
                  "description": "the old pixel size (ex: '75px' would be 75)",
                  "type": "number"
                }
              }
            },
            "newDimensions": {
              "description": "the newDimensions",
              "type": "object",
              "properties": {
                "width": {
                  "description": "the new pixel size (ex: '75px' would be 75)",
                  "type": "number"
                },
                "height": {
                  "description": "the new pixel size (ex: '75px' would be 75)",
                  "type": "number"
                }
              }
            }
          }
        },
        "ojScroll": {
          "description": "Triggered after the DataGrid has been scrolled.",
          "help": "#event:scroll",
          "detail": {
            "scrollX": {
              "description": "the x position in pixels of the scrollable region calculated from the origin of the DataGrid. In RTL this would be the right of the grid.",
              "type": "number"
            },
            "scrollY": {
              "description": "the y position in pixels of the scrollable region",
              "type": "number"
            }
          }
        },
        "ojSort": {
          "description": "Triggered when a sort is performed on the DataGrid.",
          "help": "#event:sort",
          "detail": {
            "header": {
              "description": "the key of the header which was sorted on",
              "type": "any"
            },
            "direction": {
              "description": "the direction of the sort ascending/descending",
              "type": "'ascending'|'descending'"
            }
          }
        },
        "ojSortRequest": {
          "description": "Triggered when a sort gesture is performed on the DataGrid with DataGridProvider. Use this event to communicate a sort to the DataGridProvider. The DataGridProvider must then fire a refresh event to trigger the sort fetches from the grid.",
          "help": "#event:sortRequest",
          "detail": {
            "axis": {
              "description": "the axis for which sort is occuring",
              "type": "'row'|'column'"
            },
            "item": {
              "description": "the item information of the header which was sorted on",
              "type": "GridHeaderItem<D>"
            },
            "direction": {
              "description": "the direction of the sort ascending/descending",
              "type": "'ascending'|'descending'"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "rowHeaderTemplate": {
          "description": "The rowHeaderTemplate slot is used to specify the template for rendering the content of the row header. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowHeaderTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridHeaderItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "rowEndHeaderTemplate": {
          "description": "The rowEndHeaderTemplate slot is used to specify the template for rendering the content of the row end header. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowEndHeaderTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridHeaderItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "columnHeaderTemplate": {
          "description": "The columnHeaderTemplate slot is used to specify the template for rendering the content of the column header. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#columnHeaderTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridHeaderItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "columnEndHeaderTemplate": {
          "description": "The columnEndHeaderTemplate slot is used to specify the template for rendering the content of the column end header. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#columnEndHeaderTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridHeaderItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "cellTemplate": {
          "description": "The cellTemplate slot is used to specify the template for rendering the content of the cell. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#cellTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridBodyItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            },
            "mode": {
              "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
              "type": "string"
            }
          }
        },
        "rowHeaderLabelTemplate": {
          "description": "The rowHeaderLabelTemplate slot is used to specify the template for rendering the content of the row header label. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowHeaderLabelTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "rowEndHeaderLabelTemplate": {
          "description": "The rowEndHeaderLabelTemplate slot is used to specify the template for rendering the content of the row end header label. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowEndHeaderLabelTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "columnHeaderLabelTemplate": {
          "description": "The columnHeaderLabelTemplate slot is used to specify the template for rendering the content of the column header label. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#columnHeaderLabelTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        },
        "columnEndHeaderLabelTemplate": {
          "description": "The columnEndHeaderLabelTemplate slot is used to specify the template for rendering the content of the column end header label. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#columnEndHeaderLabelTemplate",
          "data": {
            "item": {
              "description": "True if the current item is a leaf node.",
              "type": "GridItem<D>"
            },
            "datasource": {
              "description": "A reference to the grid data provider object.",
              "type": "DataGridProvider<D>"
            }
          }
        }
      }
    },
    "oj-date-picker": {
      "name": "oj-date-picker",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Inline Date Picker",
      "implements": [
        "DatePickerElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker",
          "defaultColumns": "4",
          "minColumns": "4"
        },
        "oracle": {
          "icon": "oj-ux-ico-calendar",
          "uxSpecs": [
            "date-picker"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Date picker cell font size",
          "name": "oj-date-picker-cell-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Date picker today cell border color",
          "name": "oj-date-picker-cell-border-color-today",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A date picker is an inline element for picking a date value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDatePicker.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "required",
            "disabled",
            "readonly",
            "min",
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "#datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "#datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "#datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "year is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "year is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the position in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "#datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "#datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "#datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button. When user clicks on the Today button, it will highlight the current day in the calendar.",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "#datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#datePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Ctrl+Alt+Page Up and Ctrl+Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "#datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "#datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "#datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "#datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "#dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "#dayMetaData"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is \"disabled\".",
          "type": "string",
          "displayName": "Keyboard Edit",
          "value": "disabled",
          "help": "#keyboardEdit",
          "enumValues": [
            "disabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum selectable date, in ISO string format.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date",
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum selectable date, in ISO string format.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date",
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "status": [
            {
              "type": "deprecated",
              "since": "11.0.0",
              "description": "This property is deprecated because it was incorrectly exposed on oj-date-picker and not fully implemented."
            }
          ],
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$inputDateTimeRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "value": "jet",
          "help": "#renderMode",
          "enumValues": [
            "jet"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "currentText": {
              "description": "The text to display for the current day link.",
              "type": "string",
              "help": "#translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
              "type": "object",
              "help": "#translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
              "type": "object",
              "help": "#translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "nextText": {
              "description": "The text to display for the next month link.",
              "type": "string",
              "help": "#translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link.",
              "type": "string",
              "help": "#translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon.",
              "type": "string",
              "help": "#translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon.",
              "type": "string",
              "help": "#translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading.",
              "type": "string",
              "help": "#translations.weekHeader"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the date picker element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "format": "date",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "#hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "show": {
          "description": "Shows the datepicker",
          "help": "#show",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-date-time-picker": {
      "name": "oj-date-time-picker",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Inline Date Time Picker",
      "implements": [
        "DateTimePickerElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker",
          "defaultColumns": "4",
          "minColumns": "4"
        },
        "oracle": {
          "icon": "oj-ux-ico-calendar-clock",
          "uxSpecs": [
            "input-date-and-time"
          ]
        }
      },
      "description": "A date time picker is an inline element for picking a date and time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDateTimePicker.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "required",
            "disabled",
            "readonly",
            "min",
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the datetime value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "#datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "#datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "#datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "year is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "year is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the position in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "#datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "#datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "#datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button. When user clicks on the Today button, it will highlight the current day in the calendar.",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "#datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#datePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Ctrl+Alt+Page Up and Ctrl+Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "#datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "#datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "#datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "#datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "#dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "#dayMetaData"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is \"disabled\".",
          "type": "string",
          "displayName": "Keyboard Edit",
          "value": "disabled",
          "help": "#keyboardEdit",
          "enumValues": [
            "disabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum selectable datetime, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date-time",
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum selectable datetime, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date-time",
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "status": [
            {
              "type": "deprecated",
              "since": "11.0.0",
              "description": "This property is deprecated because it was incorrectly exposed on oj-date-time-picker and not fully implemented."
            }
          ],
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$inputDateTimeRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "value": "jet",
          "help": "#renderMode",
          "enumValues": [
            "jet"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "#timePicker",
          "properties": {
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "#timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button. When user clicks on the Now button, it will highlight the current time in the timepicker.",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#timePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputDateTime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "#timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "cancel": {
              "description": "The text to display for the Cancel link.",
              "type": "string",
              "help": "#translations.cancel"
            },
            "currentText": {
              "description": "The text to display for the current day link.",
              "type": "string",
              "help": "#translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
              "type": "object",
              "help": "#translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
              "type": "object",
              "help": "#translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "done": {
              "description": "The text to display for the switcher's Done link.",
              "type": "string",
              "help": "#translations.done"
            },
            "nextText": {
              "description": "The text to display for the next month link.",
              "type": "string",
              "help": "#translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link.",
              "type": "string",
              "help": "#translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "time": {
              "description": "The aria-label text for the time input in a oj-date-time-picker. When the screen reader user tabs to the input, they will hear 'Time' so that they know they are on the time field of the oj-date-time-picker.",
              "type": "string",
              "help": "#translations.time"
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon.",
              "type": "string",
              "help": "#translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon.",
              "type": "string",
              "help": "#translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading.",
              "type": "string",
              "help": "#translations.weekHeader"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the datetime picker element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "format": "date-time",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "#hide",
          "return": "void"
        },
        "hideTimePicker": {
          "description": "",
          "help": "#hideTimePicker",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "show": {
          "description": "",
          "help": "#show",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "showTimePicker": {
          "description": "Method to show the internally created InputTime",
          "help": "#showTimePicker",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-defer": {
      "name": "oj-defer",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Defer",
      "implements": [
        "DeferElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdefer"
        },
        "oracle": {
          "icon": "oj-ux-ico-defer"
        }
      },
      "description": "Defer is used to delay applying bindings to its children until it is activated. Child elements are disconnected from the DOM tree until the parent component activates its subtree.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDefer.html"
    },
    "oj-diagram-child-content": {
      "name": "oj-diagram-child-content",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Diagram Child Content",
      "implements": [
        "DiagramChildContentElement"
      ],
      "type": "core",
      "since": "12.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "oj-diagram-child-content is used to indicate where the container node child contents are placed.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDiagramChildContent.html"
    },
    "oj-diagram-link": {
      "name": "oj-diagram-link",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Diagram Link",
      "implements": [
        "DiagramLinkElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "The oj-diagram-link element is used to declare properties for diagram links. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDiagramLink.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links. By default, the label is used as the link category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "#categories"
        },
        "color": {
          "description": "The link color.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "endConnectorType": {
          "description": "Specifies the type of end connector on the link. Can take the name of a built-in shape.",
          "type": "string",
          "displayName": "End Connector Type",
          "help": "#endConnectorType",
          "enumValues": [
            "arrow",
            "arrowConcave",
            "arrowOpen",
            "circle",
            "none",
            "rectangle",
            "rectangleRounded"
          ],
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "arrowConcave": {
              "displayName": "Arrow Concave"
            },
            "arrowOpen": {
              "displayName": "Arrow Open"
            },
            "circle": {
              "displayName": "Circle"
            },
            "none": {
              "displayName": "None"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "rectangleRounded": {
              "displayName": "Rectangle Rounded"
            }
          }
        },
        "endNode": {
          "description": "Specifies the end node id.",
          "type": "any",
          "displayName": "End Node",
          "help": "#endNode"
        },
        "label": {
          "description": "Text used for the link label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the diagram link label. The default values come from the CSS classes and varies based on theme. The following style properties are supported: backgroundColor, borderColor, borderWidth, borderRadius, color, cursor, fontFamily, fontSize, fontStyle, fontWeight, maxWidth, textDecoration.",
          "type": "object|null",
          "displayName": "Label Style",
          "help": "#labelStyle"
        },
        "selectable": {
          "description": "Specifies whether or not the link will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the link's tooltip. Will be lazily created if a function is used.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "startConnectorType": {
          "description": "Specifies the type of start connector on the link. Can take the name of a built-in shape.",
          "type": "string",
          "displayName": "Start Connector Type",
          "help": "#startConnectorType",
          "enumValues": [
            "arrow",
            "arrowConcave",
            "arrowOpen",
            "circle",
            "none",
            "rectangle",
            "rectangleRounded"
          ],
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "arrowConcave": {
              "displayName": "Arrow Concave"
            },
            "arrowOpen": {
              "displayName": "Arrow Open"
            },
            "circle": {
              "displayName": "Circle"
            },
            "none": {
              "displayName": "None"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "rectangleRounded": {
              "displayName": "Rectangle Rounded"
            }
          }
        },
        "startNode": {
          "description": "Specifies the start node id.",
          "type": "any",
          "displayName": "Start Node",
          "help": "#startNode"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the link.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the link. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "width": {
          "description": "The link width in pixels.",
          "type": "number",
          "displayName": "Width",
          "units": "pixels",
          "help": "#width"
        }
      }
    },
    "oj-diagram-node": {
      "name": "oj-diagram-node",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Diagram Node",
      "implements": [
        "DiagramNodeElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "The oj-diagram-node element is used to declare properties for diagram nodes. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDiagramNode.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this node. This allows highlighting and filtering of nodes. By default, the label is used as the node category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "#categories"
        },
        "descendantsConnectivity": {
          "description": "Indicates whether the specified object contains links that should be discovered in order to display promoted links.",
          "type": "string",
          "displayName": "Descendants Connectivity",
          "value": "unknown",
          "help": "#descendantsConnectivity",
          "enumValues": [
            "connected",
            "disjoint",
            "unknown"
          ],
          "propertyEditorValues": {
            "connected": {
              "displayName": "Connected"
            },
            "disjoint": {
              "displayName": "Disjoint"
            },
            "unknown": {
              "displayName": "Unknown"
            }
          }
        },
        "icon": {
          "description": "Specifies an icon to be used as a graphical element for the node",
          "type": "object",
          "displayName": "Icon",
          "value": {},
          "help": "#icon",
          "properties": {
            "borderColor": {
              "description": "The border color of the icon.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "#icon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of the icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#icon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width in pixels.",
              "type": "number",
              "displayName": "Border Width",
              "help": "#icon.borderWidth"
            },
            "color": {
              "description": "The fill color of the icon.",
              "type": "string",
              "displayName": "Color",
              "help": "#icon.color"
            },
            "height": {
              "description": "The height of the icon.",
              "type": "number",
              "displayName": "Height",
              "help": "#icon.height"
            },
            "opacity": {
              "description": "The opacity of the icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "#icon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of the icon.",
              "type": "string",
              "displayName": "Pattern",
              "help": "#icon.pattern"
            },
            "shape": {
              "description": "The shape of the icon. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "#icon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URI of the node image.",
              "type": "string",
              "displayName": "Source",
              "help": "#icon.source"
            },
            "sourceHover": {
              "description": "The optional URI of the node hover image. If not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Hover",
              "help": "#icon.sourceHover"
            },
            "sourceHoverSelected": {
              "description": "The optional URI of the selected image on hover. If not defined, the sourceSelected image will be used. If the sourceSelected image is not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Hover Selected",
              "help": "#icon.sourceHoverSelected"
            },
            "sourceSelected": {
              "description": "The optional URI of the selected image. If not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Selected",
              "help": "#icon.sourceSelected"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the icon. The style class and style object will be applied directly on the icon and override any other styling specified through the properties.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#icon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the icon. The style class and style object will be applied directly on the icon and override any other styling specified through the properties. Only SVG CSS style properties are supported.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#icon.svgStyle"
            },
            "width": {
              "description": "The width of the icon.",
              "type": "number",
              "displayName": "Width",
              "help": "#icon.width"
            }
          }
        },
        "label": {
          "description": "Text used for the node label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the diagram node label. The default values come from the CSS classes and varies based on theme. The following style properties are supported: backgroundColor, borderColor, borderWidth, borderRadius, color, cursor, fontFamily, fontSize, fontStyle, fontWeight, maxWidth, textDecoration.",
          "type": "object|null",
          "displayName": "Label Style",
          "help": "#labelStyle"
        },
        "overview": {
          "description": "Specifies overview node shape.",
          "type": "object",
          "displayName": "Overview",
          "value": {},
          "help": "#overview",
          "properties": {
            "icon": {
              "description": "Specifies overview node shape.",
              "type": "object",
              "displayName": "Icon",
              "help": "#overview.icon",
              "properties": {
                "shape": {
                  "description": "The shape of the icon in the overview window. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Shape",
                  "help": "#overview.icon.shape"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the node icon in the overview.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "help": "#overview.icon.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the node icon in the overview. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "help": "#overview.icon.svgStyle"
                }
              }
            }
          }
        },
        "selectable": {
          "description": "Specifies whether or not the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the node's tooltip. Will be lazily created if a function is used.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "showDisclosure": {
          "description": "Determines when to display the expand/collapse button.",
          "type": "string",
          "displayName": "Show Disclosure",
          "help": "#showDisclosure",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      }
    },
    "oj-diagram": {
      "name": "oj-diagram",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Diagram",
      "implements": [
        "DiagramElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart-network-circular"
        }
      },
      "description": "A diagram displays a set of nodes and the links between them. The node positions and link paths are specified by an application-provided layout function.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDiagram.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "panning",
            "panDirection",
            "zooming",
            "minZoom",
            "maxZoom",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "nodeData",
            "linkData",
            "layout",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate or linkTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "data": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "Use nodeData and linkData instead."
            }
          ],
          "description": "Specifies the data for the component.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dnd": {
          "description": "Used to customize the drag and drop features.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "Used to customize drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "#dnd.drag",
              "properties": {
                "nodes": {
                  "description": "Used to customize the drag features for nodes.",
                  "type": "object",
                  "displayName": "Nodes",
                  "help": "#dnd.drag.nodes",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME type for dragged data.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drag.nodes.dataTypes"
                    },
                    "drag": {
                      "description": "Optional handler for drag event.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "#dnd.drag.nodes.drag"
                    },
                    "dragEnd": {
                      "description": "Optional handler for dragend event.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "#dnd.drag.nodes.dragEnd"
                    },
                    "dragStart": {
                      "description": "Optional handler for dragstart event.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "#dnd.drag.nodes.dragStart"
                    }
                  }
                },
                "ports": {
                  "description": "Defines link creation functionality.",
                  "type": "object",
                  "displayName": "Ports",
                  "help": "#dnd.drag.ports",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME type for dragged data.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drag.ports.dataTypes"
                    },
                    "drag": {
                      "description": "Optional handler for drag event.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "#dnd.drag.ports.drag"
                    },
                    "dragEnd": {
                      "description": "Optional handler for dragend event.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "#dnd.drag.ports.dragEnd"
                    },
                    "dragStart": {
                      "description": "Optional handler for dragstart event.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "#dnd.drag.ports.dragStart"
                    },
                    "linkStyle": {
                      "description": "Specifies link creation feedback.",
                      "type": "function",
                      "displayName": "Link Style",
                      "value": null,
                      "help": "#dnd.drag.ports.linkStyle"
                    },
                    "selector": {
                      "description": "Specifies DOM element selector used to start link creation.",
                      "type": "string",
                      "displayName": "Selector",
                      "value": null,
                      "help": "#dnd.drag.ports.selector"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "#dnd.drop",
              "properties": {
                "background": {
                  "description": "Allows dropping on the diagram background.",
                  "type": "object",
                  "displayName": "Background",
                  "help": "#dnd.drop.background",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram background.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drop.background.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "#dnd.drop.background.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "#dnd.drop.background.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "#dnd.drop.background.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "#dnd.drop.background.drop"
                    }
                  }
                },
                "links": {
                  "description": "Allows dropping on diagram links.",
                  "type": "object",
                  "displayName": "Links",
                  "help": "#dnd.drop.links",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram links.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drop.links.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "#dnd.drop.links.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "#dnd.drop.links.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "#dnd.drop.links.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "#dnd.drop.links.drop"
                    }
                  }
                },
                "nodes": {
                  "description": "Allows dropping on diagram nodes.",
                  "type": "object",
                  "displayName": "Nodes",
                  "help": "#dnd.drop.nodes",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram nodes.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drop.nodes.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "#dnd.drop.nodes.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "#dnd.drop.nodes.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "#dnd.drop.nodes.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "#dnd.drop.nodes.drop"
                    }
                  }
                },
                "ports": {
                  "description": "Allows dropping a link end on a port.",
                  "type": "object",
                  "displayName": "Ports",
                  "help": "#dnd.drop.ports",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram ports.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drop.ports.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "#dnd.drop.ports.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "#dnd.drop.ports.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "#dnd.drop.ports.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "#dnd.drop.ports.drop"
                    },
                    "selector": {
                      "description": "Specifies DOM element selector used for link creation end.",
                      "type": "string",
                      "displayName": "Selector",
                      "value": null,
                      "help": "#dnd.drop.ports.selector"
                    }
                  }
                }
              }
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set of ids for expanded diagram nodes.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "focusRenderer": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use nodeContent.focusRenderer instead."
            }
          ],
          "description": "Specifies custom renderer for the diagram nodes used for focus updates.",
          "type": "function|null",
          "displayName": "Focus Renderer",
          "value": null,
          "help": "#focusRenderer"
        },
        "hiddenCategories": {
          "description": "Specifies categories used for filtering.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "Specifies matching condition used for category highlighting.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "Specifies categories used for highlighting.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over diagram nodes and links.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverRenderer": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use nodeContent.hoverRenderer instead."
            }
          ],
          "description": "Specifies custom renderer for the diagram nodes used for hover updates.",
          "type": "function|null",
          "displayName": "Hover Renderer",
          "value": null,
          "help": "#hoverRenderer"
        },
        "layout": {
          "description": "Specifies layout callback used to position nodes and links.",
          "type": "function",
          "displayName": "Layout",
          "help": "#layout"
        },
        "linkContent": {
          "description": "An object containing an optional callbacks function for link customization.",
          "type": "object",
          "displayName": "Link Content",
          "help": "#linkContent",
          "properties": {
            "focusRenderer": {
              "description": "Specifies custom renderer for the diagram links used for focus updates.",
              "type": "function|null",
              "displayName": "Focus Renderer",
              "value": null,
              "help": "#linkContent.focusRenderer"
            },
            "hoverRenderer": {
              "description": "Specifies custom renderer for the diagram links used for hover updates.",
              "type": "function|null",
              "displayName": "Hover Renderer",
              "value": null,
              "help": "#linkContent.hoverRenderer"
            },
            "renderer": {
              "description": "Specifies custom renderer for the diagram links used for initial rendering.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#linkContent.renderer"
            },
            "selectionRenderer": {
              "description": "Specifies custom renderer for the diagram links used for selection updates.",
              "type": "function|null",
              "displayName": "Selection Renderer",
              "value": null,
              "help": "#linkContent.selectionRenderer"
            }
          }
        },
        "linkData": {
          "description": "Specifies the DataProvider for the diagram links. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Link Data",
          "value": null,
          "help": "#linkData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "linkHighlightMode": {
          "description": "Defines link highlighting mode.",
          "type": "string",
          "displayName": "Link Highlight Mode",
          "value": "link",
          "help": "#linkHighlightMode",
          "enumValues": [
            "link",
            "linkAndNodes"
          ],
          "propertyEditorValues": {
            "link": {
              "displayName": "Link"
            },
            "linkAndNodes": {
              "displayName": "Link And Nodes"
            }
          }
        },
        "linkProperties": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "See nodeData and linkData usage."
            }
          ],
          "description": "Optional callback for customizing link appearance based on link data.",
          "type": "null|function",
          "displayName": "Link Properties",
          "value": null,
          "help": "#linkProperties"
        },
        "maxZoom": {
          "description": "Specifies the maximum zoom level for this diagram.",
          "type": "number",
          "displayName": "Max Zoom",
          "value": 1,
          "help": "#maxZoom"
        },
        "minZoom": {
          "description": "Specifies the minimum zoom level for this diagram.",
          "type": "number",
          "displayName": "Min Zoom",
          "value": 0,
          "help": "#minZoom"
        },
        "nodeContent": {
          "description": "An object containing an optional callbacks function for node customization.",
          "type": "object",
          "displayName": "Node Content",
          "help": "#nodeContent",
          "properties": {
            "focusRenderer": {
              "description": "Specifies custom renderer for the diagram nodes used for focus updates.",
              "type": "function|null",
              "displayName": "Focus Renderer",
              "value": null,
              "help": "#nodeContent.focusRenderer"
            },
            "hoverRenderer": {
              "description": "Specifies custom renderer for the diagram nodes used for hover updates.",
              "type": "function|null",
              "displayName": "Hover Renderer",
              "value": null,
              "help": "#nodeContent.hoverRenderer"
            },
            "renderer": {
              "description": "Specifies custom renderer for the diagram nodes used for initial rendering.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#nodeContent.renderer"
            },
            "selectionRenderer": {
              "description": "Specifies custom renderer for the diagram nodes used for selection updates.",
              "type": "function|null",
              "displayName": "Selection Renderer",
              "value": null,
              "help": "#nodeContent.selectionRenderer"
            },
            "zoomRenderer": {
              "description": "Specifies custom renderer for the diagram nodes used for zoom updates.",
              "type": "function|null",
              "displayName": "Zoom Renderer",
              "value": null,
              "help": "#nodeContent.zoomRenderer"
            }
          }
        },
        "nodeData": {
          "description": "Specifies the DataProvider for the diagram nodes. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Node Data",
          "value": null,
          "help": "#nodeData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "nodeHighlightMode": {
          "description": "Defines node highlighting mode.",
          "type": "string",
          "displayName": "Node Highlight Mode",
          "value": "node",
          "help": "#nodeHighlightMode",
          "enumValues": [
            "node",
            "nodeAndIncomingLinks",
            "nodeAndLinks",
            "nodeAndOutgoingLinks"
          ],
          "propertyEditorValues": {
            "node": {
              "displayName": "Node"
            },
            "nodeAndIncomingLinks": {
              "displayName": "Node And Incoming Links"
            },
            "nodeAndLinks": {
              "displayName": "Node And Links"
            },
            "nodeAndOutgoingLinks": {
              "displayName": "Node And Outgoing Links"
            }
          }
        },
        "nodeProperties": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "See nodeData and linkData usage."
            }
          ],
          "description": "Optional callback for customizing node appearance based on node data.",
          "type": "null|function",
          "displayName": "Node Properties",
          "value": null,
          "help": "#nodeProperties"
        },
        "overview": {
          "description": "An object, used to define a diagram overview. If not specified, no overview will be shown.",
          "type": "object",
          "displayName": "Overview",
          "help": "#overview",
          "properties": {
            "fitArea": {
              "description": "Specifies the region that will be scaled to fit within the overview.",
              "type": "string",
              "displayName": "Fit Area",
              "value": "content",
              "help": "#overview.fitArea",
              "enumValues": [
                "canvas",
                "content"
              ],
              "propertyEditorValues": {
                "canvas": {
                  "description": "The canvas (the pannable area when the diagram is at minZoom) will be scaled to fit within the overview. The diagram panning property should also be set to 'fixed' in most situations.",
                  "displayName": "Canvas"
                },
                "content": {
                  "description": "The bounding box of the Diagram nodes will be scaled to fit within the overview.",
                  "displayName": "Content"
                }
              }
            },
            "halign": {
              "description": "Horizontal alignment for diagram overview window",
              "type": "string",
              "displayName": "Halign",
              "value": "end",
              "help": "#overview.halign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "height": {
              "description": "Overview window height.",
              "type": "number",
              "displayName": "Height",
              "value": 100,
              "help": "#overview.height"
            },
            "preserveAspectRatio": {
              "description": "Controls how the fit area is scaled within the overview.",
              "type": "string",
              "displayName": "Preserve Aspect Ratio",
              "value": "meet",
              "help": "#overview.preserveAspectRatio",
              "enumValues": [
                "meet",
                "none"
              ],
              "propertyEditorValues": {
                "meet": {
                  "description": "The aspect ratio of the fit area will be preserved as it is scaled to fit the overview.",
                  "displayName": "Meet"
                },
                "none": {
                  "description": "The aspect ratio of the fit area may not be preserved as it is scaled to fit the overview.",
                  "displayName": "None"
                }
              }
            },
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "#overview.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "valign": {
              "description": "Vertical alignment for diagram overview window",
              "type": "string",
              "displayName": "Valign",
              "value": "bottom",
              "help": "#overview.valign",
              "enumValues": [
                "bottom",
                "middle",
                "top"
              ],
              "propertyEditorValues": {
                "bottom": {
                  "displayName": "Bottom"
                },
                "middle": {
                  "displayName": "Middle"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "width": {
              "description": "Overview window width.",
              "type": "number",
              "displayName": "Width",
              "value": 200,
              "help": "#overview.width"
            }
          }
        },
        "panDirection": {
          "description": "Specifies if panning allowed in horizontal and vertical directions.",
          "type": "string",
          "displayName": "Pan Direction",
          "value": "auto",
          "help": "#panDirection",
          "enumValues": [
            "auto",
            "x",
            "y"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "x": {
              "displayName": "X"
            },
            "y": {
              "displayName": "Y"
            }
          }
        },
        "panZoomState": {
          "description": "A writeback object that contains properties zoom, centerX, and centerY that represent the panZoomState",
          "type": "object",
          "displayName": "Pan Zoom State",
          "writeback": true,
          "help": "#panZoomState",
          "properties": {
            "centerX": {
              "description": "The x coordinate of the center of the viewport",
              "type": "number|null",
              "displayName": "Center X",
              "value": null,
              "help": "#panZoomState.centerX"
            },
            "centerY": {
              "description": "The y coordinate of the center of the viewport",
              "type": "number|null",
              "displayName": "Center Y",
              "value": null,
              "help": "#panZoomState.centerY"
            },
            "zoom": {
              "description": "The zoom value in the range of min/max-zoom",
              "type": "number",
              "displayName": "Zoom",
              "value": 0,
              "help": "#panZoomState.zoom"
            }
          }
        },
        "panning": {
          "description": "Specifies whether panning is allowed in Diagram.",
          "type": "string",
          "displayName": "Panning",
          "value": "none",
          "help": "#panning",
          "enumValues": [
            "auto",
            "centerContent",
            "fixed",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "One of the other described behaviors will be chosen at runtime based on the theme, form factor etc.",
              "displayName": "Auto"
            },
            "centerContent": {
              "description": "Panning is restricted based on the current zoom level to allow any area of the content to be centered. If an overview is being rendered, the overview.fitArea property should also be set to 'content' in most situations.",
              "displayName": "Center Content"
            },
            "fixed": {
              "description": "Panning is restricted to the visible region when the diagram is rendered at minZoom.",
              "displayName": "Fixed"
            },
            "none": {
              "description": "Panning is not allowed.",
              "displayName": "None"
            }
          }
        },
        "promotedLinkBehavior": {
          "description": "Defines promoted link behavior for the component.",
          "type": "string",
          "displayName": "Promoted Link Behavior",
          "value": "lazy",
          "help": "#promotedLinkBehavior",
          "enumValues": [
            "full",
            "lazy",
            "none"
          ],
          "propertyEditorValues": {
            "full": {
              "displayName": "Full"
            },
            "lazy": {
              "displayName": "Lazy"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "renderer": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use nodeContent.renderer instead."
            }
          ],
          "description": "Specifies custom renderer for the diagram nodes used for initial rendering.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "#renderer"
        },
        "selection": {
          "description": "An array containing the ids of the selected nodes and links.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection behavior on the diagram. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "selectionRenderer": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use nodeContent.selectionRenderer instead."
            }
          ],
          "description": "Specifies custom renderer for the diagram nodes used for selection updates.",
          "type": "function|null",
          "displayName": "Selection Renderer",
          "value": null,
          "help": "#selectionRenderer"
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this diagram.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "Defines animation duration in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "#styleDefaults.animationDuration"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "#styleDefaults.hoverBehaviorDelay"
            },
            "linkDefaults": {
              "description": "Default link styles",
              "type": "object",
              "displayName": "Link Defaults",
              "help": "#styleDefaults.linkDefaults",
              "properties": {
                "color": {
                  "description": "Default link color.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.linkDefaults.color"
                },
                "endConnectorType": {
                  "description": "Specifies the type of end connector on the link.",
                  "type": "string",
                  "displayName": "End Connector Type",
                  "value": "none",
                  "help": "#styleDefaults.linkDefaults.endConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "labelStyle": {
                  "description": "Specifies CSS styles for the link label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.linkDefaults.labelStyle"
                },
                "startConnectorType": {
                  "description": "Specifies the type of start connector on the link.",
                  "type": "string",
                  "displayName": "Start Connector Type",
                  "value": "none",
                  "help": "#styleDefaults.linkDefaults.startConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The default SVG CSS style class to apply to the link.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#styleDefaults.linkDefaults.svgClassName"
                },
                "svgStyle": {
                  "description": "Specifies SVG CSS styles for the link.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#styleDefaults.linkDefaults.svgStyle"
                },
                "width": {
                  "description": "Default link width in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 1,
                  "units": "pixels",
                  "help": "#styleDefaults.linkDefaults.width"
                }
              }
            },
            "nodeDefaults": {
              "description": "Default node styles",
              "type": "object",
              "displayName": "Node Defaults",
              "help": "#styleDefaults.nodeDefaults",
              "properties": {
                "icon": {
                  "description": "Default style for the node icon.",
                  "type": "object",
                  "displayName": "Icon",
                  "help": "#styleDefaults.nodeDefaults.icon",
                  "properties": {
                    "borderColor": {
                      "description": "Default border color of the icon.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.icon.borderColor"
                    },
                    "borderRadius": {
                      "description": "Specifies default border radius of the icon.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "#styleDefaults.nodeDefaults.icon.borderRadius"
                    },
                    "borderWidth": {
                      "description": "Default border width of the icon in pixels.",
                      "type": "number",
                      "displayName": "Border Width",
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.icon.borderWidth"
                    },
                    "color": {
                      "description": "Default color of the icon.",
                      "type": "string",
                      "displayName": "Color",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.icon.color"
                    },
                    "height": {
                      "description": "Default icon height.",
                      "type": "number",
                      "displayName": "Height",
                      "value": 10,
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.icon.height"
                    },
                    "pattern": {
                      "description": "Default fill pattern of the icon.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "#styleDefaults.nodeDefaults.icon.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "Specifies default shape of the icon.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "circle",
                      "help": "#styleDefaults.nodeDefaults.icon.shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URI of the node image",
                      "type": "string",
                      "displayName": "Source",
                      "help": "#styleDefaults.nodeDefaults.icon.source"
                    },
                    "sourceHover": {
                      "description": "The optional URI of the node hover image.",
                      "type": "string",
                      "displayName": "Source Hover",
                      "help": "#styleDefaults.nodeDefaults.icon.sourceHover"
                    },
                    "sourceHoverSelected": {
                      "description": "The optional URI of the selected image on hover.",
                      "type": "string",
                      "displayName": "Source Hover Selected",
                      "help": "#styleDefaults.nodeDefaults.icon.sourceHoverSelected"
                    },
                    "sourceSelected": {
                      "description": "The optional URI of the selected image.",
                      "type": "string",
                      "displayName": "Source Selected",
                      "help": "#styleDefaults.nodeDefaults.icon.sourceSelected"
                    },
                    "svgClassName": {
                      "description": "The SVG CSS style class to apply to the node icon.",
                      "type": "string",
                      "displayName": "SVG Class Name",
                      "value": "",
                      "help": "#styleDefaults.nodeDefaults.icon.svgClassName"
                    },
                    "svgStyle": {
                      "description": "Specifies CSS styles for the icon.",
                      "type": "object",
                      "displayName": "SVG Style",
                      "value": {},
                      "help": "#styleDefaults.nodeDefaults.icon.svgStyle"
                    },
                    "width": {
                      "description": "Default icon width.",
                      "type": "number",
                      "displayName": "Width",
                      "value": 10,
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.icon.width"
                    }
                  }
                },
                "labelStyle": {
                  "description": "Specifies CSS styles for the node label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "value": {},
                  "help": "#styleDefaults.nodeDefaults.labelStyle"
                },
                "showDisclosure": {
                  "description": "Determines when to display the expand/collapse button.",
                  "type": "string",
                  "displayName": "Show Disclosure",
                  "value": "on",
                  "help": "#styleDefaults.nodeDefaults.showDisclosure",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "promotedLink": {
              "description": "Promoted link styles",
              "type": "object",
              "displayName": "Promoted Link",
              "help": "#styleDefaults.promotedLink",
              "properties": {
                "color": {
                  "description": "Default promoted link color. The default value varies based on theme.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.promotedLink.color"
                },
                "endConnectorType": {
                  "description": "Specifies the type of end connector on the promoted link.",
                  "type": "string",
                  "displayName": "End Connector Type",
                  "value": "none",
                  "help": "#styleDefaults.promotedLink.endConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "startConnectorType": {
                  "description": "Specifies the type of start connector on the promoted link.",
                  "type": "string",
                  "displayName": "Start Connector Type",
                  "value": "none",
                  "help": "#styleDefaults.promotedLink.startConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The SVG CSS style class to apply to the promoted link.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#styleDefaults.promotedLink.svgClassName"
                },
                "svgStyle": {
                  "description": "Specifies CSS styles of the promoted link.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#styleDefaults.promotedLink.svgStyle"
                },
                "width": {
                  "description": "Default link width in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 1,
                  "units": "pixels",
                  "help": "#styleDefaults.promotedLink.width"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "Specifies a function for a custom tooltip.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies touch response behavior.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "promotedLink": {
              "description": "Used for the promoted link tooltip - promoted link consists of a single link.",
              "type": "string",
              "help": "#translations.promotedLink"
            },
            "promotedLinkAriaDesc": {
              "description": "Used to describe promoted link type for accessibility.",
              "type": "string",
              "help": "#translations.promotedLinkAriaDesc"
            },
            "promotedLinks": {
              "description": "Used for the promoted link tooltip - promoted link consists of multiple links.",
              "type": "string",
              "help": "#translations.promotedLinks"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "zoomRenderer": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use nodeContent.zoomRenderer instead."
            }
          ],
          "description": "Specifies custom renderer for the diagram nodes used for zoom updates.",
          "type": "function|null",
          "displayName": "Zoom Renderer",
          "value": null,
          "help": "#zoomRenderer"
        },
        "zooming": {
          "description": "Specifies whether zooming is allowed in Diagram.",
          "type": "string",
          "displayName": "Zooming",
          "value": "none",
          "help": "#zooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getLink": {
          "description": "Returns an object for automation testing verification of the specified diagram link. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getLink",
          "params": [
            {
              "name": "linkIndex",
              "description": "Link index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getLinkCount": {
          "description": "Returns number of diagram links",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getLinkCount",
          "return": "number"
        },
        "getNode": {
          "description": "Returns an object for automation testing verification of the specified diagram node. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getNode",
          "params": [
            {
              "name": "nodeIndex",
              "description": "Node index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getNodeCount": {
          "description": "Returns number of diagram nodes",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getNodeCount",
          "return": "number"
        },
        "getPromotedLink": {
          "description": "Returns an object for automation testing verification of the promoted link between the specified nodes. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getPromotedLink",
          "params": [
            {
              "name": "startNodeIndex",
              "description": "Start node index",
              "type": "number"
            },
            {
              "name": "endNodeIndex",
              "description": "End node index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "description": "Event handler for when a node is about to collapse.",
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-before-collapse event has been deprecated. Lazy loading of data can be done through the data provider."
            }
          ],
          "help": "#event:beforeCollapse",
          "detail": {
            "nodeId": {
              "description": "the id of the collapsing object",
              "type": "any"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Event handler for when a node is about to expand.",
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-before-expand event has been deprecated. Lazy loading of data can be done through the data provider."
            }
          ],
          "help": "#event:beforeExpand",
          "detail": {
            "nodeId": {
              "description": "the id of the expanding object",
              "type": "any"
            }
          }
        },
        "ojBeforePanZoomReset": {
          "description": "Event that is fired before the panZoomState is reset.",
          "cancelable": true,
          "help": "#event:beforePanZoomReset"
        },
        "ojCollapse": {
          "description": "Event handler for after a node has collapsed.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-collapse event has been deprecated. Use on-expanded-changed instead."
            }
          ],
          "help": "#event:collapse",
          "detail": {
            "nodeId": {
              "description": "the id of the collapsed object",
              "type": "any"
            }
          }
        },
        "ojExpand": {
          "description": "Event handler for after a node has expanded.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-expand event has been deprecated. Use on-expanded-changed instead."
            }
          ],
          "help": "#event:expand",
          "detail": {
            "nodeId": {
              "description": "the id of the expanded object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating each diagram node. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeTemplate",
          "preferredContent": [
            "DiagramNodeElement"
          ],
          "data": {
            "data": {
              "description": "The data object for the current node.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node.",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data for the leaf and its parents. Eg: parentData[0] is the outermost parent and parentData[1] is the second outermost parent of the leaf.",
              "type": "array"
            },
            "parentKey": {
              "description": "The key of the parent item. The parent key is null for root nodes.",
              "type": "any"
            }
          }
        },
        "nodeContentTemplate": {
          "description": "The nodeContentTemplate slot is used to specify custom node content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeContentTemplate",
          "data": {
            "parentElement": {
              "description": "A parent group element that takes a custom SVG fragment as the node content. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "componentElement": {
              "description": "The diagram element.",
              "type": "Element"
            },
            "rootElement": {
              "description": "Null on initial rendering or SVG element for the node.",
              "type": "Element|null"
            },
            "data": {
              "description": "The data object for the node. If DataProvider is being used, this property contains template processed data.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node. This will only be set if an DataProvider is being used.",
              "type": "object|null"
            },
            "content": {
              "description": "An object that describes child content. The object has the following properties",
              "type": "object",
              "properties": {
                "element": {
                  "description": "SVG group element that contains child nodes for the container.",
                  "type": "Element"
                },
                "width": {
                  "description": "Width of the child content.",
                  "type": "number"
                },
                "height": {
                  "description": "Height of the child content.",
                  "type": "number"
                }
              }
            },
            "state": {
              "description": "An object that reflects the current state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the node is currently hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the node is currently selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the node is currently selected.",
                  "type": "boolean"
                },
                "expanded": {
                  "description": "True if the node is expanded.",
                  "type": "boolean"
                },
                "inActionableMode": {
                  "description": "True if the node is currently in actionable mode.",
                  "type": "boolean"
                },
                "zoom": {
                  "description": "Current zoom state.",
                  "type": "number"
                }
              }
            },
            "previousState": {
              "description": "An object that reflects the previous state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the node was previously hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the node was previously selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the node was previously selected.",
                  "type": "boolean"
                },
                "expanded": {
                  "description": "True if the node was previously expanded.",
                  "type": "boolean"
                },
                "inActionableMode": {
                  "description": "True if the node was previously in actionable mode.",
                  "type": "boolean"
                },
                "zoom": {
                  "description": "Previous zoom state.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "Node id.",
              "type": "any"
            },
            "type": {
              "description": "Object type = node.",
              "type": "string"
            },
            "renderDefaultFocus": {
              "description": "Function for rendering default focus effect for the node",
              "type": "function"
            },
            "renderDefaultHover": {
              "description": "Function for rendering default hover effect for the node",
              "type": "function"
            },
            "renderDefaultSelection": {
              "description": "Function for rendering default selection effect for the node",
              "type": "function"
            }
          }
        },
        "linkTemplate": {
          "description": "The linkTemplate slot is used to specify the template for creating each diagram link. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#linkTemplate",
          "preferredContent": [
            "DiagramLinkElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-diagram> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current link.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current link.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current link.",
              "type": "any"
            }
          }
        },
        "linkContentTemplate": {
          "description": "The linkContentTemplate slot is used to specify custom link content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#linkContentTemplate",
          "data": {
            "parentElement": {
              "description": "A parent group element that takes a custom SVG fragment as the link content. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "componentElement": {
              "description": "The diagram element.",
              "type": "Element"
            },
            "rootElement": {
              "description": "Null on initial rendering or SVG element for the link.",
              "type": "Element|null"
            },
            "data": {
              "description": "The data object for the link or an array of data objects for the promoted link. If DataProvider is being used, this property contains template processed data.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the link or an array of row data objects for the promoted link. This will only be set if an DataProvider is being used.",
              "type": "object|null"
            },
            "state": {
              "description": "An object that reflects the current state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the link is currently hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the link is currently selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the link is currently selected.",
                  "type": "boolean"
                },
                "inActionableMode": {
                  "description": "True if the link is currently in actionable mode.",
                  "type": "boolean"
                }
              }
            },
            "previousState": {
              "description": "An object that reflects the previous state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the link was previously hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the link was previously selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the link was previously selected.",
                  "type": "boolean"
                },
                "inActionableMode": {
                  "description": "True if the link was previously in actionable mode.",
                  "type": "boolean"
                }
              }
            },
            "id": {
              "description": "Link id.",
              "type": "any"
            },
            "type": {
              "description": "Object type is 'link' or 'promotedLink'.",
              "type": "string"
            },
            "points": {
              "description": "An array of points or a string with SVG path to use for rendering this link as set by diagram layout. When custom renderer is used for link creation, the property will contain an array of x and y points for the link start and link end calculated by Diagram.",
              "type": "array|string"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "componentElement": {
              "description": "The diagram element.",
              "type": "Element"
            },
            "data": {
              "description": "Relevant data for the object.",
              "type": "object|Array<Object>"
            },
            "id": {
              "description": "The id of the diagram object.",
              "type": "any"
            },
            "itemData": {
              "description": "The row data object for the object. This will only be set if an oj.DataProvider is being used.",
              "type": "object|Array<Object>"
            },
            "label": {
              "description": "The label of the diagram object.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "type": {
              "description": "The type of the diagram object.",
              "type": "string"
            }
          }
        }
      }
    },
    "oj-dialog": {
      "name": "oj-dialog",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Dialog",
      "implements": [
        "DialogElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdialog",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-dialog-footer-separator"
              ],
              "description": "Class used to specify a separator between the dialog body and the dialog footer. See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-dialog-title"
              ],
              "description": "Class used to format the dialog title. See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-progress-bar-embedded"
              ],
              "description": "Optional class used to format a progress bar when embedded in the dialog."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "12"
        },
        "oracle": {
          "icon": "oj-ux-ico-dialog",
          "uxSpecs": [
            "dialog"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-dialog-footer-separator",
          "kind": "class",
          "displayName": "Footer Separator",
          "description": "Class used to specify a separator between the dialog body and the dialog footer. See the Help documentation for more information.",
          "styleSelector": "oj-dialog > div",
          "help": "#oj-dialog-footer-separator"
        },
        {
          "name": "oj-dialog-title",
          "kind": "class",
          "displayName": "Dialog Title",
          "description": "Class used to format the dialog title. See the Help documentation for more information.",
          "styleSelector": "oj-dialog *",
          "help": "#oj-dialog-title"
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-progress-bar-embedded",
          "kind": "class",
          "displayName": "Embedded Progress Bar",
          "description": "Optional class used to format a progress bar when embedded in the dialog.",
          "help": "#oj-progress-bar-embedded"
        }
      ],
      "styleVariables": [
        {
          "description": "Dialog border radius",
          "name": "oj-dialog-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog background color",
          "name": "oj-dialog-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog border color",
          "name": "oj-dialog-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog box shadow",
          "name": "oj-dialog-box-shadow",
          "help": "#css-variables"
        },
        {
          "description": "Dialog header background color",
          "name": "oj-dialog-header-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Border color between the dialog header and body",
          "name": "oj-dialog-header-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog header padding",
          "name": "oj-dialog-header-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog body padding",
          "name": "oj-dialog-body-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog footer padding",
          "name": "oj-dialog-footer-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Dialog title font size",
          "name": "oj-dialog-title-font-size",
          "formats": [
            "length"
          ],
          "help": "#oj-dialog-css-set2"
        },
        {
          "description": "Dialog title line height",
          "name": "oj-dialog-title-line-height",
          "formats": [
            "number"
          ],
          "help": "#oj-dialog-css-set2"
        },
        {
          "description": "Dialog title font weight",
          "name": "oj-dialog-title-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-dialog-css-set2"
        },
        {
          "description": "Dialog title text color",
          "name": "oj-dialog-title-text-color",
          "formats": [
            "color"
          ],
          "help": "#oj-dialog-css-set2"
        },
        {
          "description": "Dialog cancel icon margin top",
          "name": "oj-dialog-cancel-icon-margin-top",
          "formats": [
            "length"
          ],
          "help": "#oj-dialog-css-set3"
        },
        {
          "description": "Dialog cancel icon margin end",
          "name": "oj-dialog-cancel-icon-margin-end",
          "formats": [
            "length"
          ],
          "help": "#oj-dialog-css-set3"
        }
      ],
      "description": "A dialog displays a popup window that provides information and gathers input from the application user.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDialog.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "dialogTitle",
            "initialVisibility",
            "style",
            "modality",
            "dragAffordance",
            "cancelBehavior",
            "resizeBehavior"
          ]
        }
      ],
      "properties": {
        "cancelBehavior": {
          "description": "Specifies the cancel behavior of the dialog. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Cancel Behavior",
          "help": "#cancelBehavior",
          "enumValues": [
            "escape",
            "icon",
            "none"
          ],
          "propertyEditorValues": {
            "escape": {
              "description": "The dialog will close when it has focus and user presses the escape (ESC) key. A close icon will not be created.",
              "displayName": "Escape"
            },
            "icon": {
              "description": "A close icon will automatically be created. The dialog will close when it has focus and user presses the escape (ESC) key.",
              "displayName": "Icon"
            },
            "none": {
              "description": "A close icon will not be created. No actions will be associated with the escape key.",
              "displayName": "None"
            }
          }
        },
        "dialogTitle": {
          "description": "Specify the title of the dialog. null is the default.",
          "type": "string|null",
          "displayName": "Dialog Title",
          "translatable": true,
          "help": "#dialogTitle"
        },
        "dragAffordance": {
          "description": "Specifies the drag affordance. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drag Affordance",
          "help": "#dragAffordance",
          "enumValues": [
            "none",
            "title-bar"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be draggable.",
              "displayName": "None"
            },
            "title-bar": {
              "description": "The dialog will be draggable by the title bar.",
              "displayName": "Title-bar"
            }
          }
        },
        "initialVisibility": {
          "description": "Set the initial visibility of the dialog.",
          "type": "string",
          "displayName": "Initial Visibility",
          "value": "hide",
          "help": "#initialVisibility",
          "enumValues": [
            "hide",
            "show"
          ],
          "propertyEditorValues": {
            "hide": {
              "description": "The dialog will stay hidden until the open() method is called.",
              "displayName": "Hide"
            },
            "show": {
              "description": "The dialog will automatically open upon initialization.",
              "displayName": "Show"
            }
          }
        },
        "modality": {
          "description": "Defines the modality of the dialog.",
          "type": "string",
          "displayName": "Modality",
          "value": "modal",
          "help": "#modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "propertyEditorValues": {
            "modal": {
              "description": "The dialog is modal. Interactions with other page elements are disabled. Modal dialogs overlay other page elements.",
              "displayName": "Modal"
            },
            "modeless": {
              "description": "Defines a modeless dialog.",
              "displayName": "Modeless"
            }
          }
        },
        "position": {
          "description": "Establishes the location that the dialog will appear relative to another element. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Position",
          "help": "#position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "#position.at",
              "properties": {
                "horizontal": {
                  "description": "",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "center",
                  "help": "#position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "center",
                  "help": "#position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "value": "fit",
              "help": "#position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "Shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "Flip the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipfit": {
                  "description": "First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "No collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the dialog to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "#position.my",
              "properties": {
                "horizontal": {
                  "description": "",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "center",
                  "help": "#position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "center",
                  "help": "#position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Specifies which element to position the dialog against. See the Help documentation for more information.",
              "type": "string|object",
              "displayName": "Of",
              "value": "window",
              "help": "#position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "#position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal alignment offset.",
                  "type": "number",
                  "displayName": "X",
                  "value": 0,
                  "help": "#position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "value": 0,
                  "help": "#position.offset.y"
                }
              }
            }
          }
        },
        "resizeBehavior": {
          "description": "Specifies the resizeBehavior of the dialog. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Resize Behavior",
          "help": "#resizeBehavior",
          "enumValues": [
            "none",
            "resizable"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be interactively resizable.",
              "displayName": "None"
            },
            "resizable": {
              "description": "The dialog will be interactively resizable.",
              "displayName": "Resizable"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "labelCloseIcon": {
              "description": "Label for the dialog close button.",
              "type": "string",
              "help": "#translations.labelCloseIcon"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the dialog.",
          "help": "#close",
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "isOpen": {
          "description": "Returns true if the dialog is currently open.",
          "help": "#isOpen",
          "return": "boolean"
        },
        "open": {
          "description": "Opens the dialog.",
          "help": "#open",
          "return": "void"
        },
        "refresh": {
          "description": "Refresh the dialog. Typically used after dynamic content is added to a dialog.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that triggered the animation.",
              "type": "\"open\"|\"close\""
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, It must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojBeforeClose": {
          "description": "Triggered before the dialog is dismissed via the close() method. The close can be cancelled by calling event.preventDefault().",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeClose",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojBeforeOpen": {
          "description": "Triggered before the dialog is launched via the open() method. The open can be cancelled by calling event.preventDefault().",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeOpen",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojClose": {
          "description": "Triggered after the dialog is dismissed via the close() method.",
          "eventGroup": "common",
          "bubbles": true,
          "help": "#event:close",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojFocus": {
          "description": "Triggered after focus has been transferred to the dialog.",
          "bubbles": true,
          "help": "#event:focus",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojOpen": {
          "description": "Triggered after the dialog is launched via the open() method.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:open",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojResize": {
          "description": "Triggered when the dialog is being resized. See the Help documentation for more information.",
          "bubbles": true,
          "help": "#event:resize",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        },
        "ojResizeStart": {
          "description": "Triggered when the user starts resizing the dialog. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:resizeStart",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        },
        "ojResizeStop": {
          "description": "Triggered when the user stops resizing the dialog. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:resizeStop",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the dialog's body. It is the same as the named \"body\" slot.",
          "displayName": "default",
          "help": "#Default"
        },
        "header": {
          "description": "The header slot is for the dialog's header area. See the Help documentation for more information.",
          "help": "#header"
        },
        "body": {
          "description": "The body slot is for the dialog's body area. See the Help documentation for more information.",
          "help": "#body"
        },
        "footer": {
          "description": "The footer slot is for the dialog's footer area. See the Help documentation for more information.",
          "help": "#footer"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-drawer-layout": {
      "name": "oj-drawer-layout",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "DrawerLayoutElement"
      ],
      "description": "A drawer layout displays drawers at 'start' or 'end' edges. A drawer is a panel that slides into the drawer layout.",
      "displayName": "Drawer Layout",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-drawer",
          "uxSpecs": [
            "drawer-layout"
          ]
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        },
        "vbdt": {
          "module": "ojs/ojdrawerlayout"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDrawerLayout.html",
      "since": "11.0.0",
      "slots": {
        "": {
          "description": "Specifies the default slot."
        },
        "start": {
          "description": "Container for Start drawer content."
        },
        "end": {
          "description": "Container for End drawer content."
        },
        "bottom": {
          "description": "Container for Bottom drawer content."
        }
      },
      "properties": {
        "startOpened": {
          "type": "boolean",
          "description": "Specifies the 'opened' state of the Start drawer.",
          "writeback": true,
          "value": false
        },
        "endOpened": {
          "type": "boolean",
          "description": "Specifies the 'opened' state of the End drawer.",
          "writeback": true,
          "value": false
        },
        "bottomOpened": {
          "type": "boolean",
          "description": "Specifies the 'opened' state of the Bottom drawer.",
          "writeback": true,
          "value": false
        },
        "startDisplay": {
          "type": "string",
          "description": "Specifies the display mode of the Start drawer.",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        },
        "endDisplay": {
          "type": "string",
          "description": "Specifies the display mode of the End drawer.",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        },
        "bottomDisplay": {
          "type": "string",
          "description": "Specifies the display mode of the Bottom drawer.",
          "enumValues": [
            "auto",
            "overlay",
            "reflow"
          ],
          "value": "auto"
        }
      },
      "events": {
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the drawer closes.",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "edge": {
              "type": "string",
              "enumValues": [
                "end",
                "start",
                "bottom"
              ]
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-drawer-popup": {
      "name": "oj-drawer-popup",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "DrawerPopupElement"
      ],
      "description": "A drawer popup is a panel that slides into the viewport. It can be placed at 'start', 'end' or 'bottom' edge and it always overlays the page.",
      "displayName": "Drawer Popup",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-drawer-popup",
          "uxSpecs": [
            "drawer-popup"
          ]
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        },
        "vbdt": {
          "module": "ojs/ojdrawerpopup"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojDrawerPopup.html",
      "since": "11.0.0",
      "slots": {
        "": {
          "description": "Specifies the default slot."
        }
      },
      "properties": {
        "opened": {
          "type": "boolean",
          "description": "Specifies the 'opened' state of the drawer.",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "getterOnly"
                }
              ]
            }
          },
          "writeback": true,
          "value": false
        },
        "edge": {
          "type": "string",
          "description": "Specifies at what edge the drawer opens.",
          "enumValues": [
            "end",
            "start",
            "bottom"
          ],
          "value": "start"
        },
        "modality": {
          "type": "string",
          "description": "Controls the modality of the drawer.",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "value": "modal"
        },
        "autoDismiss": {
          "type": "string",
          "description": "Controls the close auto-dismiss behaviour to close the drawer.",
          "enumValues": [
            "none",
            "focus-loss"
          ],
          "value": "focus-loss"
        },
        "closeGesture": {
          "type": "string",
          "description": "Controls the close gesture to close the drawer.",
          "enumValues": [
            "none",
            "swipe"
          ],
          "value": "swipe"
        }
      },
      "events": {
        "ojBeforeClose": {
          "cancelable": true,
          "description": "Triggered immediately before the drawer closes.",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-file-picker": {
      "name": "oj-file-picker",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "FilePickerElement"
      ],
      "description": "A file picker displays a clickable dropzone for selecting files from the device storage.",
      "displayName": "File Picker",
      "extension": {
        "vbdt": {
          "module": "ojs/ojfilepicker",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-filepicker-custom"
              ],
              "description": "Apply to a custom file picker if the entire dropzone is replaced with another clickable element like button or menu item."
            },
            {
              "styleGroup": [
                "oj-filepicker-dropzone"
              ],
              "description": "Apply to the dropzone of the file picker."
            },
            {
              "styleGroup": [
                "oj-filepicker-text"
              ],
              "description": "Apply to the dropzone text of the file picker."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-attach-file",
          "uxSpecs": [
            "file-picker"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojFilePicker.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "accept",
            "selectOn",
            "selectionMode",
            "disabled",
            "primaryText",
            "secondaryText"
          ]
        }
      ],
      "since": "4.0.0",
      "styleClasses": [
        {
          "name": "oj-filepicker-custom",
          "kind": "class",
          "displayName": "Custom",
          "description": "Apply to a custom file picker if the entire dropzone is replaced with another clickable element like button or menu item.\nNote that the oj-filepicker-custom class doesn't have to be specified in order to change the dropzone text.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "oj-filepicker-custom class has been deprecated. Class is no longer needed."
            }
          ],
          "help": "#oj-filepicker-custom"
        },
        {
          "name": "oj-filepicker-dropzone",
          "kind": "class",
          "displayName": "File Picker DropZone",
          "description": "Apply to the dropzone of the file picker.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "oj-filepicker-dropzone class has been deprecated. Class is no longer needed."
            }
          ],
          "help": "#oj-filepicker-dropzone"
        },
        {
          "name": "oj-filepicker-text",
          "kind": "class",
          "displayName": "File Picker Text",
          "description": "Apply to the dropzone text of the file picker.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "oj-filepicker-text class has been deprecated. Class is no longer needed."
            }
          ],
          "help": "#oj-filepicker-text"
        }
      ],
      "styleVariables": [
        {
          "name": "oj-file-picker-border-color",
          "description": "File picker border color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-file-picker-border-width",
          "description": "File picker border width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-file-picker-border-radius",
          "description": "File picker border radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        }
      ],
      "properties": {
        "accept": {
          "type": "Array<string>",
          "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types",
          "displayName": "Accept",
          "help": "#accept",
          "value": null
        },
        "capture": {
          "type": "string",
          "description": "Specifies the preferred facing mode for the device's media capture mechanism.",
          "displayName": "Capture",
          "help": "#capture",
          "propertyEditorValues": {
            "user": {
              "description": "Specifies user-facing as the preferred mode",
              "displayName": "User"
            },
            "environment": {
              "description": "Specifies environment-facing as the preferred mode",
              "displayName": "Environment"
            },
            "implementation": {
              "description": "Specifies an implementation-specific default as the preferred facing mode",
              "displayName": "Implementation"
            },
            "none": {
              "description": "No capture mechanism is used",
              "displayName": "None"
            }
          },
          "enumValues": [
            "none",
            "environment",
            "user",
            "implementation"
          ],
          "value": "none"
        },
        "disabled": {
          "type": "boolean",
          "description": "Disables the filepicker if set to true",
          "displayName": "Disabled",
          "help": "#disabled",
          "value": false
        },
        "primaryText": {
          "type": "string|function",
          "description": "The primary text for the default file picker.",
          "displayName": "Primary Text",
          "help": "#primaryText"
        },
        "secondaryText": {
          "type": "string|function",
          "description": "The secondary text for the default file picker.",
          "displayName": "Secondary Text",
          "help": "#secondaryText"
        },
        "selectOn": {
          "type": "string",
          "description": "The type of event to select the files.",
          "displayName": "Select On",
          "help": "#selectOn",
          "status": [
            {
              "type": "deprecated",
              "since": "13.1.0",
              "description": "Main use case was to turn off drag and drop for button filepicker.  The current recommendation for that use case is to use ojfilepickerutils with an oj-button."
            }
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "either click or drag and drop to select the files",
              "displayName": "Auto"
            },
            "click": {
              "description": "click to select the files",
              "displayName": "Click"
            },
            "clickAndDrop": {
              "description": "either click or drag and drop to select the files",
              "displayName": "Click And Drop"
            },
            "drop": {
              "description": "drag and drop the files",
              "displayName": "Drop"
            }
          },
          "enumValues": [
            "auto",
            "click",
            "drop",
            "clickAndDrop"
          ],
          "value": "auto"
        },
        "selectionMode": {
          "type": "string",
          "description": "Whether to allow single or multiple file selection.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "multiple": {
              "description": "multiple file selection",
              "displayName": "Multiple"
            },
            "single": {
              "description": "single file selection",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "slots": {
        "trigger": {
          "description": "The trigger slot is used to replace the default content of the file picker.",
          "help": "#trigger"
        }
      },
      "events": {
        "ojBeforeSelect": {
          "cancelable": true,
          "description": "Triggered before files are selected to allow for custom validation",
          "help": "#event:beforeSelect",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously.  The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "files": {
              "type": "FileList",
              "description": "The selected files"
            },
            "originalEvent": {
              "type": "Event"
            }
          }
        },
        "ojInvalidSelect": {
          "description": "Triggered when invalid files are selected",
          "help": "#event:invalidSelect",
          "detail": {
            "messages": {
              "type": "Array<any>",
              "description": "Messages that should be displayed to the user (e.g. in an oj-messages component) describing invalid files."
            },
            "originalEvent": {
              "type": "Event"
            },
            "until": {
              "type": "Promise",
              "description": "This property may be populated with a Promise to provide short-term feedback during a user interaction (typically drag and drop); the feedback should be cleared upon the resolution of this Promise."
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after the files are selected",
          "help": "#event:select",
          "detail": {
            "files": {
              "type": "FileList",
              "description": "The files that were just selected."
            },
            "originalEvent": {
              "type": "Event"
            }
          }
        }
      },
      "methods": {
        "_doSelectHelper": {
          "visible": false,
          "params": [
            {
              "name": "filelist",
              "type": "FileList"
            }
          ],
          "return": "any"
        },
        "focus": {
          "return": "any"
        },
        "blur": {
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-film-strip": {
      "name": "oj-film-strip",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Film Strip",
      "implements": [
        "FilmStripElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojfilmstrip",
          "defaultColumns": "12",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-film-strip"
        }
      },
      "description": "A filmstrip lays out its children in a single row or column across logical pages and allows navigating through them.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojFilmStrip.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "maxItemsPerPage",
            "arrowPlacement",
            "arrowVisibility",
            "looping"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "currentItem"
          ]
        }
      ],
      "properties": {
        "arrowPlacement": {
          "description": "Specifies the placement of the navigation arrows.",
          "type": "string",
          "displayName": "Arrow Placement",
          "value": "adjacent",
          "help": "#arrowPlacement",
          "enumValues": [
            "adjacent",
            "overlay"
          ],
          "propertyEditorValues": {
            "adjacent": {
              "description": "Arrows are outside, adjacent to the filmStrip content. The arrows are still inside the bounds of the filmStrip element itself.",
              "displayName": "Adjacent"
            },
            "overlay": {
              "description": "Arrows are inside, overlaying the filmStrip content.",
              "displayName": "Overlay"
            }
          }
        },
        "arrowVisibility": {
          "description": "Specifies the visibility of the navigation arrows.",
          "type": "string",
          "displayName": "Arrow Visibility",
          "value": "auto",
          "help": "#arrowVisibility",
          "enumValues": [
            "auto",
            "hidden",
            "hover",
            "visible"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Behaves as if the value were visible when the arrow-placement attribute is set to adjacent, and hover when the arrow-placement attribute is set to overlay.",
              "displayName": "Auto"
            },
            "hidden": {
              "description": "Arrows are hidden.",
              "displayName": "Hidden"
            },
            "hover": {
              "description": "Arrows are visible when the mouse is over the filmStrip, and hidden otherwise.",
              "displayName": "Hover"
            },
            "visible": {
              "description": "Arrows are visible.",
              "displayName": "Visible"
            }
          }
        },
        "currentItem": {
          "description": "Specifies the child item whose logical page should be displayed.",
          "type": "object",
          "displayName": "Current Item",
          "value": {
            "index": 0
          },
          "writeback": true,
          "help": "#currentItem",
          "properties": {
            "id": {
              "description": "string id of the item",
              "type": "string",
              "displayName": "Id"
            },
            "index": {
              "description": "numeric 0-based index of the item",
              "type": "number",
              "displayName": "Index"
            }
          }
        },
        "looping": {
          "description": "Specifies the navigation looping behavior",
          "type": "string",
          "displayName": "Looping",
          "value": "off",
          "help": "#looping",
          "enumValues": [
            "off",
            "page"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Navigation is bounded between first and last page and can't go any further in the direction of navigation.",
              "displayName": "Off"
            },
            "page": {
              "description": "Navigation is not bounded between first and last page and can go further in the direction of navigation. This lets the user loop around from first page to last page, or from last page to first page.",
              "displayName": "Page"
            }
          }
        },
        "maxItemsPerPage": {
          "description": "Specifies the maximum number of child items shown in a logical page.",
          "type": "number",
          "displayName": "Max Items Per Page",
          "value": 0,
          "minimum": 0,
          "help": "#maxItemsPerPage"
        },
        "orientation": {
          "description": "Specifies the orientation of the FilmStrip.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the FilmStrip horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the FilmStrip vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "labelAccArrowNextPage": {
              "description": "Accessible label for the next page navigation arrow.",
              "type": "string",
              "help": "#translations.labelAccArrowNextPage"
            },
            "labelAccArrowPreviousPage": {
              "description": "Accessible label for the previous page navigation arrow.",
              "type": "string",
              "help": "#translations.labelAccArrowPreviousPage"
            },
            "labelAccFilmStrip": {
              "description": "Accessible page information label for the filmstrip element.",
              "type": "string",
              "help": "#translations.labelAccFilmStrip"
            },
            "tipArrowNextPage": {
              "description": "Tooltip for the next page navigation arrow.",
              "type": "string",
              "help": "#translations.tipArrowNextPage"
            },
            "tipArrowPreviousPage": {
              "description": "Tooltip for the previous page navigation arrow.",
              "type": "string",
              "help": "#translations.tipArrowPreviousPage"
            }
          }
        }
      },
      "methods": {
        "getItemsPerPage": {
          "description": "Get the actual number of items shown per logical page.",
          "help": "#getItemsPerPage",
          "return": "number"
        },
        "getPagingModel": {
          "description": "Get the PagingModel created and used by the FilmStrip.",
          "help": "#getPagingModel",
          "return": "object"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the FilmStrip.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-film-strip> element lays out its children in a single row or column across logical pages and allows navigating through them.",
          "displayName": "default",
          "help": "#Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-form-layout": {
      "name": "oj-form-layout",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Form Layout",
      "implements": [
        "FormLayoutElement"
      ],
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojformlayout",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-formlayout-full-width"
              ],
              "description": "In Redwood by default a form layout has a max width, add this class if you'd like to opt out and have the form layout to stretch the full width."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-form-layout",
          "uxSpecs": [
            "form-layout"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-formlayout-full-width",
          "kind": "class",
          "displayName": "Form Layout Full Width",
          "description": "In Redwood by default a form layout has a max width, add this class if you'd like to opt out and have the form layout to stretch the full width.",
          "help": "#oj-formlayout-full-width"
        }
      ],
      "styleVariables": [
        {
          "description": "Bottom margin of each row in a form layout",
          "name": "oj-form-layout-margin-bottom",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout column min width",
          "name": "oj-form-layout-column-min-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout column max width",
          "name": "oj-form-layout-column-max-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout column min width when label-edge is set to start",
          "name": "oj-form-layout-start-edge-column-min-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout column max width when label-edge is set to start",
          "name": "oj-form-layout-start-edge-column-max-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Gutter between form layout columns",
          "name": "oj-form-layout-column-gutter",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Vertical padding between the label and value when label-edge is set to top in a form layout",
          "name": "oj-form-layout-top-edge-label-to-value-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label text align when label-edge is set to start in a form layout",
          "name": "oj-form-layout-start-edge-label-text-align",
          "keywords": [
            "start",
            "end"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Value text align when label-edge is set to start in a form layout",
          "name": "oj-form-layout-start-edge-value-text-align",
          "keywords": [
            "start",
            "end"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Horizontal padding between the label and value when label-edge is set to start in a form layout",
          "name": "oj-form-layout-start-edge-label-to-value-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout horizontal margin",
          "name": "oj-form-layout-horizontal-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout divider width",
          "name": "oj-form-layout-divider-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Form layout divider margin",
          "name": "oj-form-layout-divider-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A form layout manages the layout of labels and fields in a form.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojFormLayout.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "maxColumns",
            "labelEdge",
            "labelWidth",
            "readonly"
          ]
        }
      ],
      "properties": {
        "colspanWrap": {
          "description": "Specifies how to fit components with colspan attribute in the form layout, when there are fewer columns left in the current row than the colspan value specifies.",
          "type": "string",
          "displayName": "Colspan Wrap",
          "help": "#colspanWrap",
          "enumValues": [
            "nowrap",
            "wrap"
          ],
          "propertyEditorValues": {
            "nowrap": {
              "description": "The component will occupy the remaining columns in the current row.",
              "displayName": "Nowrap"
            },
            "wrap": {
              "description": "The component will start from the first column of the next row.",
              "displayName": "Wrap"
            }
          }
        },
        "columns": {
          "description": "Specifies the exact number of columns. This attribute overrides max-columns if it is positive.",
          "type": "number",
          "displayName": "Columns",
          "value": 0,
          "help": "#columns"
        },
        "direction": {
          "description": "Specifies the layout direction of the form layout children.",
          "type": "string",
          "displayName": "Direction",
          "help": "#direction",
          "enumValues": [
            "column",
            "row"
          ],
          "propertyEditorValues": {
            "column": {
              "description": "Components are laid out in columns",
              "displayName": "Column"
            },
            "row": {
              "description": "Components are laid out in rows",
              "displayName": "Row"
            }
          }
        },
        "labelEdge": {
          "description": "Specifies how the label is created and aligned with its form control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "oj-form-layout will not create any label. Label will be created by the form control if the form control has its label-edge set to \"inside\". Please see the specific form control's label-edge attribute documentation for details.",
              "displayName": "Inside"
            },
            "start": {
              "description": "oj-form-layout will create a label that's before the start of the form control if the form control's label-edge is not explicitly set. If the form control specifies \"inside\" or \"none\" as its label-edge, no label will be created by oj-form-layout.",
              "displayName": "Start"
            },
            "top": {
              "description": "oj-form-layout will create a label that's on top of the form control if the form control‘s label-edge is not explicitly set. If the form control specifies \"inside\" or \"none\" as its label-edge, no label will be created by oj-form-layout.",
              "displayName": "Top"
            }
          }
        },
        "labelWidth": {
          "description": "Specifies the label width. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Width",
          "value": "33%",
          "help": "#labelWidth"
        },
        "labelWrapping": {
          "description": "Specifies if the label text should wrap or truncate.",
          "type": "string",
          "displayName": "Label Wrapping",
          "value": "wrap",
          "help": "#labelWrapping",
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will truncate if needed",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed",
              "displayName": "Wrap"
            }
          }
        },
        "maxColumns": {
          "description": "Specifies the maximum number of columns. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max Columns",
          "value": 1,
          "minimum": 1,
          "help": "#maxColumns"
        },
        "readonly": {
          "description": "Specifies whether the form is readonly. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "efficient",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "messages, help, hints, and required are all shown inline under the field with reserved space underneath.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "If reflow, messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-form-layout> element only accepts element children in the Default slot. Content in <oj-form-layout>'s Default slot will be laid out in a row/column style form layout.",
          "displayName": "default",
          "help": "#Default"
        }
      }
    },
    "oj-gantt-dependency": {
      "name": "oj-gantt-dependency",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Gantt Dependency",
      "implements": [
        "GanttDependencyElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "The oj-gantt-dependency element is used to declare properties for gantt dependency lines. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojGanttDependency.html",
      "properties": {
        "predecessorTaskId": {
          "description": "The identifier for the predecessor task. This must reference a task in Gantt.",
          "type": "any",
          "displayName": "Predecessor Task Id",
          "help": "#predecessorTaskId"
        },
        "shortDesc": {
          "description": "The description of the dependency line. This is used for accessibility.",
          "type": "string",
          "displayName": "Short Desc",
          "value": null,
          "help": "#shortDesc"
        },
        "successorTaskId": {
          "description": "The identifier for the successor task. This must reference a task in Gantt.",
          "type": "any",
          "displayName": "Successor Task Id",
          "help": "#successorTaskId"
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes to apply to the dependency line.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the dependency line. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "type": {
          "description": "The type of dependency.",
          "type": "string",
          "displayName": "Type",
          "value": "finishStart",
          "help": "#type",
          "enumValues": [
            "finishFinish",
            "finishStart",
            "startFinish",
            "startStart"
          ],
          "propertyEditorValues": {
            "finishFinish": {
              "description": "predecessor task must finish before successor task can finish",
              "displayName": "Finish-to-Finish"
            },
            "finishStart": {
              "description": "predecessor task must finish before successor task can start",
              "displayName": "Finish-to-Start"
            },
            "startFinish": {
              "description": "predecessor task must start before successor task can finish",
              "displayName": "Start-to-Finish"
            },
            "startStart": {
              "description": "predecessor task must start before successor task can start",
              "displayName": "Start-to-Start"
            }
          }
        }
      }
    },
    "oj-gantt-reference-object": {
      "name": "oj-gantt-reference-object",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Gantt Reference Object",
      "implements": [
        "GanttReferenceObjectElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "12.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "The oj-gantt-reference-object element is used to declare properties for gantt row reference objects. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojGanttReferenceObject.html",
      "properties": {
        "end": {
          "description": "The end time value of this reference object. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "#end"
        },
        "start": {
          "description": "The start time value of this reference object. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "#start"
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        }
      }
    },
    "oj-gantt-row": {
      "name": "oj-gantt-row",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Gantt Row",
      "implements": [
        "GanttRowElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "The oj-gantt-row element is used to declare properties for gantt rows. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojGanttRow.html",
      "properties": {
        "label": {
          "description": "The label associated with the row.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelStyle": {
          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "#labelStyle"
        },
        "referenceObjects": {
          "description": "The reference objects associated with the row. This is optional and is only used if data is set using row-data attribute.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "#referenceObjects"
        },
        "shortDesc": {
          "description": "The description of the row. This is used for accessibility.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": null,
          "help": "#shortDesc"
        },
        "tasks": {
          "description": "The tasks associated with the row. This is required if data is set using row-data attribute.",
          "type": "Array<Object>",
          "displayName": "Tasks",
          "value": [],
          "help": "#tasks"
        }
      }
    },
    "oj-gantt-task": {
      "name": "oj-gantt-task",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Gantt Task",
      "implements": [
        "GanttTaskElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "The oj-gantt-task element is used to declare properties for gantt tasks. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojGanttTask.html",
      "properties": {
        "attribute": {
          "description": "Specifies the attribute of the task.",
          "type": "object",
          "displayName": "Attribute",
          "help": "#attribute",
          "properties": {
            "rendered": {
              "description": "Specifies whether the attribute bar is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "#attribute.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "shortDesc": {
              "description": "The description of the attribute.",
              "type": "string|function",
              "displayName": "Short Desc",
              "value": null,
              "help": "#attribute.shortDesc"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the attribute.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#attribute.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the attribute.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#attribute.svgStyle"
            }
          }
        },
        "baseline": {
          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
          "type": "object",
          "displayName": "Baseline",
          "help": "#baseline",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#baseline.borderRadius"
            },
            "end": {
              "description": "The end time of the baseline. See the Help documentation for more information.",
              "type": "string",
              "displayName": "End",
              "value": "",
              "format": "date-time",
              "help": "#baseline.end"
            },
            "height": {
              "description": "The height of the baseline in pixels.",
              "type": "number",
              "displayName": "Height",
              "units": "pixels",
              "help": "#baseline.height"
            },
            "start": {
              "description": "The start time of the baseline. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Start",
              "value": "",
              "format": "date-time",
              "help": "#baseline.start"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#baseline.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the baseline.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#baseline.svgStyle"
            }
          }
        },
        "borderRadius": {
          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
          "type": "string",
          "displayName": "Border Radius",
          "help": "#borderRadius"
        },
        "downtime": {
          "description": "Specifies the downtime of the task.",
          "type": "object",
          "displayName": "Downtime",
          "help": "#downtime",
          "properties": {
            "end": {
              "description": "The end time of the downtime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "End",
              "value": "",
              "format": "date-time",
              "help": "#downtime.end"
            },
            "start": {
              "description": "The start time of the downtime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Start",
              "value": "",
              "format": "date-time",
              "help": "#downtime.start"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the downtime.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#downtime.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the downtime.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#downtime.svgStyle"
            }
          }
        },
        "end": {
          "description": "The task end time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "#end"
        },
        "height": {
          "description": "The task height, in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Height",
          "units": "pixels",
          "help": "#height"
        },
        "label": {
          "description": "The label associated with the task.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelPosition": {
          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
          "type": "string|Array<string>",
          "displayName": "Label Position",
          "help": "#labelPosition",
          "enumValues": [
            "end",
            "innerCenter",
            "innerEnd",
            "innerStart",
            "none",
            "start"
          ],
          "propertyEditorValues": {
            "end": {
              "displayName": "End"
            },
            "innerCenter": {
              "displayName": "Inner Center"
            },
            "innerEnd": {
              "displayName": "Inner End"
            },
            "innerStart": {
              "displayName": "Inner Start"
            },
            "none": {
              "displayName": "None"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "#labelStyle"
        },
        "overlap": {
          "description": "Configures the placement of this task relative to a task it overlaps with.",
          "type": "object",
          "displayName": "Overlap",
          "help": "#overlap",
          "properties": {
            "behavior": {
              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Behavior",
              "help": "#overlap.behavior",
              "enumValues": [
                "auto",
                "overlay",
                "stack",
                "stagger"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "overlay": {
                  "displayName": "Overlay"
                },
                "stack": {
                  "displayName": "Stack"
                },
                "stagger": {
                  "displayName": "Stagger"
                }
              }
            }
          }
        },
        "overtime": {
          "description": "Specifies the overtime of the task.",
          "type": "object",
          "displayName": "Overtime",
          "help": "#overtime",
          "properties": {
            "end": {
              "description": "The end time of the overtime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "End",
              "value": "",
              "format": "date-time",
              "help": "#overtime.end"
            },
            "start": {
              "description": "The start time of the overtime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Start",
              "value": "",
              "format": "date-time",
              "help": "#overtime.start"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the overtime.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#overtime.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the overtime.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#overtime.svgStyle"
            }
          }
        },
        "progress": {
          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
          "type": "object",
          "displayName": "Progress",
          "help": "#progress",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#progress.borderRadius"
            },
            "height": {
              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Height",
              "help": "#progress.height"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#progress.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS inline style to apply to the progress bar.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#progress.svgStyle"
            },
            "value": {
              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
              "type": "number",
              "displayName": "Value",
              "value": null,
              "help": "#progress.value"
            }
          }
        },
        "rowId": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Set the data using the row-data attribute instead of task-data, and specify task-id instead of this attribute."
            }
          ],
          "description": "The id for the row the task belongs to. This is required if data is set using task-data attribute.",
          "type": "any",
          "displayName": "Row Id",
          "help": "#rowId"
        },
        "shortDesc": {
          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": null,
          "help": "#shortDesc"
        },
        "start": {
          "description": "The task start time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "#start"
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes defining the style of the task.",
          "type": "string",
          "displayName": "SVG Class Name",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the task.",
          "type": "object",
          "displayName": "SVG Style",
          "help": "#svgStyle"
        },
        "taskId": {
          "description": "The id of the task. This is required if data is set using row-data attribute.",
          "type": "string",
          "displayName": "Task Id",
          "help": "#taskId"
        },
        "type": {
          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Type",
          "help": "#type",
          "enumValues": [
            "auto",
            "milestone",
            "normal",
            "summary"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "milestone": {
              "displayName": "Milestone"
            },
            "normal": {
              "displayName": "Normal"
            },
            "summary": {
              "displayName": "Summary"
            }
          }
        }
      }
    },
    "oj-gantt": {
      "name": "oj-gantt",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Gantt",
      "implements": [
        "GanttElement"
      ],
      "type": "core",
      "since": "2.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt",
          "defaultColumns": "12",
          "minColumns": "12"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart-gantt",
          "uxSpecs": [
            "data-visualization-gantt"
          ]
        }
      },
      "description": "A gantt displays scheduling information graphically, making it easier to plan, coordinate, and track various tasks and resources.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojGantt.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "start",
            "end",
            "gridlines.horizontal",
            "gridlines.vertical",
            "majorAxis.scale",
            "majorAxis.zoomOrder",
            "minorAxis.scale",
            "minorAxis.zoomOrder",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "rowData",
            "taskData",
            "dependencyData",
            "selection",
            "expanded"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the dependencyTemplate, taskTemplate, or rowTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "axisPosition": {
          "description": "The position of the major and minor axis.",
          "type": "string",
          "displayName": "Axis Position",
          "value": "top",
          "help": "#axisPosition",
          "enumValues": [
            "bottom",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "dependencies": {
          "description": "An array of objects that defines dependencies between tasks. See the Help documentation for more information.",
          "type": "Array<Object>|Promise",
          "displayName": "Dependencies",
          "value": null,
          "help": "#dependencies",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The identifier for the dependency line. This must be unique across all dependency lines in Gantt. The id should be set by the application if the dependency-data DataProvider is not being used. The row key will be used as id in the case.",
                  "type": "any",
                  "displayName": "Id"
                },
                "predecessorTaskId": {
                  "description": "The identifier for the predecessor task. This must reference a task in Gantt.",
                  "type": "any",
                  "displayName": "Predecessor Task Id"
                },
                "shortDesc": {
                  "description": "The description of the dependency line. This is used for accessibility.",
                  "type": "string",
                  "displayName": "Short Desc",
                  "value": null
                },
                "successorTaskId": {
                  "description": "The identifier for the successor task. This must reference a task in Gantt.",
                  "type": "any",
                  "displayName": "Successor Task Id"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes to apply to the dependency line.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the dependency line. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {}
                },
                "type": {
                  "description": "The type of dependency.",
                  "type": "string",
                  "displayName": "Type",
                  "value": "finishStart",
                  "enumValues": [
                    "finishFinish",
                    "finishStart",
                    "startFinish",
                    "startStart"
                  ],
                  "propertyEditorValues": {
                    "finishFinish": {
                      "description": "predecessor task must finish before successor task can finish",
                      "displayName": "Finish-to-Finish"
                    },
                    "finishStart": {
                      "description": "predecessor task must finish before successor task can start",
                      "displayName": "Finish-to-Start"
                    },
                    "startFinish": {
                      "description": "predecessor task must start before successor task can finish",
                      "displayName": "Start-to-Finish"
                    },
                    "startStart": {
                      "description": "predecessor task must start before successor task can start",
                      "displayName": "Start-to-Start"
                    }
                  }
                }
              }
            }
          }
        },
        "dependencyData": {
          "description": "Specifies the DataProvider for the dependencies of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dependency Data",
          "value": null,
          "help": "#dependencyData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dependencyLineShape": {
          "description": "Specifies the shape of the dependency lines.",
          "type": "string",
          "displayName": "Dependency Line Shape",
          "value": "rectilinear",
          "help": "#dependencyLineShape",
          "enumValues": [
            "rectilinear",
            "straight"
          ],
          "propertyEditorValues": {
            "rectilinear": {
              "displayName": "Rectilinear"
            },
            "straight": {
              "displayName": "Straight"
            }
          }
        },
        "dnd": {
          "description": "Enables drag and drop functionality.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "move": {
              "description": "Defines a subset of high level configurations for moving elements to another location within the Gantt.",
              "type": "object",
              "displayName": "Move",
              "help": "#dnd.move",
              "properties": {
                "tasks": {
                  "description": "Enable or disable moving the non-baseline portions of selected tasks to a different location within the same Gantt.",
                  "type": "string",
                  "displayName": "Tasks",
                  "value": "disabled",
                  "help": "#dnd.move.tasks",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Disable moving selected tasks",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enable moving selected tasks",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "dragMode": {
          "description": "Specifies the action that is performed when a drag occurs.",
          "type": "string",
          "displayName": "Drag Mode",
          "value": "pan",
          "help": "#dragMode",
          "enumValues": [
            "pan",
            "select"
          ],
          "propertyEditorValues": {
            "pan": {
              "displayName": "Pan"
            },
            "select": {
              "displayName": "Select"
            }
          }
        },
        "end": {
          "description": "The end time of the Gantt. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#end"
        },
        "expanded": {
          "description": "Specifies the key set of ids for expanded Gantt items.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "gridlines": {
          "description": "An object specifying whether to display or hide the horizontal and vertical grid lines.",
          "type": "object",
          "displayName": "Gridlines",
          "help": "#gridlines",
          "properties": {
            "horizontal": {
              "description": "Specifies whether to show horizontal gridlines.",
              "type": "string",
              "displayName": "Horizontal",
              "value": "auto",
              "help": "#gridlines.horizontal",
              "enumValues": [
                "auto",
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "hidden": {
                  "displayName": "Hidden"
                },
                "visible": {
                  "displayName": "Visible"
                }
              }
            },
            "vertical": {
              "description": "Specifies whether to show vertical gridlines.",
              "type": "string",
              "displayName": "Vertical",
              "value": "auto",
              "help": "#gridlines.vertical",
              "enumValues": [
                "auto",
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "hidden": {
                  "displayName": "Hidden"
                },
                "visible": {
                  "displayName": "Visible"
                }
              }
            }
          }
        },
        "majorAxis": {
          "description": "Specifies the major time axis. If not specified, no major time axis is shown.",
          "type": "object",
          "displayName": "Major Axis",
          "help": "#majorAxis",
          "properties": {
            "converter": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "11.0.0",
                  "description": "this value will be removed in the future",
                  "target": "propertyType",
                  "value": [
                    "oj.Converter<string>"
                  ]
                }
              ],
              "description": "An object used to format the major axis labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "help": "#majorAxis.converter",
              "properties": {
                "days": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Days"
                },
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Default"
                },
                "hours": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Hours"
                },
                "minutes": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Minutes"
                },
                "months": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Months"
                },
                "quarters": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Quarters"
                },
                "seconds": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Seconds"
                },
                "weeks": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Weeks"
                },
                "years": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Years"
                }
              }
            },
            "height": {
              "description": "Specifies the major axis height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "#majorAxis.height"
            },
            "scale": {
              "description": "Specifies the major axis time scale.",
              "type": "string|DvtTimeComponentScale",
              "displayName": "Scale",
              "value": null,
              "help": "#majorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "zoomOrder": {
              "description": "An array of scales used for zooming from longest to shortest. See the Help documentation for more information.",
              "type": "Array<(string|DvtTimeComponentScale)>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "#majorAxis.zoomOrder"
            }
          }
        },
        "minorAxis": {
          "description": "Specifies the minor time axis. This is required for the Gantt to render properly.",
          "type": "object",
          "displayName": "Minor Axis",
          "help": "#minorAxis",
          "properties": {
            "converter": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "11.0.0",
                  "description": "this value will be removed in the future",
                  "target": "propertyType",
                  "value": [
                    "oj.Converter<string>"
                  ]
                }
              ],
              "description": "An object used to format the minor axis labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "help": "#minorAxis.converter",
              "properties": {
                "days": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Days"
                },
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Default"
                },
                "hours": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Hours"
                },
                "minutes": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Minutes"
                },
                "months": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Months"
                },
                "quarters": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Quarters"
                },
                "seconds": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Seconds"
                },
                "weeks": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Weeks"
                },
                "years": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Years"
                }
              }
            },
            "height": {
              "description": "Specifies the minor axis height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "#minorAxis.height"
            },
            "scale": {
              "description": "Specifies the minor axis time scale. This is required for the Gantt to render properly.",
              "type": "string|DvtTimeComponentScale",
              "displayName": "Scale",
              "value": null,
              "required": true,
              "help": "#minorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "zoomOrder": {
              "description": "An array of scales used for zooming from longest to shortest. See the Help documentation for more information.",
              "type": "Array<(string|DvtTimeComponentScale)>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "#minorAxis.zoomOrder"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the Gantt. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "#referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "end": {
                  "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                  "type": "string",
                  "displayName": "End"
                },
                "label": {
                  "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                  "type": "string",
                  "displayName": "Label"
                },
                "shortDesc": {
                  "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "displayName": "Short Desc"
                },
                "start": {
                  "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                  "type": "string",
                  "displayName": "Start"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "type": {
                  "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                  "type": "string",
                  "displayName": "Type",
                  "value": "line",
                  "enumValues": [
                    "area",
                    "line"
                  ]
                },
                "value": {
                  "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "rowAxis": {
          "description": "Specifies properties for the row labels region.",
          "type": "object",
          "displayName": "Row Axis",
          "help": "#rowAxis",
          "properties": {
            "label": {
              "description": "Specifies the properties of the row labels.",
              "type": "object",
              "displayName": "Label",
              "help": "#rowAxis.label",
              "properties": {
                "renderer": {
                  "description": "An optional function that returns custom content for the row label. The custom content must be an SVG element.",
                  "type": "function",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "#rowAxis.label.renderer"
                }
              }
            },
            "maxWidth": {
              "description": "Specifies the maximum width of the region in pixels or as a percentage of the element width. If 'none', then the width has no maximum value. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Max Width",
              "value": "none",
              "help": "#rowAxis.maxWidth"
            },
            "rendered": {
              "description": "Specifies whether row labels are rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "#rowAxis.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "width": {
              "description": "Specifies the width of the region in pixels or as a percentage of the element width. If 'max-content', then the width of the widest label is used. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Width",
              "value": "max-content",
              "help": "#rowAxis.width"
            }
          }
        },
        "rowData": {
          "description": "Specifies the DataProvider for the rows of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Row Data",
          "value": null,
          "help": "#rowData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "rowDefaults": {
          "description": "Specifies default styling for rows in the Gantt.",
          "type": "object",
          "displayName": "Row Defaults",
          "help": "#rowDefaults",
          "properties": {
            "height": {
              "description": "Specifies the default row height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "#rowDefaults.height"
            }
          }
        },
        "rows": {
          "description": "An array of objects used to define rows and tasks within rows. See the Help documentation for more information.",
          "type": "Array<Object>|Promise",
          "displayName": "Rows",
          "value": null,
          "help": "#rows",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "displayName": "Label",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Label Style",
                  "value": {}
                },
                "referenceObjects": {
                  "description": "An array of reference objects associated with the row.",
                  "type": "Array<Object>",
                  "displayName": "Reference Objects",
                  "properties": {
                    "end": {
                      "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                      "type": "string",
                      "displayName": "End"
                    },
                    "label": {
                      "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                      "type": "string",
                      "displayName": "Label"
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc"
                    },
                    "start": {
                      "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                      "type": "string",
                      "displayName": "Start"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "type": {
                      "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "enumValues": [
                        "area",
                        "line"
                      ]
                    },
                    "value": {
                      "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                      "type": "string",
                      "displayName": "Value"
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of the row. This is used for accessibility.",
                  "type": "string|function",
                  "displayName": "Short Desc",
                  "value": null
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown.",
                  "type": "Array<Object>",
                  "displayName": "Tasks",
                  "properties": {
                    "attribute": {
                      "description": "Specifies the attribute of the task.",
                      "type": "object",
                      "displayName": "Attribute",
                      "properties": {
                        "rendered": {
                          "description": "Specifies whether the attribute bar is rendered.",
                          "type": "string",
                          "displayName": "Rendered",
                          "value": "off",
                          "enumValues": [
                            "off",
                            "on"
                          ],
                          "propertyEditorValues": {
                            "off": {
                              "displayName": "Off"
                            },
                            "on": {
                              "displayName": "On"
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the attribute.",
                          "type": "string|function",
                          "displayName": "Short Desc",
                          "value": null
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                          "type": "string",
                          "displayName": "SVG Class Name"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the attribute.",
                          "type": "object",
                          "displayName": "SVG Style"
                        }
                      }
                    },
                    "baseline": {
                      "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                      "type": "object",
                      "displayName": "Baseline",
                      "properties": {
                        "borderRadius": {
                          "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                          "type": "string",
                          "displayName": "Border Radius"
                        },
                        "end": {
                          "description": "The end time of the baseline. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "End",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The height of the baseline in pixels.",
                          "type": "number",
                          "displayName": "Height",
                          "units": "pixels"
                        },
                        "start": {
                          "description": "The start time of the baseline. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Start",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                          "type": "string",
                          "displayName": "SVG Class Name"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the baseline.",
                          "type": "object",
                          "displayName": "SVG Style"
                        }
                      }
                    },
                    "borderRadius": {
                      "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                      "type": "string",
                      "displayName": "Border Radius"
                    },
                    "downtime": {
                      "description": "Specifies the downtime of the task.",
                      "type": "object",
                      "displayName": "Downtime",
                      "properties": {
                        "end": {
                          "description": "The end time of the downtime. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "End",
                          "value": "",
                          "format": "date-time"
                        },
                        "start": {
                          "description": "The start time of the downtime. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Start",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                          "type": "string",
                          "displayName": "SVG Class Name"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the downtime.",
                          "type": "object",
                          "displayName": "SVG Style"
                        }
                      }
                    },
                    "end": {
                      "description": "The task end time. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "End",
                      "value": "",
                      "format": "date-time"
                    },
                    "height": {
                      "description": "The task height, in pixels. See the Help documentation for more information.",
                      "type": "number",
                      "displayName": "Height",
                      "units": "pixels"
                    },
                    "id": {
                      "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "label": {
                      "description": "The label associated with the task.",
                      "type": "string",
                      "displayName": "Label",
                      "value": ""
                    },
                    "labelPosition": {
                      "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Label Position",
                      "enumValues": [
                        "end",
                        "innerCenter",
                        "innerEnd",
                        "innerStart",
                        "none",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "end": {
                          "displayName": "End"
                        },
                        "innerCenter": {
                          "displayName": "Inner Center"
                        },
                        "innerEnd": {
                          "displayName": "Inner End"
                        },
                        "innerStart": {
                          "displayName": "Inner Start"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "start": {
                          "displayName": "Start"
                        }
                      }
                    },
                    "labelStyle": {
                      "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                      "type": "object",
                      "displayName": "Label Style",
                      "value": {}
                    },
                    "overlap": {
                      "description": "Configures the placement of this task relative to a task it overlaps with.",
                      "type": "object",
                      "displayName": "Overlap",
                      "properties": {
                        "behavior": {
                          "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Behavior",
                          "enumValues": [
                            "auto",
                            "overlay",
                            "stack",
                            "stagger"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "displayName": "Auto"
                            },
                            "overlay": {
                              "displayName": "Overlay"
                            },
                            "stack": {
                              "displayName": "Stack"
                            },
                            "stagger": {
                              "displayName": "Stagger"
                            }
                          }
                        }
                      }
                    },
                    "overtime": {
                      "description": "Specifies the overtime of the task.",
                      "type": "object",
                      "displayName": "Overtime",
                      "properties": {
                        "end": {
                          "description": "The end time of the overtime. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "End",
                          "value": "",
                          "format": "date-time"
                        },
                        "start": {
                          "description": "The start time of the overtime. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Start",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                          "type": "string",
                          "displayName": "SVG Class Name"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the overtime.",
                          "type": "object",
                          "displayName": "SVG Style"
                        }
                      }
                    },
                    "progress": {
                      "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                      "type": "object",
                      "displayName": "Progress",
                      "properties": {
                        "borderRadius": {
                          "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                          "type": "string",
                          "displayName": "Border Radius"
                        },
                        "height": {
                          "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                          "type": "string",
                          "displayName": "Height"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                          "type": "string",
                          "displayName": "SVG Class Name"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the progress bar.",
                          "type": "object",
                          "displayName": "SVG Style"
                        },
                        "value": {
                          "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                          "type": "number",
                          "displayName": "Value",
                          "value": null
                        }
                      }
                    },
                    "shortDesc": {
                      "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string|function",
                      "displayName": "Short Desc",
                      "value": null
                    },
                    "start": {
                      "description": "The task start time. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Start",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the task.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the task.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "type": {
                      "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Type",
                      "enumValues": [
                        "auto",
                        "milestone",
                        "normal",
                        "summary"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "displayName": "Auto"
                        },
                        "milestone": {
                          "displayName": "Milestone"
                        },
                        "normal": {
                          "displayName": "Normal"
                        },
                        "summary": {
                          "displayName": "Summary"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "scrollPosition": {
          "description": "The current scroll position of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "y": 0
          },
          "writeback": true,
          "help": "#scrollPosition",
          "properties": {
            "offsetY": {
              "description": "The vertical offset in pixels relative to the row identified by 'rowIndex'.",
              "type": "number",
              "displayName": "Offset Y",
              "value": null,
              "units": "pixels",
              "help": "#scrollPosition.offsetY"
            },
            "rowIndex": {
              "description": "The zero-based index of the row.",
              "type": "number",
              "displayName": "Row Index",
              "value": null,
              "help": "#scrollPosition.rowIndex"
            },
            "y": {
              "description": "The vertical position in pixels.",
              "type": "number",
              "displayName": "Y",
              "value": 0,
              "units": "pixels",
              "help": "#scrollPosition.y"
            }
          }
        },
        "selection": {
          "description": "An array containing the ids of the initially selected tasks.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionBehavior": {
          "description": "Specifies the action that is performed when a drag occurs.",
          "type": "string",
          "displayName": "Selection Behavior",
          "value": "normal",
          "help": "#selectionBehavior",
          "enumValues": [
            "highlightDependencies",
            "normal"
          ],
          "propertyEditorValues": {
            "highlightDependencies": {
              "description": "All dependency lines are initially not shown, but upon selection of a task, its dependent tasks and associated dependency lines are highlighted.",
              "displayName": "Highlight Dependencies"
            },
            "normal": {
              "description": "There are no additional visual treatments beyond the normal task selection",
              "displayName": "Normal"
            }
          }
        },
        "selectionMode": {
          "description": "Specifies the selection behavior of the Gantt. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "start": {
          "description": "The start time of the Gantt. A valid value is required for the Gantt to render properly. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#start"
        },
        "taskAggregation": {
          "description": "Specifies whether to apply a horizontally stacked visual treatment to adjacent tasks.",
          "type": "string",
          "displayName": "Task Aggregation",
          "value": "off",
          "help": "#taskAggregation",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "taskData": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Set the data using the row-data attribute instead."
            }
          ],
          "description": "Specifies the DataProvider for the tasks of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Task Data",
          "value": null,
          "help": "#taskData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "taskDefaults": {
          "description": "Specifies default styling for tasks in the Gantt.",
          "type": "object",
          "displayName": "Task Defaults",
          "help": "#taskDefaults",
          "properties": {
            "attribute": {
              "description": "Specifies default styling for task attribute elements.",
              "type": "object",
              "displayName": "Attribute",
              "help": "#taskDefaults.attribute",
              "properties": {
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the attribute style.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#taskDefaults.attribute.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style defining the attribute style.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#taskDefaults.attribute.svgStyle"
                }
              }
            },
            "baseline": {
              "description": "Specifies default styling for task baseline elements.",
              "type": "object",
              "displayName": "Baseline",
              "help": "#taskDefaults.baseline",
              "properties": {
                "borderRadius": {
                  "description": "The border radius of the baseline. Accepts valid CSS border-radius attribute values.",
                  "type": "string",
                  "displayName": "Border Radius",
                  "help": "#taskDefaults.baseline.borderRadius"
                },
                "height": {
                  "description": "Specifies the height of the baseline in pixels. If not specified, a default height is used based upon the baseline type.",
                  "type": "number",
                  "displayName": "Height",
                  "value": null,
                  "units": "pixels",
                  "help": "#taskDefaults.baseline.height"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the baseline style.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#taskDefaults.baseline.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style defining the baseline style.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#taskDefaults.baseline.svgStyle"
                }
              }
            },
            "borderRadius": {
              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#taskDefaults.borderRadius"
            },
            "downtime": {
              "description": "Specifies default styling for task downtime elements.",
              "type": "object",
              "displayName": "Downtime",
              "help": "#taskDefaults.downtime",
              "properties": {
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the downtime style.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#taskDefaults.downtime.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style defining the downtime style.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#taskDefaults.downtime.svgStyle"
                }
              }
            },
            "height": {
              "description": "The height of the task in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "#taskDefaults.height"
            },
            "labelPosition": {
              "description": "The position of the label relative to the task, or a priority order of label positions for the component to automatically choose from.",
              "type": "string|Array<string>",
              "displayName": "Label Position",
              "value": [
                "end",
                "innerCenter",
                "start",
                "max"
              ],
              "help": "#taskDefaults.labelPosition",
              "enumValues": [
                "end",
                "innerCenter",
                "innerEnd",
                "innerStart",
                "none",
                "start"
              ],
              "propertyEditorValues": {
                "end": {
                  "displayName": "End"
                },
                "innerCenter": {
                  "displayName": "Inner Center"
                },
                "innerEnd": {
                  "displayName": "Inner End"
                },
                "innerStart": {
                  "displayName": "Inner Start"
                },
                "none": {
                  "displayName": "None"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "overlap": {
              "description": "Configures the placement of chronologically overlapping tasks.",
              "type": "object",
              "displayName": "Overlap",
              "help": "#taskDefaults.overlap",
              "properties": {
                "behavior": {
                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Behavior",
                  "value": "auto",
                  "help": "#taskDefaults.overlap.behavior",
                  "enumValues": [
                    "auto",
                    "overlay",
                    "stack",
                    "stagger"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "overlay": {
                      "displayName": "Overlay"
                    },
                    "stack": {
                      "displayName": "Stack"
                    },
                    "stagger": {
                      "displayName": "Stagger"
                    }
                  }
                },
                "offset": {
                  "description": "Specifies the vertical offset amount in pixels to be used when laying out overlapping tasks. See the Help documentation for more information.",
                  "type": "number",
                  "displayName": "Offset",
                  "value": null,
                  "units": "pixels",
                  "help": "#taskDefaults.overlap.offset"
                }
              }
            },
            "overtime": {
              "description": "Specifies default styling for task overtime elements.",
              "type": "object",
              "displayName": "Overtime",
              "help": "#taskDefaults.overtime",
              "properties": {
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the overtime style.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#taskDefaults.overtime.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style defining the overtime style.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#taskDefaults.overtime.svgStyle"
                }
              }
            },
            "progress": {
              "description": "Specifies default styling for progress bars on non-milestone tasks.",
              "type": "object",
              "displayName": "Progress",
              "help": "#taskDefaults.progress",
              "properties": {
                "borderRadius": {
                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                  "type": "string",
                  "displayName": "Border Radius",
                  "help": "#taskDefaults.progress.borderRadius"
                },
                "height": {
                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Height",
                  "value": "100%",
                  "help": "#taskDefaults.progress.height"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                  "type": "string",
                  "displayName": "SVG Class Name",
                  "value": "",
                  "help": "#taskDefaults.progress.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the progress bar.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {},
                  "help": "#taskDefaults.progress.svgStyle"
                }
              }
            },
            "resizable": {
              "description": "Enable or disable resizing of the non-baseline portions of selected tasks.",
              "type": "string",
              "displayName": "Resizable",
              "value": "disabled",
              "help": "#taskDefaults.resizable",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "description": "Disable selected tasks resize",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enable selected tasks resize",
                  "displayName": "Enabled"
                }
              }
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the task.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#taskDefaults.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the task.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#taskDefaults.svgStyle"
            },
            "type": {
              "description": "The type of task to be rendered.",
              "type": "string",
              "displayName": "Type",
              "value": "auto",
              "help": "#taskDefaults.type",
              "enumValues": [
                "auto",
                "milestone",
                "normal",
                "summary"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "milestone": {
                  "displayName": "Milestone"
                },
                "normal": {
                  "displayName": "Normal"
                },
                "summary": {
                  "displayName": "Summary"
                }
              }
            }
          }
        },
        "timeCursor": {
          "description": "Specifies whether the time cursor is enabled.",
          "type": "string",
          "displayName": "Time Cursor",
          "value": "off",
          "help": "#timeCursor",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "accessibleDependencyInfo": {
              "description": "Provides properties to customize the screen reader text describing a specific dependency.",
              "type": "string",
              "help": "#translations.accessibleDependencyInfo"
            },
            "accessiblePredecessorInfo": {
              "description": "Provides properties to customize the screen reader text describing predecessors of a task.",
              "type": "string",
              "help": "#translations.accessiblePredecessorInfo"
            },
            "accessibleSuccessorInfo": {
              "description": "Provides properties to customize the screen reader text describing successors of a task.",
              "type": "string",
              "help": "#translations.accessibleSuccessorInfo"
            },
            "accessibleTaskTypeMilestone": {
              "description": "Used to describe milestone task type for accessibility.",
              "type": "string",
              "help": "#translations.accessibleTaskTypeMilestone"
            },
            "accessibleTaskTypeSummary": {
              "description": "Used to describe summary task type for accessibility.",
              "type": "string",
              "help": "#translations.accessibleTaskTypeSummary"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "finishFinishDependencyAriaDesc": {
              "description": "Used to describe finish to finish dependency type for accessibility.",
              "type": "string",
              "help": "#translations.finishFinishDependencyAriaDesc"
            },
            "finishStartDependencyAriaDesc": {
              "description": "Used to describe finish to start dependency type for accessibility.",
              "type": "string",
              "help": "#translations.finishStartDependencyAriaDesc"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelAttribute": {
              "description": "Used for the default tooltip label for task attribute information.",
              "type": "string",
              "help": "#translations.labelAttribute"
            },
            "labelBaselineDate": {
              "description": "Used for the default tooltip label for baseline milestone information.",
              "type": "string",
              "help": "#translations.labelBaselineDate"
            },
            "labelBaselineEnd": {
              "description": "Used for the default tooltip label for baseline end time information.",
              "type": "string",
              "help": "#translations.labelBaselineEnd"
            },
            "labelBaselineStart": {
              "description": "Used for the default tooltip label for baseline start time information.",
              "type": "string",
              "help": "#translations.labelBaselineStart"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the default tooltip label for milestone information.",
              "type": "string",
              "help": "#translations.labelDate"
            },
            "labelDowntimeEnd": {
              "description": "Used for the default tooltip label for downtime end time information.",
              "type": "string",
              "help": "#translations.labelDowntimeEnd"
            },
            "labelDowntimeStart": {
              "description": "Used for the default tooltip label for downtime start time information.",
              "type": "string",
              "help": "#translations.labelDowntimeStart"
            },
            "labelEnd": {
              "description": "Used for the default tooltip label for end time information.",
              "type": "string",
              "help": "#translations.labelEnd"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelLabel": {
              "description": "Used for the default tooltip label for task label information.",
              "type": "string",
              "help": "#translations.labelLabel"
            },
            "labelLevel": {
              "description": "Used to describe row level in a hierarchical gantt for accessibility.",
              "type": "string",
              "help": "#translations.labelLevel"
            },
            "labelMoveBy": {
              "description": "Used for the default tooltip label for task move scale change.",
              "type": "string",
              "help": "#translations.labelMoveBy"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelOvertimeEnd": {
              "description": "Used for the default tooltip label for overtime end time information.",
              "type": "string",
              "help": "#translations.labelOvertimeEnd"
            },
            "labelOvertimeStart": {
              "description": "Used for the default tooltip label for overtime start time information.",
              "type": "string",
              "help": "#translations.labelOvertimeStart"
            },
            "labelProgress": {
              "description": "Used for the default tooltip label for task progress information.",
              "type": "string",
              "help": "#translations.labelProgress"
            },
            "labelResizeBy": {
              "description": "Used for the default tooltip label for task resize scale change.",
              "type": "string",
              "help": "#translations.labelResizeBy"
            },
            "labelRow": {
              "description": "Used for the default tooltip label for row information.",
              "type": "string",
              "help": "#translations.labelRow"
            },
            "labelStart": {
              "description": "Used for the default tooltip label for start time information.",
              "type": "string",
              "help": "#translations.labelStart"
            },
            "startFinishDependencyAriaDesc": {
              "description": "Used to describe start to finish dependency type for accessibility.",
              "type": "string",
              "help": "#translations.startFinishDependencyAriaDesc"
            },
            "startStartDependencyAriaDesc": {
              "description": "Used to describe start to start dependency type for accessibility.",
              "type": "string",
              "help": "#translations.startStartDependencyAriaDesc"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "taskMoveCancelled": {
              "description": "Used to indicate task move is cancelled for accessibility.",
              "type": "string",
              "help": "#translations.taskMoveCancelled"
            },
            "taskMoveFinalized": {
              "description": "Used to indicate task move is finalized for accessibility.",
              "type": "string",
              "help": "#translations.taskMoveFinalized"
            },
            "taskMoveInitiated": {
              "description": "Used to indicate task move is initiated for accessibility.",
              "type": "string",
              "help": "#translations.taskMoveInitiated"
            },
            "taskMoveInitiatedInstruction": {
              "description": "Used to indicate task move instructions for accessibility.",
              "type": "string",
              "help": "#translations.taskMoveInitiatedInstruction"
            },
            "taskMoveSelectionInfo": {
              "description": "Used to indicate whether other tasks are also selected during move.",
              "type": "string",
              "help": "#translations.taskMoveSelectionInfo"
            },
            "taskResizeCancelled": {
              "description": "Used to indicate task resize is cancelled for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeCancelled"
            },
            "taskResizeEndHandle": {
              "description": "Used to indicate task end resize handle for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeEndHandle"
            },
            "taskResizeEndInitiated": {
              "description": "Used to indicate task resize end is initiated for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeEndInitiated"
            },
            "taskResizeFinalized": {
              "description": "Used to indicate task resize is finalized for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeFinalized"
            },
            "taskResizeInitiatedInstruction": {
              "description": "Used to indicate task resize instructions for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeInitiatedInstruction"
            },
            "taskResizeSelectionInfo": {
              "description": "Used to indicate whether other tasks are also selected during task resize.",
              "type": "string",
              "help": "#translations.taskResizeSelectionInfo"
            },
            "taskResizeStartHandle": {
              "description": "Used to indicate task start resize handle for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeStartHandle"
            },
            "taskResizeStartInitiated": {
              "description": "Used to indicate task resize start is initiated for accessibility.",
              "type": "string",
              "help": "#translations.taskResizeStartInitiated"
            },
            "tooltipZoomIn": {
              "description": "Used for the zoom in tooltip.",
              "type": "string",
              "help": "#translations.tooltipZoomIn"
            },
            "tooltipZoomOut": {
              "description": "Used for the zoom out tooltip.",
              "type": "string",
              "help": "#translations.tooltipZoomOut"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to task properties.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "#valueFormats",
          "properties": {
            "attribute": {
              "description": "Specifies tooltip behavior for the attribute value.",
              "type": "object",
              "displayName": "Attribute",
              "help": "#valueFormats.attribute",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the attribute value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.attribute.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the attribute value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.attribute.tooltipLabel"
                }
              }
            },
            "baselineDate": {
              "description": "Specifies tooltip behavior for the milestone baseline date value.",
              "type": "object",
              "displayName": "Baseline Date",
              "help": "#valueFormats.baselineDate",
              "properties": {
                "converter": {
                  "description": "An object used to format the milestone baseline date value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.baselineDate.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the milestone baseline date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.baselineDate.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the milestone baseline date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.baselineDate.tooltipLabel"
                }
              }
            },
            "baselineEnd": {
              "description": "Specifies tooltip behavior for the baseline end value.",
              "type": "object",
              "displayName": "Baseline End",
              "help": "#valueFormats.baselineEnd",
              "properties": {
                "converter": {
                  "description": "An object used to format the baseline end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.baselineEnd.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the baseline end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.baselineEnd.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the baseline end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.baselineEnd.tooltipLabel"
                }
              }
            },
            "baselineStart": {
              "description": "Specifies tooltip behavior for the baseline start value.",
              "type": "object",
              "displayName": "Baseline Start",
              "help": "#valueFormats.baselineStart",
              "properties": {
                "converter": {
                  "description": "An object used to format the baseline start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.baselineStart.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the baseline start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.baselineStart.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the baseline start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.baselineStart.tooltipLabel"
                }
              }
            },
            "date": {
              "description": "Specifies tooltip behavior for the date value of a milestone task.",
              "type": "object",
              "displayName": "Date",
              "help": "#valueFormats.date",
              "properties": {
                "converter": {
                  "description": "An object used to format the date value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.date.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.date.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.date.tooltipLabel"
                }
              }
            },
            "downtimeEnd": {
              "description": "Specifies tooltip behavior for the downtime end value.",
              "type": "object",
              "displayName": "Downtime End",
              "help": "#valueFormats.downtimeEnd",
              "properties": {
                "converter": {
                  "description": "An object used to format the downtime end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.downtimeEnd.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the downtime end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.downtimeEnd.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the downtime end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.downtimeEnd.tooltipLabel"
                }
              }
            },
            "downtimeStart": {
              "description": "Specifies tooltip behavior for the downtime start value.",
              "type": "object",
              "displayName": "Downtime Start",
              "help": "#valueFormats.downtimeStart",
              "properties": {
                "converter": {
                  "description": "An object used to format the downtime start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.downtimeStart.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the downtime start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.downtimeStart.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the downtime start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.downtimeStart.tooltipLabel"
                }
              }
            },
            "end": {
              "description": "Specifies tooltip behavior for the end value.",
              "type": "object",
              "displayName": "End",
              "help": "#valueFormats.end",
              "properties": {
                "converter": {
                  "description": "An object used to format the end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.end.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.end.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.end.tooltipLabel"
                }
              }
            },
            "label": {
              "description": "Specifies tooltip behavior for the label value.",
              "type": "object",
              "displayName": "Label",
              "help": "#valueFormats.label",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the label value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.label.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the label value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.label.tooltipLabel"
                }
              }
            },
            "overtimeEnd": {
              "description": "Specifies tooltip behavior for the overtime end value.",
              "type": "object",
              "displayName": "Overtime End",
              "help": "#valueFormats.overtimeEnd",
              "properties": {
                "converter": {
                  "description": "An object used to format the overtime end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.overtimeEnd.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the overtime end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.overtimeEnd.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the overtime end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.overtimeEnd.tooltipLabel"
                }
              }
            },
            "overtimeStart": {
              "description": "Specifies tooltip behavior for the overtime start value.",
              "type": "object",
              "displayName": "Overtime Start",
              "help": "#valueFormats.overtimeStart",
              "properties": {
                "converter": {
                  "description": "An object used to format the overtime start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.overtimeStart.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the overtime start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.overtimeStart.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the overtime start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.overtimeStart.tooltipLabel"
                }
              }
            },
            "progress": {
              "description": "Specifies tooltip behavior for the progress value.",
              "type": "object",
              "displayName": "Progress",
              "help": "#valueFormats.progress",
              "properties": {
                "converter": {
                  "description": "An object used to format the progress value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "help": "#valueFormats.progress.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the progress value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.progress.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the progress value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.progress.tooltipLabel"
                }
              }
            },
            "row": {
              "description": "Specifies tooltip behavior for the row value.",
              "type": "object",
              "displayName": "Row",
              "help": "#valueFormats.row",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the row value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.row.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the row value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.row.tooltipLabel"
                }
              }
            },
            "start": {
              "description": "Specifies tooltip behavior for the start value.",
              "type": "object",
              "displayName": "Start",
              "help": "#valueFormats.start",
              "properties": {
                "converter": {
                  "description": "An object used to format the start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.start.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.start.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.start.tooltipLabel"
                }
              }
            }
          }
        },
        "viewportEnd": {
          "description": "The Gantt viewport end time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport End",
          "value": "",
          "format": "date-time",
          "help": "#viewportEnd"
        },
        "viewportStart": {
          "description": "The Gantt viewport start time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport Start",
          "value": "",
          "format": "date-time",
          "help": "#viewportStart"
        },
        "zooming": {
          "description": "Specifies whether zooming is allowed on the Gantt.",
          "type": "string",
          "displayName": "Zooming",
          "value": "on",
          "help": "#zooming",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojMove": {
          "description": "Triggered after tasks are moved to a different location within the Gantt via a drag and drop operation or an equivalent keyboard action. See the Help documentation for more information.",
          "bubbles": true,
          "help": "#event:move",
          "detail": {
            "taskContexts": {
              "description": "An array of dataContexts of the moved tasks. The first dataContext of the array corresponds to the source task where the move was initiated (e.g. the task directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source task.",
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "description": "Specifies the attribute of the task.",
                          "type": "object",
                          "properties": {
                            "rendered": {
                              "description": "Specifies whether the attribute bar is rendered.",
                              "type": "string",
                              "value": "off",
                              "enumValues": [
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "off": {
                                  "displayName": "Off"
                                },
                                "on": {
                                  "displayName": "On"
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the attribute.",
                              "type": "string|function",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the attribute.",
                              "type": "object"
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "downtime": {
                          "description": "Specifies the downtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the downtime.",
                              "type": "object"
                            }
                          }
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "end",
                            "innerCenter",
                            "innerEnd",
                            "innerStart",
                            "none",
                            "start"
                          ],
                          "propertyEditorValues": {
                            "end": {
                              "displayName": "End"
                            },
                            "innerCenter": {
                              "displayName": "Inner Center"
                            },
                            "innerEnd": {
                              "displayName": "Inner End"
                            },
                            "innerStart": {
                              "displayName": "Inner Start"
                            },
                            "none": {
                              "displayName": "None"
                            },
                            "start": {
                              "displayName": "Start"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "overlay",
                                "stack",
                                "stagger"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "overlay": {
                                  "displayName": "Overlay"
                                },
                                "stack": {
                                  "displayName": "Stack"
                                },
                                "stagger": {
                                  "displayName": "Stagger"
                                }
                              }
                            }
                          }
                        },
                        "overtime": {
                          "description": "Specifies the overtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the overtime.",
                              "type": "object"
                            }
                          }
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string|function",
                          "value": null
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "milestone",
                            "normal",
                            "summary"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "displayName": "Auto"
                            },
                            "milestone": {
                              "displayName": "Milestone"
                            },
                            "normal": {
                              "displayName": "Normal"
                            },
                            "summary": {
                              "displayName": "Summary"
                            }
                          }
                        }
                      }
                    },
                    "rowData": {
                      "description": "The data for the row the source task belongs to.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the row.",
                          "type": "string",
                          "value": ""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                          "type": "object",
                          "value": {}
                        },
                        "referenceObjects": {
                          "description": "An array of reference objects associated with the row.",
                          "type": "Array<Object>",
                          "properties": {
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                              "type": "\"area\"|\"line\"",
                              "value": "line"
                            },
                            "start": {
                              "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "label": {
                              "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                              "type": "string"
                            },
                            "shortDesc": {
                              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                              "type": "string"
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the row. This is used for accessibility.",
                          "type": "string|function",
                          "value": null
                        },
                        "tasks": {
                          "description": "An array of tasks. If not specified, no data will be shown.",
                          "type": "Array<Object>",
                          "properties": {
                            "attribute": {
                              "description": "Specifies the attribute of the task.",
                              "type": "object",
                              "properties": {
                                "rendered": {
                                  "description": "Specifies whether the attribute bar is rendered.",
                                  "type": "string",
                                  "value": "off",
                                  "enumValues": [
                                    "off",
                                    "on"
                                  ],
                                  "propertyEditorValues": {
                                    "off": {
                                      "displayName": "Off"
                                    },
                                    "on": {
                                      "displayName": "On"
                                    }
                                  }
                                },
                                "shortDesc": {
                                  "description": "The description of the attribute.",
                                  "type": "string|function",
                                  "value": null
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the attribute.",
                                  "type": "object"
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "downtime": {
                              "description": "Specifies the downtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the downtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                              "type": "any"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "string|Array<string>",
                              "enumValues": [
                                "end",
                                "innerCenter",
                                "innerEnd",
                                "innerStart",
                                "none",
                                "start"
                              ],
                              "propertyEditorValues": {
                                "end": {
                                  "displayName": "End"
                                },
                                "innerCenter": {
                                  "displayName": "Inner Center"
                                },
                                "innerEnd": {
                                  "displayName": "Inner End"
                                },
                                "innerStart": {
                                  "displayName": "Inner Start"
                                },
                                "none": {
                                  "displayName": "None"
                                },
                                "start": {
                                  "displayName": "Start"
                                }
                              }
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "string",
                                  "enumValues": [
                                    "auto",
                                    "overlay",
                                    "stack",
                                    "stagger"
                                  ],
                                  "propertyEditorValues": {
                                    "auto": {
                                      "displayName": "Auto"
                                    },
                                    "overlay": {
                                      "displayName": "Overlay"
                                    },
                                    "stack": {
                                      "displayName": "Stack"
                                    },
                                    "stagger": {
                                      "displayName": "Stagger"
                                    }
                                  }
                                }
                              }
                            },
                            "overtime": {
                              "description": "Specifies the overtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the overtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string|function",
                              "value": null
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "milestone",
                                "normal",
                                "summary"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "milestone": {
                                  "displayName": "Milestone"
                                },
                                "normal": {
                                  "displayName": "Normal"
                                },
                                "summary": {
                                  "displayName": "Summary"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemData": {
                      "description": "The data provider data object for the source task.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source task.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": {
              "description": "The value at the target position the source task is moved to. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "baselineStart": {
              "description": "The start value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "baselineEnd": {
              "description": "The end value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "rowContext": {
              "description": "The data context for the row at the target position.",
              "type": "object",
              "properties": {
                "rowData": {
                  "description": "The data for the target row.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                      "type": "any"
                    },
                    "label": {
                      "description": "The label associated with the row.",
                      "type": "string",
                      "value": ""
                    },
                    "labelStyle": {
                      "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                      "type": "object",
                      "value": {}
                    },
                    "referenceObjects": {
                      "description": "An array of reference objects associated with the row.",
                      "type": "Array<Object>",
                      "extension": {
                        "vbdt": {
                          "itemProperties": {
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                              "type": "\"area\"|\"line\"",
                              "value": "line"
                            },
                            "start": {
                              "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "label": {
                              "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                              "type": "string"
                            },
                            "shortDesc": {
                              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "shortDesc": {
                      "description": "The description of the row. This is used for accessibility.",
                      "type": "string|function",
                      "value": null
                    },
                    "tasks": {
                      "description": "An array of tasks. If not specified, no data will be shown.",
                      "type": "Array<Object>",
                      "extension": {
                        "vbdt": {
                          "itemProperties": {
                            "attribute": {
                              "description": "Specifies the attribute of the task.",
                              "type": "object",
                              "properties": {
                                "rendered": {
                                  "description": "Specifies whether the attribute bar is rendered.",
                                  "type": "string",
                                  "value": "off",
                                  "enumValues": [
                                    "off",
                                    "on"
                                  ],
                                  "propertyEditorValues": {
                                    "off": {
                                      "displayName": "Off"
                                    },
                                    "on": {
                                      "displayName": "On"
                                    }
                                  }
                                },
                                "shortDesc": {
                                  "description": "The description of the attribute.",
                                  "type": "string|function",
                                  "value": null
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the attribute.",
                                  "type": "object"
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "downtime": {
                              "description": "Specifies the downtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the downtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                              "type": "any"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "string|Array<string>",
                              "enumValues": [
                                "end",
                                "innerCenter",
                                "innerEnd",
                                "innerStart",
                                "none",
                                "start"
                              ],
                              "propertyEditorValues": {
                                "end": {
                                  "displayName": "End"
                                },
                                "innerCenter": {
                                  "displayName": "Inner Center"
                                },
                                "innerEnd": {
                                  "displayName": "Inner End"
                                },
                                "innerStart": {
                                  "displayName": "Inner Start"
                                },
                                "none": {
                                  "displayName": "None"
                                },
                                "start": {
                                  "displayName": "Start"
                                }
                              }
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "string",
                                  "enumValues": [
                                    "auto",
                                    "overlay",
                                    "stack",
                                    "stagger"
                                  ],
                                  "propertyEditorValues": {
                                    "auto": {
                                      "displayName": "Auto"
                                    },
                                    "overlay": {
                                      "displayName": "Overlay"
                                    },
                                    "stack": {
                                      "displayName": "Stack"
                                    },
                                    "stagger": {
                                      "displayName": "Stagger"
                                    }
                                  }
                                }
                              }
                            },
                            "overtime": {
                              "description": "Specifies the overtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the overtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string|function",
                              "value": null
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "milestone",
                                "normal",
                                "summary"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "milestone": {
                                  "displayName": "Milestone"
                                },
                                "normal": {
                                  "displayName": "Normal"
                                },
                                "summary": {
                                  "displayName": "Summary"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "componentElement": {
                  "description": "The gantt element.",
                  "type": "Element"
                }
              }
            }
          }
        },
        "ojResize": {
          "description": "Triggered after tasks are resized.",
          "bubbles": true,
          "help": "#event:resize",
          "detail": {
            "taskContexts": {
              "description": "An array of dataContexts of the resized tasks. The first dataContext of the array corresponds to the source task where the resize was initiated (e.g. the task directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source task.",
                      "type": "object",
                      "properties": {
                        "attribute": {
                          "description": "Specifies the attribute of the task.",
                          "type": "object",
                          "properties": {
                            "rendered": {
                              "description": "Specifies whether the attribute bar is rendered.",
                              "type": "string",
                              "value": "off",
                              "enumValues": [
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "off": {
                                  "displayName": "Off"
                                },
                                "on": {
                                  "displayName": "On"
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the attribute.",
                              "type": "string|function",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the attribute.",
                              "type": "object"
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "downtime": {
                          "description": "Specifies the downtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the downtime.",
                              "type": "object"
                            }
                          }
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "end",
                            "innerCenter",
                            "innerEnd",
                            "innerStart",
                            "none",
                            "start"
                          ],
                          "propertyEditorValues": {
                            "end": {
                              "displayName": "End"
                            },
                            "innerCenter": {
                              "displayName": "Inner Center"
                            },
                            "innerEnd": {
                              "displayName": "Inner End"
                            },
                            "innerStart": {
                              "displayName": "Inner Start"
                            },
                            "none": {
                              "displayName": "None"
                            },
                            "start": {
                              "displayName": "Start"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "overlay",
                                "stack",
                                "stagger"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "overlay": {
                                  "displayName": "Overlay"
                                },
                                "stack": {
                                  "displayName": "Stack"
                                },
                                "stagger": {
                                  "displayName": "Stagger"
                                }
                              }
                            }
                          }
                        },
                        "overtime": {
                          "description": "Specifies the overtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the overtime.",
                              "type": "object"
                            }
                          }
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string|function",
                          "value": null
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "milestone",
                            "normal",
                            "summary"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "displayName": "Auto"
                            },
                            "milestone": {
                              "displayName": "Milestone"
                            },
                            "normal": {
                              "displayName": "Normal"
                            },
                            "summary": {
                              "displayName": "Summary"
                            }
                          }
                        }
                      }
                    },
                    "rowData": {
                      "description": "The data for the row the source task belongs to.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the row.",
                          "type": "string",
                          "value": ""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                          "type": "object",
                          "value": {}
                        },
                        "referenceObjects": {
                          "description": "An array of reference objects associated with the row.",
                          "type": "Array<Object>",
                          "properties": {
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                              "type": "\"area\"|\"line\"",
                              "value": "line"
                            },
                            "start": {
                              "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                              "type": "string"
                            },
                            "label": {
                              "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                              "type": "string"
                            },
                            "shortDesc": {
                              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                              "type": "string"
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the row. This is used for accessibility.",
                          "type": "string|function",
                          "value": null
                        },
                        "tasks": {
                          "description": "An array of tasks. If not specified, no data will be shown.",
                          "type": "Array<Object>",
                          "properties": {
                            "attribute": {
                              "description": "Specifies the attribute of the task.",
                              "type": "object",
                              "properties": {
                                "rendered": {
                                  "description": "Specifies whether the attribute bar is rendered.",
                                  "type": "string",
                                  "value": "off",
                                  "enumValues": [
                                    "off",
                                    "on"
                                  ],
                                  "propertyEditorValues": {
                                    "off": {
                                      "displayName": "Off"
                                    },
                                    "on": {
                                      "displayName": "On"
                                    }
                                  }
                                },
                                "shortDesc": {
                                  "description": "The description of the attribute.",
                                  "type": "string|function",
                                  "value": null
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the attribute.",
                                  "type": "object"
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "downtime": {
                              "description": "Specifies the downtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the downtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the downtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                              "type": "any"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "string|Array<string>",
                              "enumValues": [
                                "end",
                                "innerCenter",
                                "innerEnd",
                                "innerStart",
                                "none",
                                "start"
                              ],
                              "propertyEditorValues": {
                                "end": {
                                  "displayName": "End"
                                },
                                "innerCenter": {
                                  "displayName": "Inner Center"
                                },
                                "innerEnd": {
                                  "displayName": "Inner End"
                                },
                                "innerStart": {
                                  "displayName": "Inner Start"
                                },
                                "none": {
                                  "displayName": "None"
                                },
                                "start": {
                                  "displayName": "Start"
                                }
                              }
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "string",
                                  "enumValues": [
                                    "auto",
                                    "overlay",
                                    "stack",
                                    "stagger"
                                  ],
                                  "propertyEditorValues": {
                                    "auto": {
                                      "displayName": "Auto"
                                    },
                                    "overlay": {
                                      "displayName": "Overlay"
                                    },
                                    "stack": {
                                      "displayName": "Stack"
                                    },
                                    "stagger": {
                                      "displayName": "Stagger"
                                    }
                                  }
                                }
                              }
                            },
                            "overtime": {
                              "description": "Specifies the overtime of the task.",
                              "type": "object",
                              "properties": {
                                "end": {
                                  "description": "The end time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "start": {
                                  "description": "The start time of the overtime. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the overtime.",
                                  "type": "object"
                                }
                              }
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string|function",
                              "value": null
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "milestone",
                                "normal",
                                "summary"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "milestone": {
                                  "displayName": "Milestone"
                                },
                                "normal": {
                                  "displayName": "Normal"
                                },
                                "summary": {
                                  "displayName": "Summary"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "itemData": {
                      "description": "The data provider data object for the source task.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source task.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": {
              "description": "The type of resize, either 'start' or 'end'.",
              "type": "string"
            },
            "value": {
              "description": "The value at the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the task (always chronologically before, or equivalent to, the end value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the task (always chronologically after, or equivalent to, the start value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation. If the viewport changes the minor (and/or major) axis scale into a custom timescale instance of DvtTimeComponentScale, then the minorAxisScale (and/or majorAxisScale) will be the \"name\" field value of the instance.",
          "bubbles": true,
          "help": "#event:viewportChange",
          "detail": {
            "viewportStart": {
              "description": "the start of the new viewport on a gantt chart",
              "type": "string"
            },
            "viewportEnd": {
              "description": "the end of the new viewport on a gantt chart",
              "type": "string"
            },
            "majorAxisScale": {
              "description": "the time scale of the majorAxis",
              "type": "string"
            },
            "minorAxisScale": {
              "description": "the time scale of the minorAxis",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "taskTemplate": {
          "description": "The taskTemplate slot is used to specify the template for creating each task of the Gantt. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Set the data using the row-data attribute and use the TaskMappingTemplateContext instead."
            }
          ],
          "maxItems": 1,
          "help": "#taskTemplate",
          "preferredContent": [
            "GanttTaskElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current task",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current task",
              "type": "number"
            },
            "key": {
              "description": "The key of the current task",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the task.",
              "type": "Array<Object>"
            },
            "parentKey": {
              "description": "The key of the parent task. The parent key is null for root tasks.",
              "type": "any"
            }
          }
        },
        "taskMappingTemplate": {
          "description": "The taskMappingTemplate slot is used to specify the template for creating each task of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#taskMappingTemplate",
          "preferredContent": [
            "GanttTaskElement"
          ],
          "data": {
            "data": {
              "description": "The data object for the current task",
              "type": "object"
            },
            "index": {
              "description": "The index of the current task",
              "type": "number"
            },
            "rowData": {
              "description": "The data object for the row the task belongs to.",
              "type": "object"
            }
          }
        },
        "dependencyTemplate": {
          "description": "The dependencyTemplate slot is used to specify the template for creating each dependency line of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#dependencyTemplate",
          "preferredContent": [
            "GanttDependencyElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current dependency",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current dependency",
              "type": "number"
            },
            "key": {
              "description": "The key of the current dependency",
              "type": "any"
            }
          }
        },
        "rowTemplate": {
          "description": "The rowTemplate slot is used to specify the template for generating the row properties of the Gantt. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Set the data using the row-data attribute and use the RowMappingTemplateContext instead."
            }
          ],
          "maxItems": 1,
          "help": "#rowTemplate",
          "preferredContent": [
            "GanttRowElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The row index",
              "type": "number"
            },
            "id": {
              "description": "The row id, if specified in the task template. Otherwise, it's the single task per row case, and this would be the task id.",
              "type": "any"
            },
            "tasks": {
              "description": "The array of objects which are gantt tasks that belong to this row. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the task",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the task",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the task",
                      "type": "any"
                    },
                    "parentData": {
                      "description": "An array of data objects of the outermost to innermost parents of the task.",
                      "type": "Array<Object>"
                    },
                    "parentKey": {
                      "description": "The key of the parent task. The parent key is null for root tasks.",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "rowMappingTemplate": {
          "description": "The rowTemplate slot is used to specify the template for generating the row properties of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowMappingTemplate",
          "preferredContent": [
            "GanttRowElement"
          ],
          "data": {
            "index": {
              "description": "The row index",
              "type": "number"
            },
            "key": {
              "description": "The key of the row.",
              "type": "any"
            },
            "data": {
              "description": "The data object for the row.",
              "type": "object"
            },
            "depth": {
              "description": "The depth of the row. The depth of the outermost row under the invisible root is 1. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current row is a leaf row. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "boolean"
            },
            "parentKey": {
              "description": "The key of the parent row. The parent key is null for (the invisible) root. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "any"
            }
          }
        },
        "rowAxisLabelTemplate": {
          "description": "The rowAxisLabelTemplate slot is used to specify custom row axis label content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rowAxisLabelTemplate",
          "data": {
            "parentElement": {
              "description": "A parent group element that takes a custom SVG fragment as the row label content. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "rowData": {
              "description": "The data for the row.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any"
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                  "type": "object",
                  "value": {}
                },
                "referenceObjects": {
                  "description": "An array of reference objects associated with the row.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                          "type": "object"
                        },
                        "value": {
                          "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                          "type": "\"area\"|\"line\"",
                          "value": "line"
                        },
                        "start": {
                          "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                          "type": "string"
                        },
                        "label": {
                          "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                          "type": "string"
                        },
                        "shortDesc": {
                          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of the row. This is used for accessibility.",
                  "type": "string|function",
                  "value": null
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "attribute": {
                          "description": "Specifies the attribute of the task.",
                          "type": "object",
                          "properties": {
                            "rendered": {
                              "description": "Specifies whether the attribute bar is rendered.",
                              "type": "string",
                              "value": "off",
                              "enumValues": [
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "off": {
                                  "displayName": "Off"
                                },
                                "on": {
                                  "displayName": "On"
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the attribute.",
                              "type": "string|function",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the attribute.",
                              "type": "object"
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "downtime": {
                          "description": "Specifies the downtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the downtime.",
                              "type": "object"
                            }
                          }
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "end",
                            "innerCenter",
                            "innerEnd",
                            "innerStart",
                            "none",
                            "start"
                          ],
                          "propertyEditorValues": {
                            "end": {
                              "displayName": "End"
                            },
                            "innerCenter": {
                              "displayName": "Inner Center"
                            },
                            "innerEnd": {
                              "displayName": "Inner End"
                            },
                            "innerStart": {
                              "displayName": "Inner Start"
                            },
                            "none": {
                              "displayName": "None"
                            },
                            "start": {
                              "displayName": "Start"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "overlay",
                                "stack",
                                "stagger"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "overlay": {
                                  "displayName": "Overlay"
                                },
                                "stack": {
                                  "displayName": "Stack"
                                },
                                "stagger": {
                                  "displayName": "Stagger"
                                }
                              }
                            }
                          }
                        },
                        "overtime": {
                          "description": "Specifies the overtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the overtime.",
                              "type": "object"
                            }
                          }
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string|function",
                          "value": null
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "milestone",
                            "normal",
                            "summary"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "displayName": "Auto"
                            },
                            "milestone": {
                              "displayName": "Milestone"
                            },
                            "normal": {
                              "displayName": "Normal"
                            },
                            "summary": {
                              "displayName": "Summary"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "itemData": {
              "description": "An array of the data provider data objects associated with the tasks belonging to the gantt row.",
              "type": "Array<Object>|null"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            },
            "maxWidth": {
              "description": "The maximum available width in px, as constrained by the row-axis.width and row-axis.max-width values. If row-axis.width is 'max-content' and row-axis.max-width is 'none', then this is -1, and the component will automatically allocate enough width space to accommodate the content.",
              "type": "number"
            },
            "maxHeight": {
              "description": "The maximum available height in px.",
              "type": "number"
            },
            "data": {
              "description": "The data object for the row from the row-data DataProvider.",
              "type": "object"
            },
            "depth": {
              "description": "The depth of the row. The depth of the outermost row under the invisible root is 1. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current row is a leaf row. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "boolean"
            },
            "parentKey": {
              "description": "The key of the parent row. The parent key is null for (the invisible) root. This is available if the supplied row-data DataProvider is a TreeDataProvider.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered task.",
              "type": "object",
              "properties": {
                "attribute": {
                  "description": "Specifies the attribute of the task.",
                  "type": "object",
                  "properties": {
                    "rendered": {
                      "description": "Specifies whether the attribute bar is rendered.",
                      "type": "string",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "displayName": "Off"
                        },
                        "on": {
                          "displayName": "On"
                        }
                      }
                    },
                    "shortDesc": {
                      "description": "The description of the attribute.",
                      "type": "string|function",
                      "value": null
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the attribute.",
                      "type": "object"
                    }
                  }
                },
                "baseline": {
                  "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                  "type": "object",
                  "properties": {
                    "borderRadius": {
                      "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                      "type": "string"
                    },
                    "end": {
                      "description": "The end time of the baseline. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "height": {
                      "description": "The height of the baseline in pixels.",
                      "type": "number",
                      "units": "pixels"
                    },
                    "start": {
                      "description": "The start time of the baseline. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the baseline.",
                      "type": "object"
                    }
                  }
                },
                "borderRadius": {
                  "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                  "type": "string"
                },
                "downtime": {
                  "description": "Specifies the downtime of the task.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "description": "The end time of the downtime. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "start": {
                      "description": "The start time of the downtime. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the downtime.",
                      "type": "object"
                    }
                  }
                },
                "end": {
                  "description": "The task end time. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "height": {
                  "description": "The task height, in pixels. See the Help documentation for more information.",
                  "type": "number",
                  "units": "pixels"
                },
                "id": {
                  "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                  "type": "any"
                },
                "label": {
                  "description": "The label associated with the task.",
                  "type": "string",
                  "value": ""
                },
                "labelPosition": {
                  "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                  "type": "string|Array<string>",
                  "enumValues": [
                    "end",
                    "innerCenter",
                    "innerEnd",
                    "innerStart",
                    "none",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "end": {
                      "displayName": "End"
                    },
                    "innerCenter": {
                      "displayName": "Inner Center"
                    },
                    "innerEnd": {
                      "displayName": "Inner End"
                    },
                    "innerStart": {
                      "displayName": "Inner Start"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "value": {}
                },
                "overlap": {
                  "description": "Configures the placement of this task relative to a task it overlaps with.",
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "auto",
                        "overlay",
                        "stack",
                        "stagger"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "displayName": "Auto"
                        },
                        "overlay": {
                          "displayName": "Overlay"
                        },
                        "stack": {
                          "displayName": "Stack"
                        },
                        "stagger": {
                          "displayName": "Stagger"
                        }
                      }
                    }
                  }
                },
                "overtime": {
                  "description": "Specifies the overtime of the task.",
                  "type": "object",
                  "properties": {
                    "end": {
                      "description": "The end time of the overtime. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "start": {
                      "description": "The start time of the overtime. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the overtime.",
                      "type": "object"
                    }
                  }
                },
                "progress": {
                  "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                  "type": "object",
                  "properties": {
                    "borderRadius": {
                      "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                      "type": "string"
                    },
                    "height": {
                      "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the progress bar.",
                      "type": "object"
                    },
                    "value": {
                      "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                      "type": "number",
                      "value": null
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                  "type": "string|function",
                  "value": null
                },
                "start": {
                  "description": "The task start time. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the style of the task.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the task.",
                  "type": "object"
                },
                "type": {
                  "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "milestone",
                    "normal",
                    "summary"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "milestone": {
                      "displayName": "Milestone"
                    },
                    "normal": {
                      "displayName": "Normal"
                    },
                    "summary": {
                      "displayName": "Summary"
                    }
                  }
                }
              }
            },
            "rowData": {
              "description": "The data for the row the hovered task belongs to.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any"
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used. See the Help documentation for more information.",
                  "type": "object",
                  "value": {}
                },
                "referenceObjects": {
                  "description": "An array of reference objects associated with the row.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the reference object. Only SVG CSS style properties are supported.",
                          "type": "object"
                        },
                        "value": {
                          "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of reference object being shown. If the value is set to \"area\", use the start and end properties of the reference object. Otherwise, use the value property.",
                          "type": "\"area\"|\"line\"",
                          "value": "line"
                        },
                        "start": {
                          "description": "The start time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The end time value of this reference object. See Date and Time Formats for more details on required string formats, and see type for more details.",
                          "type": "string"
                        },
                        "label": {
                          "description": "The label of this reference object to be shown. This is not supported for type \"area\".",
                          "type": "string"
                        },
                        "shortDesc": {
                          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of the row. This is used for accessibility.",
                  "type": "string|function",
                  "value": null
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "attribute": {
                          "description": "Specifies the attribute of the task.",
                          "type": "object",
                          "properties": {
                            "rendered": {
                              "description": "Specifies whether the attribute bar is rendered.",
                              "type": "string",
                              "value": "off",
                              "enumValues": [
                                "off",
                                "on"
                              ],
                              "propertyEditorValues": {
                                "off": {
                                  "displayName": "Off"
                                },
                                "on": {
                                  "displayName": "On"
                                }
                              }
                            },
                            "shortDesc": {
                              "description": "The description of the attribute.",
                              "type": "string|function",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the attribute.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the attribute.",
                              "type": "object"
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "downtime": {
                          "description": "Specifies the downtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the downtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the downtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the downtime.",
                              "type": "object"
                            }
                          }
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render.",
                          "type": "any"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "string|Array<string>",
                          "enumValues": [
                            "end",
                            "innerCenter",
                            "innerEnd",
                            "innerStart",
                            "none",
                            "start"
                          ],
                          "propertyEditorValues": {
                            "end": {
                              "displayName": "End"
                            },
                            "innerCenter": {
                              "displayName": "Inner Center"
                            },
                            "innerEnd": {
                              "displayName": "Inner End"
                            },
                            "innerStart": {
                              "displayName": "Inner Start"
                            },
                            "none": {
                              "displayName": "None"
                            },
                            "start": {
                              "displayName": "Start"
                            }
                          }
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "string",
                              "enumValues": [
                                "auto",
                                "overlay",
                                "stack",
                                "stagger"
                              ],
                              "propertyEditorValues": {
                                "auto": {
                                  "displayName": "Auto"
                                },
                                "overlay": {
                                  "displayName": "Overlay"
                                },
                                "stack": {
                                  "displayName": "Stack"
                                },
                                "stagger": {
                                  "displayName": "Stagger"
                                }
                              }
                            }
                          }
                        },
                        "overtime": {
                          "description": "Specifies the overtime of the task.",
                          "type": "object",
                          "properties": {
                            "end": {
                              "description": "The end time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "start": {
                              "description": "The start time of the overtime. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the overtime.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the overtime.",
                              "type": "object"
                            }
                          }
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string|function",
                          "value": null
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "milestone",
                            "normal",
                            "summary"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "displayName": "Auto"
                            },
                            "milestone": {
                              "displayName": "Milestone"
                            },
                            "normal": {
                              "displayName": "Normal"
                            },
                            "summary": {
                              "displayName": "Summary"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "itemData": {
              "description": "The data provider data object for the hovered task.",
              "type": "object|null"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered task.",
              "type": "string"
            }
          }
        },
        "taskContentTemplate": {
          "description": "The taskContentTemplate slot is used to specify custom content to be placed inside the taskbar. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#taskContentTemplate"
        },
        "dependencyContentTemplate": {
          "description": "The dependencyContentTemplate slot is used to specify custom dependency lines. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#dependencyContentTemplate"
        },
        "referenceObjectMappingTemplate": {
          "description": "The referenceObjectMappingTemplate slot is used to specify the template for generating the row reference object properties of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#referenceObjectMappingTemplate",
          "preferredContent": [
            "GanttReferenceObjectElement"
          ],
          "data": {
            "data": {
              "description": "The data object for the current reference object.",
              "type": "object"
            },
            "index": {
              "description": "The index of the current reference object.",
              "type": "number"
            },
            "rowData": {
              "description": "The data object for the row the reference object belongs to.",
              "type": "object"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-highlight-text": {
      "name": "oj-highlight-text",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "HighlightTextElement"
      ],
      "description": "A Highlight Text renders text with highlighting applied.",
      "displayName": "Highlight Text",
      "extension": {
        "vbdt": {
          "module": "ojs/ojhighlighttext",
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-background-color"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojHighlightText.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "text",
            "matchText"
          ]
        }
      ],
      "since": "9.1.0",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text string to apply highlighting to.",
          "displayName": "Text",
          "help": "#text",
          "translatable": true,
          "value": ""
        },
        "matchText": {
          "type": "string",
          "description": "The text string to match.",
          "displayName": "Match Text",
          "help": "#matchText",
          "translatable": true,
          "value": ""
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-indexer": {
      "name": "oj-indexer",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Indexer",
      "implements": [
        "IndexerElement"
      ],
      "type": "core",
      "since": "1.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojindexer"
        },
        "oracle": {
          "icon": "oj-ux-ico-indexer",
          "uxSpecs": [
            "indexer"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Indexer text color",
          "name": "oj-indexer-text-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Indexer font size",
          "name": "oj-indexer-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "An indexer displays a list of sections that corresponds to group headers of a list.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojIndexer.html",
      "properties": {
        "data": {
          "description": "The data provider for the Indexer.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaDisabledLabel": {
              "description": "Provides properties to customize the text to read to the screen reader when there is no matching group header.",
              "type": "string",
              "help": "#translations.ariaDisabledLabel"
            },
            "ariaInBetweenText": {
              "description": "Provides properties to customize the text that represents between two characters in the Indexer.",
              "type": "string",
              "help": "#translations.ariaInBetweenText"
            },
            "ariaKeyboardInstructionText": {
              "description": "Provides properties to customize the screen reader keyboard instructional text for the Indexer.",
              "type": "string",
              "help": "#translations.ariaKeyboardInstructionText"
            },
            "ariaOthersLabel": {
              "description": "Provides properties to customize the text to read to the screen reader when the non-letter characters is selected.",
              "type": "string",
              "help": "#translations.ariaOthersLabel"
            },
            "ariaTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for the Indexer.",
              "type": "string",
              "help": "#translations.ariaTouchInstructionText"
            },
            "indexerCharacters": {
              "description": "Provides properties to customize the characters to display in the Indexer.",
              "type": "string",
              "help": "#translations.indexerCharacters"
            },
            "indexerOthers": {
              "description": "Provides properties to customize the non-letter characters to display in the Indexer.",
              "type": "string",
              "help": "#translations.indexerOthers"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Redraw the entire indexer.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-date-time": {
      "name": "oj-input-date-time",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Date Time",
      "implements": [
        "InputDateTimeElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-calendar-clock",
          "uxSpecs": [
            "input-date-and-time"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "An input date time allows the user to enter or select a date and time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputDateTime.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled",
            "readonly",
            "min",
            "max",
            "converter"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the datetime value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "#datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "#datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "#datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "year is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "year is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the position in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "#datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "#datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "#datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button. When user clicks on the Today button, it will highlight the current day in the calendar.",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "#datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#datePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Ctrl+Alt+Page Up and Ctrl+Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "#datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "#datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "#datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "#datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "#dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "#dayMetaData"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When disabled, the picker must be used to select the date. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "#keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the date.",
              "displayName": "Enabled"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum selectable datetime, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date-time",
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum selectable datetime, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date-time",
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this attribute is ignored and an error is logged."
                }
              ],
              "description": "",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$inputDateTimeRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "#renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker. Native picker is not available when the picker is inline, defaults to 'jet' instead.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "#timePicker",
          "properties": {
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "#timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button. When user clicks on the Now button, it will highlight the current time in the timepicker.",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#timePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputDateTime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "#timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "cancel": {
              "description": "The text to display for the Cancel link.",
              "type": "string",
              "help": "#translations.cancel"
            },
            "currentText": {
              "description": "The text to display for the current day link.",
              "type": "string",
              "help": "#translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
              "type": "object",
              "help": "#translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
              "type": "object",
              "help": "#translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "done": {
              "description": "The text to display for the switcher's Done link.",
              "type": "string",
              "help": "#translations.done"
            },
            "nextText": {
              "description": "The text to display for the next month link.",
              "type": "string",
              "help": "#translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link.",
              "type": "string",
              "help": "#translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "time": {
              "description": "The aria-label text for the time input in a oj-date-time-picker. When the screen reader user tabs to the input, they will hear 'Time' so that they know they are on the time field of the oj-date-time-picker.",
              "type": "string",
              "help": "#translations.time"
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon.",
              "type": "string",
              "help": "#translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon.",
              "type": "string",
              "help": "#translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading.",
              "type": "string",
              "help": "#translations.weekHeader"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the input datetime element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "format": "date-time",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "#hide",
          "return": "void"
        },
        "hideTimePicker": {
          "description": "",
          "help": "#hideTimePicker",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "show": {
          "description": "",
          "help": "#show",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "showTimePicker": {
          "description": "Method to show the internally created InputTime",
          "help": "#showTimePicker",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-date": {
      "name": "oj-input-date",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Date",
      "implements": [
        "InputDateElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-calendar",
          "uxSpecs": [
            "input-date"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "An input date allows the user to enter or select a date value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputDate.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled",
            "readonly",
            "min",
            "max",
            "converter"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "#datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "#datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "#datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "year is rendered as text",
                  "displayName": "None"
                },
                "select": {
                  "description": "year is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the position in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "#datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "#datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "#datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button. When user clicks on the Today button, it will highlight the current day in the calendar.",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "#datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#datePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Ctrl+Alt+Page Up and Ctrl+Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "#datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "#datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "#datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "#datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "#dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "#dayMetaData"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When disabled, the picker must be used to select the date. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "#keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the date.",
              "displayName": "Enabled"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum selectable date, in ISO string format. When set to null, there is no maximum. Since the value becomes a local date with no time once the user interacts with the component, min/max should be a local date with no time so they can be compared.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date",
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum selectable date, in ISO string format.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date",
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this attribute is ignored and an error is logged."
                }
              ],
              "description": "",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$inputDateTimeRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "#renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker. Native picker is not available when the picker is inline, defaults to 'jet' instead.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "currentText": {
              "description": "The text to display for the current day link.",
              "type": "string",
              "help": "#translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
              "type": "object",
              "help": "#translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components.",
                  "type": "string",
                  "help": "#translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
              "type": "object",
              "help": "#translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "nextText": {
              "description": "The text to display for the next month link.",
              "type": "string",
              "help": "#translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link.",
              "type": "string",
              "help": "#translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon.",
              "type": "string",
              "help": "#translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon.",
              "type": "string",
              "help": "#translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading.",
              "type": "string",
              "help": "#translations.weekHeader"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the input date element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "format": "date",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "#hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "show": {
          "description": "Shows the datepicker",
          "help": "#show",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-number": {
      "name": "oj-input-number",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Number",
      "implements": [
        "InputNumberElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputnumber",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-input-number",
          "uxSpecs": [
            "input-number"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "An input number allows the user to enter a number value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputNumber.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "min",
            "max",
            "step",
            "required",
            "disabled",
            "readonly",
            "virtualKeyboard",
            "converter"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-number module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum allowed value. A value of null indicates that there is no maximum. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max",
          "value": null,
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum allowed value. A value of null indicates that there is no minimum. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Min",
          "value": null,
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": "",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "step": {
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. If 0, no step functionality. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Step",
          "exclusiveMinimum": -1,
          "help": "#step"
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Transient Value",
          "value": null,
          "writeback": true,
          "readOnly": true,
          "help": "#transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "numberRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit number range validator associated to the inputNumber component.",
              "type": "object",
              "help": "#translations.numberRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit number range validator associated to the inputNumber component.",
                  "type": "object",
                  "help": "#translations.numberRange.hint",
                  "properties": {
                    "exact": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.exact is shown when both min and max are set and are equal to each other. This hint is used to tell the user to enter that particular number.",
                      "type": "string",
                      "help": "#translations.numberRange.hint.exact"
                    },
                    "inRange": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.numberRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.numberRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.numberRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit number range validator associated to the inputNumber component.",
                  "type": "object",
                  "help": "#translations.numberRange.messageDetail",
                  "properties": {
                    "exact": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.exact is shown when min and max are both set and are equal to each other, and the value is not equal to the min/max.",
                      "type": "string",
                      "help": "#translations.numberRange.messageDetail.exact"
                    },
                    "rangeOverflow": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.numberRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.numberRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Provides properties to customize the error message summary text used by the implicit number range validator associated to the inputNumber component.",
                  "type": "object",
                  "help": "#translations.numberRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the number range validator associated to the inputNumber component. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.numberRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the number range validator associated to the inputNumber component. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.numberRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "tooltipDecrement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because the tooltip text should be consistent across the application, and not configured per component instance."
                }
              ],
              "description": "Tooltip text for the inputNumber's Down arrow.",
              "type": "string",
              "help": "#translations.tooltipDecrement"
            },
            "tooltipIncrement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because the tooltip text should be consistent across the application, and not configured per component instance."
                }
              ],
              "description": "Tooltip text for the inputNumber's Up arrow.",
              "type": "string",
              "help": "#translations.tooltipIncrement"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-number module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the component, which must be either a number or null. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        },
        "virtualKeyboard": {
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Virtual Keyboard",
          "value": "auto",
          "help": "#virtualKeyboard",
          "enumValues": [
            "auto",
            "number",
            "text"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use. For example, it may look at the converter's resolvedOptions to determine if it formats using non-numeric characters or not. If it formats using non-numeric characters, like oj-input-number's default converter for 'en-US' loocale (1000 formats to \"1,000\"), then it will use \"text\".",
              "displayName": "Auto"
            },
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers. If using \"number\", you must set the converter attribute to a converter that formats to numeric characters only, otherwise the value will not be shown. The reason for this is oj-input-number uses the browser native input type='number' and when you set an input value that contains a non-numeric character, browsers do not display the value. For example, \"1,000\" would not be shown. And oj-input-number's default converter for 'en-US' locale formats using non-numeric characters, e.g., 1000 formats to \"1,000\".",
              "displayName": "Number"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "stepDown": {
          "description": "Decrements the value by the specified number of steps. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "Programmatically change the value instead."
            }
          ],
          "help": "#stepDown",
          "params": [
            {
              "name": "steps",
              "description": "Number of steps to decrement, defaults to 1.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "stepUp": {
          "description": "Increments the value by the specified number of steps. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "Programmatically change the value instead."
            }
          ],
          "help": "#stepUp",
          "params": [
            {
              "name": "steps",
              "description": "Number of steps to increment, defaults to 1.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-password": {
      "name": "oj-input-password",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Password",
      "implements": [
        "InputPasswordElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-password",
          "uxSpecs": [
            "input-password"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "An input password allows the user to enter a password.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputPassword.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "maskIcon",
            "required",
            "disabled",
            "readonly"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "maskIcon": {
          "description": "The mask icon is used to mask or unmask the visibility of the password. The password always starts out masked, but using the mask icon the user can toggle the visibility of the password so that it can be read. The mask-icon attribute is used to make the mask icon visible or hidden. If it is hidden, then the user has no way to toggle the visibility of the password.",
          "type": "string",
          "displayName": "Mask Icon",
          "value": "hidden",
          "help": "#maskIcon",
          "enumValues": [
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "The mask visibility icon is never visible",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "The mask visibility icon is always visible",
              "displayName": "Visible"
            }
          }
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleHidePassword": {
              "description": "Label for the 'view-hide' mask visibility icon.",
              "type": "string",
              "help": "#translations.accessibleHidePassword"
            },
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "accessibleShowPassword": {
              "description": "Label for the 'view' mask visibility icon.",
              "type": "string",
              "help": "#translations.accessibleShowPassword"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputPassword component.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputPassword component.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the component. Value must be a string or null.",
          "type": "string|null",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-search": {
      "name": "oj-input-search",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "InputSearchElement"
      ],
      "description": "An Input Search is an input field that the user can type search text into.",
      "displayName": "Input Search",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-input-search",
          "uxSpecs": [
            "input-search"
          ]
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        },
        "vbdt": {
          "module": "ojs/ojinputsearch",
          "defaultColumns": "6",
          "minColumns": "2"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputSearch.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "placeholder"
          ]
        }
      ],
      "styleClasses": [
        {
          "name": "oj-input-search-hero",
          "kind": "class",
          "displayName": "Hero Search",
          "description": "Render a larger search field that is more prominent on the page",
          "help": "#oj-input-search-hero"
        },
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%.  These max width convenience classes are available to create a medium or small field.<br>  The class is applied to the root element.",
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field."
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field."
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%.  These width convenience classes are available to create a medium or small field.<br>  The class is applied to the root element.",
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field."
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field."
            }
          ]
        }
      ],
      "since": "9.0.0",
      "properties": {
        "suggestions": {
          "type": "object",
          "description": "Data for the InputSearch suggestions.",
          "displayName": "Suggestions",
          "help": "#suggestions",
          "minCapabilities": {
            "filter": {
              "textFilter": true
            }
          },
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "11.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "suggestionItemText": {
          "type": "string|number|function",
          "description": "Specifies the text string to render for a suggestion.",
          "displayName": "Suggestion Item Text",
          "help": "#suggestionItemText",
          "value": "label"
        },
        "placeholder": {
          "type": "string",
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "displayName": "Placeholder",
          "help": "#placeholder",
          "translatable": true,
          "value": ""
        },
        "rawValue": {
          "type": "string",
          "description": "Read-only property used for retrieving the current value from the input field in string form.",
          "displayName": "Raw Value",
          "help": "#rawValue",
          "value": null,
          "readOnly": true,
          "writeback": true
        },
        "value": {
          "type": "string",
          "description": "The value of the element.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "#value",
          "writeback": true,
          "value": null
        }
      },
      "events": {
        "ojValueAction": {
          "description": "Event triggered when search text is submitted by the user, even if the text hasn't changed.",
          "help": "#event:valueAction",
          "detail": {
            "value": {
              "type": "string",
              "description": "The search text."
            },
            "itemContext": {
              "type": "object",
              "description": "The data provider context for the search text, if available.",
              "properties": {
                "data": {
                  "type": "any"
                },
                "key": {
                  "type": "any"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "indexFromParent": {
                      "type": "number"
                    },
                    "isLeaf": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "any"
                    },
                    "message": {
                      "type": "object",
                      "properties": {
                        "detail": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string|number",
                          "enumValues": [
                            "error",
                            "confirmation",
                            "info",
                            "warning",
                            "fatal"
                          ]
                        },
                        "summary": {
                          "type": "string"
                        }
                      }
                    },
                    "parentKey": {
                      "type": "any"
                    },
                    "suggestion": {
                      "type": "object"
                    },
                    "treeDepth": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "previousValue": {
              "type": "string",
              "description": "The previous search text."
            }
          }
        }
      },
      "slots": {
        "suggestionItemTemplate": {
          "description": "The suggestionItemTemplate slot is used to specify the template for rendering each suggestion in the dropdown list.",
          "help": "#suggestionItemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any",
              "description": "The data for the current suggestion"
            },
            "key": {
              "type": "any",
              "description": "The key of the current suggestion"
            },
            "metadata": {
              "type": "object",
              "description": "The metadata for the current suggestion"
            },
            "index": {
              "type": "number",
              "description": "The zero-based index of the current suggestion"
            },
            "searchText": {
              "type": "string",
              "description": "The search text entered by the user"
            }
          }
        }
      },
      "methods": {
        "focus": {
          "return": "any"
        },
        "blur": {
          "return": "any"
        },
        "_testChangeValue": {
          "visible": false,
          "params": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "_testChangeValueByKey": {
          "visible": false,
          "params": [
            {
              "name": "key",
              "type": "any"
            }
          ],
          "return": "any"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-input-text": {
      "name": "oj-input-text",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Text",
      "implements": [
        "InputTextElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            },
            {
              "styleGroup": [
                "oj-text-field-start-end-icon"
              ],
              "description": "Use this class on a child div element if you want an icon to display in the start or end slot of an oj-input-text element."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input",
          "uxSpecs": [
            "input-text"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        },
        {
          "name": "oj-text-field-start-end-icon",
          "kind": "class",
          "displayName": "Start-End Icon",
          "description": "Use this class on a child div element if you want an icon to display in the start or end slot of an oj-input-text element.",
          "styleSelector": "oj-input-text > div",
          "help": "#oj-text-field-start-end-icon"
        }
      ],
      "description": "An input text allows the user to enter a text value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputText.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled",
            "readonly",
            "clearIcon",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "clearIcon": {
          "description": "Specifies if an icon to clear the input field should be visible.",
          "type": "string",
          "displayName": "Clear Icon",
          "value": "never",
          "help": "#clearIcon",
          "enumValues": [
            "always",
            "conditional",
            "never"
          ],
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon is always visible",
              "displayName": "Always"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value, and it either has focus or the mouse is over the field.",
              "displayName": "Conditional"
            },
            "never": {
              "description": "The clear icon is never visible",
              "displayName": "Never"
            }
          }
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated module you need, like ojvalidation-base or ojvalidation-number module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "length": {
          "description": "An object whose properties describe the maximum length attributes. // * @ojtsignore tsdefonly",
          "type": "object",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "description": "Specifies the manner in which the input text characters has to be counted.",
              "type": "string",
              "displayName": "Count By",
              "value": "codePoint",
              "help": "#length.countBy",
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length",
                  "displayName": "Code Unit"
                }
              }
            },
            "max": {
              "description": "Specifies the maximum number of characters to be entered in the input text.",
              "type": "number|null",
              "displayName": "Max",
              "value": null,
              "help": "#length.max"
            }
          }
        },
        "list": {
          "description": "Specifies a list of pre-defined options to present to the user. See the Help documentation for more information.",
          "type": "string",
          "displayName": "List",
          "help": "#list"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleClearIcon": {
              "description": "Tooltip for the clear icon.",
              "type": "string",
              "help": "#translations.accessibleClearIcon"
            },
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the component.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        },
        "virtualKeyboard": {
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Virtual Keyboard",
          "value": "auto",
          "help": "#virtualKeyboard",
          "enumValues": [
            "auto",
            "email",
            "number",
            "search",
            "tel",
            "text",
            "url"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The component will determine the best mobile virtual keyboard to use. For example, it may look at the converter's resolvedOptions to determine the mobile virtual keyboard type.",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a mobile virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "number": {
              "description": "Use a mobile virtual keyboard for entering numbers.",
              "displayName": "Number"
            },
            "search": {
              "description": "Use a mobile virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a mobile virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a mobile virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a mobile virtual keyboard for URL entry.",
              "displayName": "Url"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "start": {
          "description": "The start slot enables adding leading html content such as an icon",
          "help": "#start"
        },
        "end": {
          "description": "The end slot enables adding trailing html content such as an icon button.",
          "help": "#end"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-input-time": {
      "name": "oj-input-time",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Input Time",
      "implements": [
        "InputTimeElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-clock",
          "uxSpecs": [
            "input-time"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "An input time allows the user to enter or select a time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojInputTime.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled",
            "readonly",
            "min",
            "max",
            "converter"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the time value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Specifies whether keyboard entry of text is allowed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "#keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the time can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the time.",
              "displayName": "Enabled"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum selectable time, in ISO string format. When set to null, there is no maximum. min and max must be in the same ISO string format as value (local, zulu, or offset)",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "time",
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum selectable time, in ISO string format. When set to null, there is no minimum. min and max must be in the same ISO string format as value (local, zulu, or offset)",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "time",
          "help": "#min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead."
                }
              ],
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead. As of 11.0.0 this property is ignored and an error is logged.",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$inputDateTimeRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render the time picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "#renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "#timePicker",
          "properties": {
            "footerLayout": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "8.2.0",
                  "description": "This attribute is deprecated and should not be used as it will be ignored in new UX design."
                }
              ],
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "#timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button. When user clicks on the Now button, it will highlight the current time in the timepicker.",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "#timePicker.showOn",
              "enumValues": [
                "focus",
                "image",
                "userFocus"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                },
                "userFocus": {
                  "description": "when the element receives focus from a user action (such as tab key press) or the calendar image is clicked. Programmatic calls to .focus() do not show the picker.",
                  "displayName": "User Focus"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputTime. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "#timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "ampmWheelLabel": {
              "description": "Label for the AM/PM wheel for accessibility.",
              "type": "string",
              "help": "#translations.ampmWheelLabel"
            },
            "cancelText": {
              "description": "The text to the cancel button.",
              "type": "string",
              "help": "#translations.cancelText"
            },
            "currentTimeText": {
              "description": "The text to display for the current time link.",
              "type": "string",
              "help": "#translations.currentTimeText"
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
              "type": "object",
              "help": "#translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components.",
                  "type": "object",
                  "help": "#translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum.",
                      "type": "string",
                      "help": "#translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "hourWheelLabel": {
              "description": "Label for the Hour wheel for accessibility.",
              "type": "string",
              "help": "#translations.hourWheelLabel"
            },
            "minuteWheelLabel": {
              "description": "Label for the Minute wheel for accessibility.",
              "type": "string",
              "help": "#translations.minuteWheelLabel"
            },
            "okText": {
              "description": "The text to the OK button.",
              "type": "string",
              "help": "#translations.okText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "tooltipTime": {
              "description": "Tooltip text for the time icon.",
              "type": "string",
              "help": "#translations.tooltipTime"
            },
            "tooltipTimeDisabled": {
              "description": "Tooltip text for the time icon when the component is disabled.",
              "type": "string",
              "help": "#translations.tooltipTimeDisabled"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation-datetime module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the input time element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "format": "time",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "hide": {
          "description": "Hides the timepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "#hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "show": {
          "description": "Shows the timepicker",
          "help": "#show",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-label-value": {
      "name": "oj-label-value",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Label Value",
      "implements": [
        "LabelValueElement"
      ],
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlabelvalue",
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-label-value",
          "uxSpecs": [
            "label"
          ]
        }
      },
      "description": "A label value is used to lay out a label and value, it is most commonly used in a form layout.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLabelValue.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelEdge",
            "labelWidth",
            "colspan"
          ]
        }
      ],
      "properties": {
        "colspan": {
          "description": "Specifies how many columns this label/value pair will occupy in the parent form layout. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Colspan",
          "value": 1,
          "help": "#colspan"
        },
        "labelEdge": {
          "description": "Specifies how the label is aligned with its value component.",
          "type": "string",
          "displayName": "Label Edge",
          "value": "inherit",
          "help": "#labelEdge",
          "enumValues": [
            "inherit",
            "inside",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "Label will inherit label-edge from its closest custom element ancestor element.",
              "displayName": "Inherit"
            },
            "inside": {
              "description": "Label is on top of its value component, with a smaller font-size applied to any oj-label child.",
              "displayName": "Inside"
            },
            "start": {
              "description": "Label is inline with the start of its value component",
              "displayName": "Start"
            },
            "top": {
              "description": "Label is on top of its value component.",
              "displayName": "Top"
            }
          }
        },
        "labelWidth": {
          "description": "Specifies the label width. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Width",
          "value": "inherit",
          "help": "#labelWidth"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "*"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "*"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "label": {
          "description": "The label slot is used to specify the 'label' part of a label/value form layout item.",
          "help": "#label"
        },
        "value": {
          "description": "The value slot is used to specify the 'value' part of a label/value form layout item.",
          "help": "#value"
        }
      }
    },
    "oj-label": {
      "name": "oj-label",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Label",
      "implements": [
        "LabelElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlabel",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-label-accesskey"
              ],
              "description": "Use this in a span around a single text character in the oj-label's text. It styles the character in a way that indicates to the user that this character is the accesskey."
            },
            {
              "styleGroup": [
                "oj-label-inline"
              ],
              "description": "Place on the oj-label element to inline the label with the sibling DOM element when you don't want to use the responsive design classes (e.g., oj-md-labels-inline)."
            },
            {
              "styleGroup": [
                "oj-label-inline-top"
              ],
              "description": "Place on the oj-label element together with oj-label-inline to inline the label with the sibling DOM element and have zero margin-top."
            },
            {
              "styleGroup": [
                "oj-label-nowrap"
              ],
              "description": "Place on the oj-label element to have it not wrap when you don't want to use the responsive design classes (e.g., oj-md-labels-nowrap or oj-md-label-nowrap)."
            }
          ],
          "defaultColumns": "3",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-label",
          "uxSpecs": [
            "label"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-label-accesskey",
          "kind": "class",
          "displayName": "AccessKey",
          "description": "Use this in a span around a single text character in the oj-label's text. It styles the character in a way that indicates to the user that this character is the accesskey.",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET's accessibility team discourages access keys, so this styleclass has been deprecated."
            }
          ],
          "help": "#oj-label-accesskey"
        },
        {
          "name": "oj-label-inline",
          "kind": "class",
          "displayName": "Inline",
          "description": "Place on the oj-label element to inline the label with the sibling DOM element when you don't want to use the responsive design classes (e.g., oj-md-labels-inline).",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "This class is not supported in the Redwood theme, and will be removed from the JET API in a future release. Use a JET oj-label-value with label-edge='start' instead."
            }
          ],
          "help": "#oj-label-inline"
        },
        {
          "name": "oj-label-inline-top",
          "kind": "class",
          "displayName": "Inline Top",
          "description": "Place on the oj-label element together with oj-label-inline to inline the label with the sibling DOM element and have zero margin-top.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "This class is not supported in the Redwood theme, and will be removed from the JET API in a future release. Use a JET oj-label-value with label-edge='start' instead."
            }
          ],
          "help": "#oj-label-inline-top"
        },
        {
          "name": "oj-label-nowrap",
          "kind": "class",
          "displayName": "No Wrap",
          "description": "Place on the oj-label element to have it not wrap when you don't want to use the responsive design classes (e.g., oj-md-labels-nowrap or oj-md-label-nowrap).",
          "help": "#oj-label-nowrap"
        }
      ],
      "styleVariables": [
        {
          "description": "Label font size",
          "name": "oj-label-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label font weight",
          "name": "oj-label-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label line height",
          "name": "oj-label-line-height",
          "formats": [
            "number"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label font color",
          "name": "oj-label-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Disabled label font color",
          "name": "oj-label-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label required char font size",
          "name": "oj-label-required-char-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Label required icon color",
          "name": "oj-label-required-icon-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Inside label font size",
          "name": "oj-label-inside-edge-font-size",
          "formats": [
            "length"
          ],
          "help": "#oj-label-css-set2"
        },
        {
          "description": "Inside label font weight",
          "name": "oj-label-inside-edge-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-label-css-set2"
        },
        {
          "description": "Inside label edge line height",
          "name": "oj-label-inside-edge-line-height",
          "formats": [
            "number"
          ],
          "help": "#oj-label-css-set2"
        },
        {
          "description": "Inside label edge position top",
          "name": "oj-label-inside-edge-position-top",
          "formats": [
            "length"
          ],
          "help": "#oj-label-css-set2"
        },
        {
          "description": "Inside label edge color",
          "name": "oj-label-inside-edge-color",
          "formats": [
            "color"
          ],
          "help": "#oj-label-css-set2"
        }
      ],
      "description": "A label is a short description of requested input.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLabel.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "for",
            "showRequired"
          ]
        }
      ],
      "properties": {
        "for": {
          "description": "Specifies the form element associated with this label. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "For",
          "value": null,
          "help": "#for"
        },
        "help": {
          "description": "Help information associated with this label.",
          "type": "object|null",
          "displayName": "Help",
          "value": {
            "definition": null,
            "source": null
          },
          "help": "#help",
          "properties": {
            "definition": {
              "description": "help definition text",
              "type": "string|null",
              "displayName": "Definition"
            },
            "source": {
              "description": "help source url",
              "type": "string|null",
              "displayName": "Source"
            }
          }
        },
        "labelId": {
          "description": "Specifies the id to set on the internal label element, if required. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Label Id",
          "value": null,
          "help": "#labelId"
        },
        "showRequired": {
          "description": "Specifies whether the label should render an icon indicating that the associated form field requires a value. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Show Required",
          "value": false,
          "help": "#showRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "tooltipHelp": {
              "description": "Used for the default help icon tooltip.. Most likely the application developer would use the oj-label's help.definition property to specify the help definition text per oj-label element.",
              "type": "string",
              "help": "#translations.tooltipHelp"
            },
            "tooltipRequired": {
              "description": "Used for the default required icon tooltip.",
              "type": "string",
              "help": "#translations.tooltipRequired"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-led-gauge": {
      "name": "oj-led-gauge",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Led Gauge",
      "implements": [
        "LedGaugeElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-gauge-led"
        }
      },
      "status": [
        {
          "type": "deprecated",
          "since": "13.1.0",
          "description": "Use oj-badge classes or icons instead."
        }
      ],
      "styleVariables": [
        {
          "description": "Font weight for metric label.",
          "name": "--oj-gauge-metric-label-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-led-gauge-css-set1"
        },
        {
          "description": "Led gauge small size",
          "name": "oj-led-gauge-sm-size",
          "formats": [
            "length"
          ],
          "help": "#oj-led-gauge-css-set2"
        },
        {
          "description": "Led gauge medium size",
          "name": "oj-led-gauge-md-size",
          "formats": [
            "length"
          ],
          "help": "#oj-led-gauge-css-set2"
        },
        {
          "description": "Led gauge large size",
          "name": "oj-led-gauge-lg-size",
          "formats": [
            "length"
          ],
          "help": "#oj-led-gauge-css-set2"
        }
      ],
      "description": "A LED gauge displays information graphically, highlighting a specific metric value in relation to its thresholds.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLedGauge.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "rotation",
            "metricLabel.rendered",
            "metricLabel.textType",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "thresholds"
          ]
        }
      ],
      "properties": {
        "borderColor": {
          "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "color": {
          "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "label": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This attribute is deprecated. Use metric-label instead."
            }
          ],
          "description": "An object defining the label.",
          "type": "object",
          "displayName": "Label",
          "help": "#label",
          "properties": {
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "#label.style"
            },
            "text": {
              "description": "The text for the label.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "#label.text"
            }
          }
        },
        "markerSize": {
          "description": "Specifies the led size.",
          "type": "string",
          "displayName": "Marker Size",
          "value": "fit",
          "help": "#markerSize",
          "enumValues": [
            "fit",
            "lg",
            "md",
            "sm"
          ],
          "propertyEditorValues": {
            "fit": {
              "description": "The size of the led will be determined based on application styling. If no explicit component size is specified, a default size will be used.",
              "displayName": "Fit"
            },
            "lg": {
              "description": "Large size, as determined by the theme, will be used for the gauge.",
              "displayName": "Lg"
            },
            "md": {
              "description": "Medium size, as determined by the theme, will be used for the gauge.",
              "displayName": "Md"
            },
            "sm": {
              "description": "Small size, as determined by the theme, will be used for the gauge.",
              "displayName": "Sm"
            }
          }
        },
        "max": {
          "description": "The maximum value of the gauge.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "#max"
        },
        "metricLabel": {
          "description": "An object defining the value label.",
          "type": "object",
          "displayName": "Metric Label",
          "help": "#metricLabel",
          "properties": {
            "converter": {
              "description": "The converter used to format the labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "#metricLabel.converter"
            },
            "rendered": {
              "description": "Defines if the label is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "#metricLabel.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "help": "#metricLabel.scaling",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "#metricLabel.style"
            },
            "text": {
              "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. The converter, scaling, and textType attributes are ignored when text is specified.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "#metricLabel.text"
            },
            "textType": {
              "description": "Defines whether the label is a number or a percentage of the total value.",
              "type": "string",
              "displayName": "Text Type",
              "value": "number",
              "help": "#metricLabel.textType",
              "enumValues": [
                "number",
                "percent"
              ],
              "propertyEditorValues": {
                "number": {
                  "displayName": "Number"
                },
                "percent": {
                  "displayName": "Percent"
                }
              }
            }
          }
        },
        "min": {
          "description": "The minimum value of the gauge.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "#min"
        },
        "rotation": {
          "description": "The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.",
          "type": "number",
          "displayName": "Rotation",
          "value": 0,
          "units": "degrees",
          "help": "#rotation",
          "enumValues": [
            "0",
            "180",
            "270",
            "90"
          ],
          "propertyEditorValues": {
            "0": {
              "displayName": "0"
            },
            "90": {
              "displayName": "90"
            },
            "180": {
              "displayName": "180"
            },
            "270": {
              "displayName": "270"
            }
          }
        },
        "size": {
          "description": "Fraction of area to use. Values range from 0 to 1.",
          "type": "number",
          "displayName": "Size",
          "value": 1,
          "maximum": 1,
          "minimum": 0,
          "help": "#size"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the gauge. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the gauge. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the threshold.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string",
                  "displayName": "Color"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number",
                  "displayName": "Max"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "displayName": "Short Desc"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "type": {
          "description": "The shape of the LED gauge. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
          "type": "string",
          "displayName": "Type",
          "value": "circle",
          "help": "#type",
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangle": {
              "displayName": "Triangle"
            }
          }
        },
        "value": {
          "description": "The metric value.",
          "type": "number|null",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "help": "#value"
        },
        "visualEffects": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated."
            }
          ],
          "description": "Defines whether the theme specific visual effects such as overlays and gradients are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "#visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getMetricLabel": {
          "description": "Returns the gauge's formatted metric label.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getMetricLabel",
          "return": "string"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The LED gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-legend-item": {
      "name": "oj-legend-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Legend Item",
      "implements": [
        "LegendItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend"
        }
      },
      "description": "The oj-legend-item element is used to declare properties for legend items. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLegendItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "#borderColor"
        },
        "categories": {
          "description": "An array of categories for the legend item. Legend items currently only support a single category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "categoryVisibility": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This attribute is deprecated. Use hidden-categories on oj-legend instead"
            }
          ],
          "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
          "type": "string",
          "displayName": "Category Visibility",
          "value": "visible",
          "help": "#categoryVisibility",
          "enumValues": [
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Legend item will have a hollow symbol.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "Legend item will be filled.",
              "displayName": "Visible"
            }
          }
        },
        "color": {
          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled on the legend item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "The drilling behavior is inherited from legend.",
              "displayName": "Inherit"
            },
            "off": {
              "description": "The legend item will not be drillable.",
              "displayName": "Off"
            },
            "on": {
              "description": "The legend item will be drillable.",
              "displayName": "On"
            }
          }
        },
        "lineStyle": {
          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Line Style",
          "value": "solid",
          "help": "#lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "description": "Line will have dashed strokes.",
              "displayName": "Dashed"
            },
            "dotted": {
              "description": "Line will have dotted strokes.",
              "displayName": "Dotted"
            },
            "solid": {
              "description": "Line will have a solid stroke.",
              "displayName": "Solid"
            }
          }
        },
        "lineWidth": {
          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "type": "number",
          "displayName": "Line Width",
          "help": "#lineWidth"
        },
        "markerColor": {
          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
          "type": "string",
          "displayName": "Marker Color",
          "format": "color",
          "help": "#markerColor"
        },
        "markerShape": {
          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "value": "square",
          "help": "#markerShape",
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "ellipse": {
              "displayName": "Ellipse"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSvgClassName": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The CSS style class to apply to the marker. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker SVG Class Name",
          "value": "",
          "help": "#markerSvgClassName"
        },
        "markerSvgStyle": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The inline style to apply to the marker. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Marker SVG Style",
          "help": "#markerSvgStyle"
        },
        "pattern": {
          "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "#pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "description": "Large checker pattern is applied to the data item.",
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "description": "Large cross hatch pattern is applied to the data item.",
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "description": "Large diagonal left pattern is applied to the data item.",
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "description": "Large diagonal right pattern is applied to the data item.",
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "description": "Large diamond pattern is applied to the data item.",
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "description": "Large triangle pattern is applied to the data item.",
              "displayName": "Large Triangle"
            },
            "none": {
              "description": "No pattern is applied to data item fill.",
              "displayName": "None"
            },
            "smallChecker": {
              "description": "Small checker pattern is applied to the data item.",
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "description": "Small cross hatch pattern is applied to the data item.",
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "description": "Small diagonal left pattern is applied to the data item.",
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "description": "Small diagonal right pattern is applied to the data item.",
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "description": "Small diamond pattern is applied to the data item.",
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "description": "Small triangle pattern is applied to the data item.",
              "displayName": "Small Triangle"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "source": {
          "description": "The URI of the image of the legend symbol.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "#source"
        },
        "svgClassName": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The CSS style class to apply to the legend item. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The inline style to apply to the legend item. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "help": "#svgStyle"
        },
        "symbolType": {
          "description": "The type of legend symbol to display.",
          "type": "string",
          "displayName": "Symbol Type",
          "value": "marker",
          "help": "#symbolType",
          "enumValues": [
            "image",
            "line",
            "lineWithMarker",
            "marker"
          ],
          "propertyEditorValues": {
            "image": {
              "description": "The legend symbol will be an image.",
              "displayName": "Image"
            },
            "line": {
              "description": "The legend symbol will be a line.",
              "displayName": "Line"
            },
            "lineWithMarker": {
              "description": "The legend symbol will be a line and a marker.",
              "displayName": "Line With Marker"
            },
            "marker": {
              "description": "The legend symbol will be a marker.",
              "displayName": "Marker"
            }
          }
        },
        "text": {
          "description": "The legend item text.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "help": "#text"
        }
      }
    },
    "oj-legend-section": {
      "name": "oj-legend-section",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Legend Section",
      "implements": [
        "LegendSectionElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend"
        }
      },
      "description": "The oj-legend-section element is used to declare properties for legend sections. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLegendSection.html",
      "properties": {
        "collapsible": {
          "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
          "type": "string",
          "displayName": "Collapsible",
          "value": "off",
          "help": "#collapsible",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "The legend section will not be collapsible.",
              "displayName": "Off"
            },
            "on": {
              "description": "The legend section will be collapsible.",
              "displayName": "On"
            }
          }
        },
        "text": {
          "description": "The title of the legend section.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "help": "#text"
        },
        "textHalign": {
          "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
          "type": "string",
          "displayName": "Text Halign",
          "value": "start",
          "help": "#textHalign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "description": "The section title will be center aligned.",
              "displayName": "Center"
            },
            "end": {
              "description": "The section title will be end aligned.",
              "displayName": "End"
            },
            "start": {
              "description": "The section title will be start aligned.",
              "displayName": "Start"
            }
          }
        },
        "textStyle": {
          "description": "The CSS style object defining the style of the section title. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
          "type": "object",
          "displayName": "Text Style",
          "value": {},
          "help": "#textStyle"
        }
      }
    },
    "oj-legend": {
      "name": "oj-legend",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Legend",
      "implements": [
        "LegendElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-legend",
          "uxSpecs": [
            "legend"
          ]
        }
      },
      "description": "A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojLegend.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "halign",
            "valign",
            "hoverBehavior",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "data": {
          "description": "Specifies the DataProvider for the sections and items of the legend. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "#drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Legend items will not be drillable.",
              "displayName": "Off"
            },
            "on": {
              "description": "Legend items will be drillable.",
              "displayName": "On"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the ids of sections that should be expanded on initial render. See the Help documentation for more information.",
          "type": "KeySet|null",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "halign": {
          "description": "Defines the horizontal alignment of the legend contents.",
          "type": "string",
          "displayName": "Halign",
          "value": "start",
          "help": "#halign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "description": "Legend contents will be center aligned.",
              "displayName": "Center"
            },
            "end": {
              "description": "Legend contents will be end aligned.",
              "displayName": "End"
            },
            "start": {
              "description": "Legend contents will be start aligned.",
              "displayName": "Start"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of categories that will be hidden.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "hideAndShowBehavior": {
          "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
          "type": "string",
          "displayName": "Hide And Show Behavior",
          "value": "off",
          "help": "#hideAndShowBehavior",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "legend cannot be used to initiate hide and show behavior on referenced data items",
              "displayName": "Off"
            },
            "on": {
              "description": "Legend can be used to initiate hide and show behavior on referenced data items.",
              "displayName": "On"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of categories that will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over a legend item.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "description": "Dimming hover behavior is applied.",
              "displayName": "Dim"
            },
            "none": {
              "description": "No hover behavior will be applied.",
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.1.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "Specifies initial hover delay in milliseconds for highlighting items in legend.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "minimum": 0,
          "units": "milliseconds",
          "help": "#hoverBehaviorDelay"
        },
        "orientation": {
          "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
          "type": "string",
          "displayName": "Orientation",
          "value": "vertical",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Legend items will be horizontally placed in available space.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Legend items will be vertically stacked.",
              "displayName": "Vertical"
            }
          }
        },
        "scrolling": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "Setting scrolling to off is not supported in Redwood theme and it is not recommended. As such, this attribute is deprecated."
            }
          ],
          "description": "Defines whether scrolling is enabled for the legend.",
          "type": "string",
          "displayName": "Scrolling",
          "value": "asNeeded",
          "help": "#scrolling",
          "enumValues": [
            "asNeeded",
            "off"
          ],
          "propertyEditorValues": {
            "asNeeded": {
              "description": "The legend will be scrollable if legend items cannot fit in the available space.",
              "displayName": "As Needed"
            },
            "off": {
              "description": "The legend will not be scrollable.",
              "displayName": "Off"
            }
          }
        },
        "sections": {
          "description": "An array of objects specifying the legend sections.",
          "type": "Array<Object>|null",
          "displayName": "Sections",
          "value": null,
          "help": "#sections",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "collapsible": {
                  "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
                  "type": "string",
                  "displayName": "Collapsible",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "expanded": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.1.0",
                      "description": "This attribute is deprecated. Applications should use the expanded API on oj-legend instead"
                    }
                  ],
                  "description": "Whether the section is initially expanded. Only applies if the section is collapsible.",
                  "type": "string",
                  "displayName": "Expanded",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "description": "The id of the legend section. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "string",
                  "displayName": "Id"
                },
                "items": {
                  "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
                  "type": "Array<Object>",
                  "displayName": "Items",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                      "type": "string",
                      "displayName": "Border Color"
                    },
                    "categories": {
                      "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item.",
                      "type": "Array<string>",
                      "displayName": "Categories"
                    },
                    "categoryVisibility": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "14.1.0",
                          "description": "This api is deprecated. Use hidden-categories in oj-legend instead."
                        }
                      ],
                      "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
                      "type": "string",
                      "displayName": "Category Visibility",
                      "value": "visible",
                      "enumValues": [
                        "hidden",
                        "visible"
                      ]
                    },
                    "color": {
                      "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
                      "type": "string",
                      "displayName": "Color"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled on the legend item. Drillable objects will show a pointer cursor on hover and fire ojDrill event on click. To enable drilling for all legend items at once, use the drilling attribute in the top level.",
                      "type": "string",
                      "displayName": "Drilling",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "id": {
                      "description": "The id of the legend item, which is provided as part of the context for events fired by the legend. If not specified, the id defaults to the text of the legend item if a DataProvider is not being used. For the DataProvider case, the key for the node will be used as the id.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "lineStyle": {
                      "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ]
                    },
                    "lineWidth": {
                      "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                      "type": "number",
                      "displayName": "Line Width"
                    },
                    "markerColor": {
                      "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
                      "type": "string",
                      "displayName": "Marker Color"
                    },
                    "markerShape": {
                      "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
                      "type": "string",
                      "displayName": "Marker Shape",
                      "value": "square",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "markerSvgClassName": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "14.1.0",
                          "description": "This is not recommended in the Redwood design system."
                        }
                      ],
                      "description": "The CSS style class to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute.",
                      "type": "string",
                      "displayName": "Marker SVG Class Name"
                    },
                    "markerSvgStyle": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "14.1.0",
                          "description": "This is not recommended in the Redwood design system."
                        }
                      ],
                      "description": "The inline style to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "Marker SVG Style"
                    },
                    "pattern": {
                      "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shortDesc": {
                      "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc"
                    },
                    "source": {
                      "description": "The URI of the image of the legend symbol.",
                      "type": "string",
                      "displayName": "Source"
                    },
                    "svgClassName": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "14.1.0",
                          "description": "This is not recommended in the Redwood design system."
                        }
                      ],
                      "description": "The CSS style class to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "14.1.0",
                          "description": "This is not recommended in the Redwood design system."
                        }
                      ],
                      "description": "The inline style to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "symbolType": {
                      "description": "The type of legend symbol to display.",
                      "type": "string",
                      "displayName": "Symbol Type",
                      "value": "marker",
                      "enumValues": [
                        "image",
                        "line",
                        "lineWithMarker",
                        "marker"
                      ]
                    },
                    "text": {
                      "description": "The legend item text.",
                      "type": "string",
                      "displayName": "Text"
                    }
                  }
                },
                "sections": {
                  "description": "An array of nested legend sections.",
                  "type": "Array<Object>",
                  "displayName": "Sections"
                },
                "title": {
                  "description": "The title of the legend section.",
                  "type": "string",
                  "displayName": "Title"
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "displayName": "Title Halign",
                  "value": "start",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ]
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Title Style"
                }
              }
            }
          }
        },
        "symbolHeight": {
          "description": "The height of the legend symbol in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Symbol Height",
          "value": 0,
          "units": "pixels",
          "help": "#symbolHeight"
        },
        "symbolWidth": {
          "description": "The width of the legend symbol in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Symbol Width",
          "value": 0,
          "units": "pixels",
          "help": "#symbolWidth"
        },
        "textStyle": {
          "description": "The CSS style object defining the style of the legend item text.",
          "type": "object",
          "displayName": "Text Style",
          "value": {},
          "help": "#textStyle"
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "tooltipCollapse": {
              "description": "Used for the collapse tooltip.",
              "type": "string",
              "help": "#translations.tooltipCollapse"
            },
            "tooltipExpand": {
              "description": "Used for the expand tooltip.",
              "type": "string",
              "help": "#translations.tooltipExpand"
            }
          }
        },
        "valign": {
          "description": "Defines the vertical alignment of the legend contents.",
          "type": "string",
          "displayName": "Valign",
          "value": "top",
          "help": "#valign",
          "enumValues": [
            "bottom",
            "middle",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "description": "The legend items will be bottom aligned.",
              "displayName": "Bottom"
            },
            "middle": {
              "description": "The legend items will be middle aligned.",
              "displayName": "Middle"
            },
            "top": {
              "description": "The legend items will be top aligned.",
              "displayName": "Top"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getItem": {
          "description": "Returns information for automation testing verification of a specified legend item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getItem",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired legend item.",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getPreferredSize": {
          "description": "Returns the preferred size of the legend, given the available width and height.",
          "help": "#getPreferredSize",
          "params": [
            {
              "name": "width",
              "description": "The available width for the legend to render within.",
              "type": "number"
            },
            {
              "name": "height",
              "description": "The available height for the legend to render within.",
              "type": "number"
            }
          ],
          "return": "object"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "getSection": {
          "description": "Returns information for automation testing verification of a specified legend section.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getSection",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired legend section.",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (single click on the legend item).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each legend item. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "LegendItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-legend> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "sectionTemplate": {
          "description": "The sectionTemplate slot is used to specify the template for creating each legend section. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#sectionTemplate",
          "preferredContent": [
            "LegendSectionElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-legend> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-list-item-layout": {
      "name": "oj-list-item-layout",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "ListItemLayoutElement"
      ],
      "description": "A List Item Layout represents layout used for list view item elements.",
      "displayName": "List Item Layout",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-list-item-layout",
          "uxSpecs": [
            "list-view"
          ]
        },
        "vbdt": {
          "module": "ojs/ojlistitemlayout",
          "defaultColumns": "12",
          "minColumns": "2"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojListItemLayout.html",
      "since": "9.0.0",
      "styleClasses": [
        {
          "name": "oj-listitemlayout-padding-off",
          "kind": "class",
          "displayName": "Padding Off",
          "description": "Turn off horizontal and vertical padding for the list item layout.",
          "help": "#oj-listitemlayout-padding-off"
        }
      ],
      "slots": {
        "": {
          "description": "The default slot accepts a default text.",
          "displayName": "default",
          "help": "#Default"
        },
        "overline": {
          "description": "The overline slot is for adding a overline text above the default text.",
          "help": "#overline"
        },
        "selector": {
          "description": "The selector slot can accept a oj-selector component and is optional.",
          "help": "#selector"
        },
        "leading": {
          "description": "The leading slot is used for adding a leading visual next to the selector. Leading slot can be an image, avatar or initials.",
          "help": "#leading"
        },
        "secondary": {
          "description": "The secondary slot is for adding a secondary text below the default text.",
          "help": "#secondary"
        },
        "tertiary": {
          "description": "The tertiary slot is for adding a tertiary text below the secondary text.",
          "help": "#tertiary"
        },
        "metadata": {
          "description": "The metadata for adding extra trailing information. Examples of metadata are author, date etc.",
          "help": "#metadata"
        },
        "trailing": {
          "description": "The trailing slot is used for adding a trailing visual.",
          "help": "#trailing"
        },
        "action": {
          "description": "The action slot is used for adding action buttons say like a toolbar.",
          "help": "#action"
        },
        "quaternary": {
          "description": "The quaternary slot is for adding a quaternary text below the tertiary text.",
          "help": "#quaternary"
        },
        "navigation": {
          "description": "The navigation slot is used for adding a navigation text below the trailing slot.",
          "help": "#navigation"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-list-view": {
      "name": "oj-list-view",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "List View",
      "implements": [
        "ListViewElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlistview",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-clickthrough-disabled"
              ],
              "description": "Use on any element inside an item where you do not want ListView to process the click event."
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-full-width"
              ],
              "description": "Use when ListView occupies the entire width of the page. Removes left and right borders in card-layout mode and adjust positioning of cards to improve visual experience."
            },
            {
              "styleGroup": [
                "oj-group-header-lg"
              ],
              "description": "Use to style group headers as large size group headers according to the current theme."
            },
            {
              "styleGroup": [
                "oj-group-header-md"
              ],
              "description": "Use to style group headers as medium size group headers according to the current theme."
            },
            {
              "styleGroup": [
                "oj-group-header-sm"
              ],
              "description": "Use to style group headers as small size group headers according to the current theme."
            },
            {
              "styleGroup": [
                "oj-listview-card-layout"
              ],
              "description": "Shows items as cards and lay them out in a grid."
            },
            {
              "styleGroup": [
                "oj-listview-drag-handle"
              ],
              "description": "Use to show a drag handle in the item to facilitate item reordering or drag and drop."
            },
            {
              "styleGroup": [
                "oj-listview-drill-icon"
              ],
              "description": "Use to show a drill-to-detail icon in the item."
            },
            {
              "styleGroup": [
                "oj-listview-full-width"
              ],
              "description": "Use when ListView occupies the entire width of the page. Removes left and right borders in card-layout mode and adjust positioning of cards to improve visual experience."
            },
            {
              "styleGroup": [
                "oj-listview-item-layout"
              ],
              "description": "Use when the page author overrides the default styling on the item root element and wants to apply the item style on some other element."
            },
            {
              "styleGroup": [
                "oj-listview-item-padding-off"
              ],
              "description": "Use when the page author wants to remove the default padding around the item. This is mostly used in the case where the component used inside the itemTemplate already supply its own padding (ex: oj-list-item-layout), and therefore the default padding provided by ListView should be remove."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-list",
          "uxSpecs": [
            "list-view"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-clickthrough-disabled",
          "kind": "class",
          "displayName": "Click Disabled",
          "description": "Use on any element inside an item where you do not want ListView to process the click event.",
          "status": [
            {
              "type": "deprecated",
              "since": "10.0.0",
              "description": "Specify data-oj-clickthrough attribute with value disabled instead."
            }
          ],
          "styleSelector": "oj-list-view, oj-list-view *",
          "help": "#oj-clickthrough-disabled"
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Use when ListView occupies the entire width of the page. Removes left and right borders in card-layout mode and adjust positioning of cards to improve visual experience.",
          "status": [
            {
              "type": "deprecated",
              "since": "10.0.0",
              "description": "Use oj-listview-full-width instead."
            }
          ],
          "help": "#oj-full-width"
        },
        {
          "name": "oj-group-header-lg",
          "kind": "class",
          "displayName": "Large Group Header",
          "description": "Use to style group headers as large size group headers according to the current theme.",
          "help": "#oj-group-header-lg"
        },
        {
          "name": "oj-group-header-md",
          "kind": "class",
          "displayName": "Medium Group Header",
          "description": "Use to style group headers as medium size group headers according to the current theme.",
          "help": "#oj-group-header-md"
        },
        {
          "name": "oj-group-header-sm",
          "kind": "class",
          "displayName": "Small Group Header",
          "description": "Use to style group headers as small size group headers according to the current theme.",
          "help": "#oj-group-header-sm"
        },
        {
          "name": "oj-listview-card-layout",
          "kind": "class",
          "displayName": "Card Layout",
          "description": "Shows items as cards and lay them out in a grid.",
          "help": "#oj-listview-card-layout"
        },
        {
          "name": "oj-listview-drag-handle",
          "kind": "class",
          "displayName": "Drag Handle",
          "description": "Use to show a drag handle in the item to facilitate item reordering or drag and drop.",
          "styleSelector": "oj-list-view *",
          "help": "#oj-listview-drag-handle"
        },
        {
          "name": "oj-listview-drill-icon",
          "kind": "class",
          "displayName": "Drill Icon",
          "description": "Use to show a drill-to-detail icon in the item.",
          "styleSelector": "oj-list-view *",
          "help": "#oj-listview-drill-icon"
        },
        {
          "name": "oj-listview-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Use when ListView occupies the entire width of the page. Removes left and right borders in card-layout mode and adjust positioning of cards to improve visual experience.",
          "help": "#oj-listview-full-width"
        },
        {
          "name": "oj-listview-item-layout",
          "kind": "class",
          "displayName": "Item Layout",
          "description": "Use when the page author overrides the default styling on the item root element and wants to apply the item style on some other element.",
          "styleSelector": "oj-list-view *",
          "help": "#oj-listview-item-layout"
        },
        {
          "name": "oj-listview-item-padding-off",
          "kind": "class",
          "displayName": "Item Padding Off",
          "description": "Use when the page author wants to remove the default padding around the item. This is mostly used in the case where the component used inside the itemTemplate already supply its own padding (ex: oj-list-item-layout), and therefore the default padding provided by ListView should be remove.",
          "styleSelector": "oj-list-view",
          "help": "#oj-listview-item-padding-off"
        }
      ],
      "styleVariables": [
        {
          "description": "List view horizontal item padding",
          "name": "oj-list-view-item-padding-horizontal",
          "formats": [
            "length"
          ],
          "help": "#oj-list-view-css-set1"
        },
        {
          "description": "List view group header background color",
          "name": "oj-list-view-group-header-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-list-view-css-set2"
        },
        {
          "description": "List view group header sticky background color",
          "name": "oj-list-view-group-header-bg-color-sticky",
          "formats": [
            "color"
          ],
          "help": "#oj-list-view-css-set2"
        },
        {
          "description": "List view group header font weight",
          "name": "oj-list-view-group-header-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-list-view-css-set2"
        },
        {
          "description": "List view group header font size",
          "name": "oj-list-view-group-header-font-size",
          "formats": [
            "length"
          ],
          "help": "#oj-list-view-css-set2"
        },
        {
          "description": "List view group header horizontal line height",
          "name": "oj-list-view-group-header-line-height",
          "formats": [
            "number"
          ],
          "help": "#oj-list-view-css-set2"
        }
      ],
      "description": "A list view displays data items as a list or a grid with highly interactive features.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojListView.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selected"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "#currentItem"
        },
        "data": {
          "description": "Specifies the data for the list. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "display": {
          "description": "Specifies how the items should be displayed.",
          "type": "string",
          "displayName": "Display",
          "value": "list",
          "help": "#display",
          "enumValues": [
            "card",
            "list"
          ],
          "propertyEditorValues": {
            "card": {
              "description": "Display items as cards.",
              "displayName": "Card"
            },
            "list": {
              "description": "Display items as list items.",
              "displayName": "List"
            }
          }
        },
        "dnd": {
          "description": "Customizes the drag and drop functionality. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "Customizes the drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "#dnd.drag",
              "properties": {
                "items": {
                  "description": "An object that describes drag functionality for a selected set of items. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Items",
                  "help": "#dnd.drag.items",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies one or more MIME types to use for the dragged data in the dataTransfer object. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drag.items.dataTypes"
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "#dnd.drag.items.drag"
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "#dnd.drag.items.dragEnd"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "#dnd.drag.items.dragStart"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "Customizes the drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "#dnd.drop",
              "properties": {
                "items": {
                  "description": "An object that describes drop functionality for a selected set of items.",
                  "type": "object",
                  "displayName": "Items",
                  "help": "#dnd.drop.items",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies one or more data types that this component can accept. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "#dnd.drop.items.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "#dnd.drop.items.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "#dnd.drop.items.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "#dnd.drop.items.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "#dnd.drop.items.drop"
                    }
                  }
                }
              }
            },
            "reorder": {
              "description": "Customizes the item reordering functionality.",
              "type": "object",
              "displayName": "Reorder",
              "help": "#dnd.reorder",
              "properties": {
                "items": {
                  "description": "Specify the item reordering functionality. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Items",
                  "value": "disabled",
                  "help": "#dnd.reorder.items",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Item reordering is disabled.",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Item reordering is enabled.",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "drillMode": {
          "description": "Specifies whether expand or collapse operations are allowed.",
          "type": "string",
          "displayName": "Drill Mode",
          "value": "collapsible",
          "help": "#drillMode",
          "enumValues": [
            "collapsible",
            "none"
          ],
          "propertyEditorValues": {
            "collapsible": {
              "description": "Group item can be expanded or collapsed by user.",
              "displayName": "Collapsible"
            },
            "none": {
              "description": "The expand state of a group item cannot be changed by user.",
              "displayName": "None"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "firstSelectedItem": {
          "description": "Specifies the key and data of the first selected item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "First Selected Item",
          "value": {
            "key": null,
            "data": null
          },
          "writeback": true,
          "readOnly": true,
          "help": "#firstSelectedItem"
        },
        "gridlines": {
          "description": "Customizes the functionality of how gridlines are shown in various parts of the list.",
          "type": "object",
          "displayName": "Gridlines",
          "help": "#gridlines",
          "properties": {
            "item": {
              "description": "Specifies whether the grid lines should be visible.",
              "type": "string",
              "displayName": "Item",
              "value": "visible",
              "help": "#gridlines.item",
              "enumValues": [
                "hidden",
                "visible",
                "visibleExceptLast"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "The horizontal gridlines are hidden.",
                  "displayName": "Hidden"
                },
                "visible": {
                  "description": "The horizontal gridlines are visible.",
                  "displayName": "Visible"
                },
                "visibleExceptLast": {
                  "description": "The horizontal gridlines are visible, except for the last item. Note this will not have an effect for themes that renders a bottom border for the component.",
                  "displayName": "Visible Except Last"
                }
              }
            }
          }
        },
        "groupHeaderPosition": {
          "description": "Specifies whether group header should stick to the top as user scrolls.",
          "type": "string",
          "displayName": "Group Header Position",
          "value": "sticky",
          "help": "#groupHeaderPosition",
          "enumValues": [
            "static",
            "sticky"
          ],
          "propertyEditorValues": {
            "static": {
              "description": "The group header position updates as user scrolls.",
              "displayName": "Static"
            },
            "sticky": {
              "description": "The group header is fixed at the top when user scrolls.",
              "displayName": "Sticky"
            }
          }
        },
        "item": {
          "description": "Customizes the functionality of each item on the list.",
          "type": "object",
          "displayName": "Item",
          "help": "#item",
          "properties": {
            "focusable": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "13.0.0",
                  "description": "Not accessible by screen reader."
                }
              ],
              "description": "Specifies whether the item can receive keyboard focus. See the Help documentation for more information.",
              "type": "boolean|function",
              "displayName": "Focusable",
              "value": true,
              "help": "#item.focusable"
            },
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "null|function",
              "displayName": "Renderer",
              "value": null,
              "help": "#item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "boolean|function",
              "displayName": "Selectable",
              "value": true,
              "help": "#item.selectable"
            }
          }
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls down the list.",
          "type": "string|null",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "#scrollPolicy",
          "enumValues": [
            "auto",
            "loadAll",
            "loadMoreOnScroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The behavior is determined by the component. By default the behavior is the same as \"loadMoreOnScroll\" except when legacy TableDataSource is used, in which case the behavior is the same as \"loadAll\".",
              "displayName": "Auto"
            },
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data is fetched when the user scrolls towards the bottom of the ListView.",
              "displayName": "Load More On Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.",
          "type": "Object<string, number>|null",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "description": "The number of items to fetch in each block",
              "type": "number",
              "displayName": "Fetch Size",
              "value": 25,
              "help": "#scrollPolicyOptions.fetchSize"
            },
            "maxCount": {
              "description": "The maximum total number of items to fetch",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "help": "#scrollPolicyOptions.maxCount"
            },
            "scroller": {
              "description": "The element used to determine the scroll position as well as the maximum scroll position. See the Help documentation for more information.",
              "type": "Element|string",
              "displayName": "Scroller",
              "value": null,
              "help": "#scrollPolicyOptions.scroller"
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the current scroll position of the list. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "#scrollPosition",
          "properties": {
            "index": {
              "description": "The zero-based index of the item. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number",
              "displayName": "Index"
            },
            "key": {
              "description": "The key of the item. If DataProvider is used for data and the key does not exists in the DataProvider, then the value is ignored. If DataProvider is not used then ListView will fetch and scroll until the item is found or the end of the list is reached and there's no more items to fetch.",
              "type": "any",
              "displayName": "Key"
            },
            "offsetX": {
              "description": "The horizontal offset in pixels relative to the item identified by key/index.",
              "type": "number",
              "displayName": "Offset X"
            },
            "offsetY": {
              "description": "The vertical offset in pixels relative to the item identified by key/index.",
              "type": "number",
              "displayName": "Offset Y"
            },
            "parent": {
              "description": "The key of the parent where the index is relative to. If not specified, then the root is assumed",
              "type": "any",
              "displayName": "Parent"
            },
            "x": {
              "description": "The horizontal position in pixels.",
              "type": "number",
              "displayName": "X"
            },
            "y": {
              "description": "The vertical position in pixels.",
              "type": "number",
              "displayName": "Y"
            }
          }
        },
        "scrollToKey": {
          "description": "Specifies the behavior when ListView needs to scroll to a position based on an item key.",
          "type": "string|null",
          "displayName": "Scroll To Key",
          "value": "auto",
          "help": "#scrollToKey",
          "enumValues": [
            "always",
            "auto",
            "capability",
            "never"
          ],
          "propertyEditorValues": {
            "always": {
              "description": "ListView will scroll to a position based on an item key as long as the key is valid.",
              "displayName": "Always"
            },
            "auto": {
              "description": "The behavior is determined by the component. By default the behavior is the same as \"capability\" except when legacy TableDataSource/TreeDataSource is used, in which case the behavior is the same as \"always\".",
              "displayName": "Auto"
            },
            "capability": {
              "description": "ListView will only scroll to a position based on an item key if either the item has already been fetched or if the associated DataProvider supports 'immediate' iterationSpeed for 'fetchFirst' capability.",
              "displayName": "Capability"
            },
            "never": {
              "description": "ListView will not change the scroll position if the request is based on an item key.",
              "displayName": "Never"
            }
          }
        },
        "selected": {
          "description": "Specifies the keys of the current selected items. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Selected",
          "eventGroup": "common",
          "writeback": true,
          "help": "#selected"
        },
        "selection": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "Use selected attribute instead."
            }
          ],
          "description": "Specifies the current selections in the list. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "selectionRequired": {
          "description": "Specifies whether selection is required on the ListView.",
          "type": "boolean",
          "displayName": "Selection Required",
          "value": false,
          "help": "#selectionRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleExpandCollapseInstructionText": {
              "description": "Provides instruction text for group header expand or collapse",
              "type": "string",
              "help": "#translations.accessibleExpandCollapseInstructionText"
            },
            "accessibleGroupCollapse": {
              "description": "Provides notification for group header collapse",
              "type": "string",
              "help": "#translations.accessibleGroupCollapse"
            },
            "accessibleGroupExpand": {
              "description": "Provides notification for group header expand",
              "type": "string",
              "help": "#translations.accessibleGroupExpand"
            },
            "accessibleNavigateSkipItems": {
              "description": "Provides properties to customize the screen reader text when focus skips a number of items as a result of up/down arrow navigation in card layout mode.",
              "type": "string",
              "help": "#translations.accessibleNavigateSkipItems"
            },
            "accessibleReorderAfterItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is after a certain item.",
              "type": "string",
              "help": "#translations.accessibleReorderAfterItem"
            },
            "accessibleReorderBeforeItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is before a certain item.",
              "type": "string",
              "help": "#translations.accessibleReorderBeforeItem"
            },
            "accessibleReorderInsideItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is inside a certain item.",
              "type": "string",
              "help": "#translations.accessibleReorderInsideItem"
            },
            "accessibleReorderTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for reordering items.",
              "type": "string",
              "help": "#translations.accessibleReorderTouchInstructionText"
            },
            "indexerCharacters": {
              "description": "Provides properties to customize the characters to display in the Indexer.",
              "type": "string",
              "help": "#translations.indexerCharacters"
            },
            "labelCopy": {
              "description": "Provides properties to customize the context menu copy label.",
              "type": "string",
              "help": "#translations.labelCopy"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label.",
              "type": "string",
              "help": "#translations.labelCut"
            },
            "labelPaste": {
              "description": "Provides properties to customize the context menu paste label.",
              "type": "string",
              "help": "#translations.labelPaste"
            },
            "labelPasteAfter": {
              "description": "Provides properties to customize the context menu paste after label.",
              "type": "string",
              "help": "#translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Provides properties to customize the context menu paste before label.",
              "type": "string",
              "help": "#translations.labelPasteBefore"
            },
            "msgFetchCompleted": {
              "description": "Provides properties to customize the message text used by ListView when all items are fetched.",
              "type": "string",
              "help": "#translations.msgFetchCompleted"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the message text used by ListView when waiting for data.",
              "type": "string",
              "help": "#translations.msgFetchingData"
            },
            "msgItemsAppended": {
              "description": "Provides properties to customize the message text used by ListView when items are appended.",
              "type": "string",
              "help": "#translations.msgItemsAppended"
            },
            "msgNoData": {
              "description": "Provides properties to customize the message text used by ListView when there are no items.",
              "type": "string",
              "help": "#translations.msgNoData"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDataForVisibleItem": {
          "description": "Gets the raw data of an item.",
          "help": "#getDataForVisibleItem",
          "params": [
            {
              "name": "context",
              "description": "The context of the item to retrieve raw data.",
              "type": "object"
            }
          ],
          "return": "any"
        },
        "getIndexerModel": {
          "description": "Gets the IndexerModel which can be used with the ojIndexer.",
          "status": [
            {
              "type": "deprecated",
              "since": "3.0.0",
              "description": "Implements your own IndexerModel or use the IndexerModelTreeDataSource class instead."
            }
          ],
          "help": "#getIndexerModel",
          "return": "object"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Redraw the entire list.",
          "help": "#refresh",
          "return": "void"
        },
        "scrollToItem": {
          "description": "Scrolls a loaded item until it is visible.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "The scrollToItem method is deprecated. Use scrollPosition instead."
            }
          ],
          "help": "#scrollToItem",
          "params": [
            {
              "name": "item",
              "description": "An object with a 'key' property that identifies the item to scroll to.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when the default animation of a particular action has ended.",
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "the action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when the default animation of a particular action is about to start.",
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "the action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered before an item is collapsed.",
          "cancelable": true,
          "help": "#event:beforeCollapse",
          "detail": {
            "key": {
              "description": "the key of the item to be collapsed",
              "type": "any"
            },
            "item": {
              "description": "the item to be collapsed",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Triggered before the current item is changed.",
          "cancelable": true,
          "help": "#event:beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered before an item is expanded.",
          "cancelable": true,
          "help": "#event:beforeExpand",
          "detail": {
            "key": {
              "description": "the key of the item to be expanded",
              "type": "any"
            },
            "item": {
              "description": "the item to be expanded",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after an item has been collapsed. See the Help documentation for more information.",
          "help": "#event:collapse",
          "detail": {
            "key": {
              "description": "The key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojCopy": {
          "description": "Triggered when the copy action is performed on an item.",
          "status": [
            {
              "type": "deprecated",
              "since": "11.0.0",
              "description": "Use event from context menu or KeyEvent instead."
            }
          ],
          "help": "#event:copy",
          "detail": {
            "items": {
              "description": "an array of items in which the copy action is performed on",
              "type": "Array<Element>"
            }
          }
        },
        "ojCut": {
          "description": "Triggered when the cut action is performed on an item.",
          "status": [
            {
              "type": "deprecated",
              "since": "11.0.0",
              "description": "Use event from context menu or KeyEvent instead."
            }
          ],
          "help": "#event:cut",
          "detail": {
            "items": {
              "description": "an array of items in which the cut action is performed on",
              "type": "Array<Element>"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after an item has been expanded. See the Help documentation for more information.",
          "help": "#event:expand",
          "detail": {
            "key": {
              "description": "The key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just expanded.",
              "type": "Element"
            }
          }
        },
        "ojItemAction": {
          "description": "Triggered when user performs an action gesture on an item.",
          "bubbles": true,
          "help": "#event:itemAction",
          "detail": {
            "context": {
              "description": "the context information about the item where the action gesture is performed on.",
              "type": "any"
            },
            "originalEvent": {
              "description": "the DOM event that triggers the action.",
              "type": "Event"
            }
          }
        },
        "ojPaste": {
          "description": "Triggered when the paste action is performed on an item.",
          "status": [
            {
              "type": "deprecated",
              "since": "11.0.0",
              "description": "Use event from context menu or KeyEvent instead."
            }
          ],
          "help": "#event:paste",
          "detail": {
            "item": {
              "description": "the element in which the paste action is performed on",
              "type": "Element"
            }
          }
        },
        "ojReorder": {
          "description": "Triggered after items are reordered, whether through a drag and drop action or a cut and paste action.",
          "help": "#event:reorder",
          "detail": {
            "items": {
              "description": "an array of items that are moved",
              "type": "Array<Element>"
            },
            "position": {
              "description": "the drop position relative to the reference item. Possible values are \"before\", \"after\", \"inside\"",
              "type": "string"
            },
            "reference": {
              "description": "the item where the moved items are drop on",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-list-view> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "item": {
              "description": "The current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item during initial rendering. Note the index is not updated in response to item additions and removals.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "string"
            },
            "depth": {
              "description": "The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node (available when hierarchical data is provided).",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
              "type": "string"
            }
          }
        },
        "noData": {
          "description": "The noData slot is used to specify the content to render when the list is empty.",
          "maxItems": 1,
          "help": "#noData",
          "data": {}
        }
      }
    },
    "oj-masonry-layout": {
      "name": "oj-masonry-layout",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Masonry Layout",
      "implements": [
        "MasonryLayoutElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmasonrylayout",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-masonrylayout-tile-1x1",
                "oj-masonrylayout-tile-1x2",
                "oj-masonrylayout-tile-1x3",
                "oj-masonrylayout-tile-2x1",
                "oj-masonrylayout-tile-2x2",
                "oj-masonrylayout-tile-2x3",
                "oj-masonrylayout-tile-3x1",
                "oj-masonrylayout-tile-3x2",
                "oj-masonrylayout-tile-3x3"
              ],
              "description": "Masonry tiles can be of pre-defined sizes spanning 1 to 3 columns and rows. There is a specific style class for each of the supported sizes. Use these classes on child elements of oj-masonry-layout."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-masonry-layout"
        }
      },
      "styleClasses": [
        {
          "name": "oj-masonrylayout-tile-[tile-size]",
          "kind": "template",
          "displayName": "Tile Size",
          "description": "Masonry tiles can be of pre-defined sizes spanning 1 to 3 columns and rows. There is a specific style class for each of the supported sizes. Use these classes on child elements of oj-masonry-layout.",
          "styleSelector": "oj-masonry-layout *",
          "help": "#oj-masonrylayout-tile-[tile-size]",
          "tokens": [
            {
              "name": "[tile-size]",
              "description": "Tile sizes for ojMasonryLayout children",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "1x1",
                  "displayName": "Tile 1x1",
                  "description": "A tile that spans 1 column and 1 row."
                },
                {
                  "name": "1x2",
                  "displayName": "Tile 1x2",
                  "description": "A tile that spans 1 column and 2 rows."
                },
                {
                  "name": "1x3",
                  "displayName": "Tile 1x3",
                  "description": "A tile that spans 1 column and 3 rows."
                },
                {
                  "name": "2x1",
                  "displayName": "Tile 2x1",
                  "description": "A tile that spans 2 columns and 1 row."
                },
                {
                  "name": "2x2",
                  "displayName": "Tile 2x2",
                  "description": "A tile that spans 2 columns and 2 rows."
                },
                {
                  "name": "2x3",
                  "displayName": "Tile 2x3",
                  "description": "A tile that spans 2 columns and 3 rows."
                },
                {
                  "name": "3x1",
                  "displayName": "Tile 3x1",
                  "description": "A tile that spans 3 columns and 1 row."
                },
                {
                  "name": "3x2",
                  "displayName": "Tile 3x2",
                  "description": "A tile that spans 3 columns and 2 rows."
                },
                {
                  "name": "3x3",
                  "displayName": "Tile 3x3",
                  "description": "A tile that spans 3 columns and 3 rows."
                }
              ]
            }
          ]
        }
      ],
      "styleVariables": [
        {
          "description": "Masonry layout tile width",
          "name": "oj-masonry-layout-tile-width",
          "formats": [
            "length"
          ],
          "help": "#oj-masonry-layout-css-set1"
        },
        {
          "description": "Masonry layout tile height",
          "name": "oj-masonry-layout-tile-height",
          "formats": [
            "length"
          ],
          "help": "#oj-masonry-layout-css-set1"
        }
      ],
      "description": "A masonry layout lays out its children in a grid of tiles.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMasonryLayout.html",
      "properties": {
        "reorderHandle": {
          "description": "Specifies the selector of the child DOM element that can be used to reorder the child.",
          "type": "string",
          "displayName": "Reorder Handle",
          "value": null,
          "help": "#reorderHandle"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "labelCut": {
              "description": "Context menu text used for cutting a tile.",
              "type": "string",
              "help": "#translations.labelCut"
            },
            "labelPasteAfter": {
              "description": "Context menu text used for pasting a tile after another tile.",
              "type": "string",
              "help": "#translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Context menu text used for pasting a tile before another tile.",
              "type": "string",
              "help": "#translations.labelPasteBefore"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "insertTile": {
          "description": "Insert a tile.",
          "help": "#insertTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to insert. The tile does not need to be a child of the oj-masonry-layout when this method is called. This method will reparent the tile to the oj-masonry-layout.",
              "type": "string"
            },
            {
              "name": "index",
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the visual state of the masonryLayout.",
          "help": "#refresh",
          "return": "void"
        },
        "removeTile": {
          "description": "Remove a tile.",
          "help": "#removeTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to remove.",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "resizeTile": {
          "description": "Resize a tile.",
          "help": "#resizeTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to resize.",
              "type": "string"
            },
            {
              "name": "sizeStyleClass",
              "description": "New size style class to apply to the tile.",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Event triggered when the default animation of a particular action has ended.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Event triggered when the default animation of a particular action is about to start. See the Help documentation for more information.",
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function after it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojBeforeInsert": {
          "description": "Event triggered before a tile is inserted.",
          "cancelable": true,
          "help": "#event:beforeInsert",
          "detail": {
            "tile": {
              "description": "The tile that is about to be inserted.",
              "type": "Element"
            },
            "index": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
              "type": "number"
            }
          }
        },
        "ojBeforeRemove": {
          "description": "Event triggered before a tile is removed.",
          "cancelable": true,
          "help": "#event:beforeRemove",
          "detail": {
            "tile": {
              "description": "The tile that will be removed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeReorder": {
          "description": "Event triggered before a tile is reordered.",
          "cancelable": true,
          "help": "#event:beforeReorder",
          "detail": {
            "tile": {
              "description": "The tile that will be reordered.",
              "type": "Element"
            },
            "fromIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile will be reordered.",
              "type": "number"
            }
          }
        },
        "ojBeforeResize": {
          "description": "Event triggered before a tile is resized.",
          "cancelable": true,
          "help": "#event:beforeResize",
          "detail": {
            "tile": {
              "description": "The tile that will be resized.",
              "type": "Element"
            },
            "previousSizeStyleClass": {
              "description": "The previous size style class applied to the tile.",
              "type": "string"
            },
            "sizeStyleClass": {
              "description": "The new size style class that will be applied to the tile.",
              "type": "string"
            }
          }
        },
        "ojInsert": {
          "description": "Event triggered after a tile is inserted.",
          "help": "#event:insert",
          "detail": {
            "tile": {
              "description": "The tile that was inserted.",
              "type": "Element"
            },
            "index": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile was inserted.",
              "type": "number"
            }
          }
        },
        "ojRemove": {
          "description": "Event triggered after a tile is removed.",
          "help": "#event:remove",
          "detail": {
            "tile": {
              "description": "The tile that was removed.",
              "type": "Element"
            }
          }
        },
        "ojReorder": {
          "description": "Event triggered after a tile is reordered.",
          "help": "#event:reorder",
          "detail": {
            "tile": {
              "description": "The tile that was reordered.",
              "type": "Element"
            },
            "fromIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile was reordered.",
              "type": "number"
            },
            "toIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children to which the tile was reordered.",
              "type": "number"
            }
          }
        },
        "ojResize": {
          "description": "Event triggered after a tile is resized.",
          "help": "#event:resize",
          "detail": {
            "tile": {
              "description": "The tile that was resized.",
              "type": "Element"
            },
            "previousSizeStyleClass": {
              "description": "The previous size style class applied to the tile.",
              "type": "string"
            },
            "sizeStyleClass": {
              "description": "The new size style class applied to the tile.",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-masonry-layout element accepts arbitrary direct child elements that can be sized and positioned, which it will lay out as a grid of tiles. See the Help documentation for more information.",
          "displayName": "default",
          "help": "#Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-menu-button": {
      "name": "oj-menu-button",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Menu Button",
      "implements": [
        "MenuButtonElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-button-sm",
                "oj-button-lg"
              ],
              "description": "Makes the button small or large."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-button",
          "uxSpecs": [
            "menu-button"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "button-size",
          "kind": "set",
          "displayName": "Button Size",
          "description": "Makes the button small or large.",
          "help": "#button-size",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-button-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Makes the button small."
            },
            {
              "name": "oj-button-lg",
              "kind": "class",
              "displayName": "Large",
              "description": "Makes the button large."
            }
          ]
        }
      ],
      "description": "A menu button launches a menu when clicked.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMenuButton.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "display",
            "chroming",
            "disabled"
          ]
        }
      ],
      "properties": {
        "chroming": {
          "description": "Indicates in what states the button has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "#chroming",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use solid instead.",
              "target": "propertyValue",
              "value": [
                "full"
              ]
            },
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use borderless instead.",
              "target": "propertyValue",
              "value": [
                "half"
              ]
            }
          ],
          "enumValues": [
            "borderless",
            "full",
            "half",
            "outlined",
            "solid"
          ],
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation. Borderless buttons are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "full": {
              "description": "Please use solid instead. In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states.",
              "displayName": "Half"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            }
          }
        },
        "disabled": {
          "description": "Specifies that the button element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "display": {
          "description": "Specifies whether the button displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "#display",
          "enumValues": [
            "all",
            "icons",
            "label"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "label": {
              "description": "Display only the label.",
              "displayName": "Label"
            }
          }
        },
        "label": {
          "description": "Text to show in the button. The label attribute takes precedence over the default DOM slot.",
          "type": "string",
          "displayName": "Label",
          "translatable": true,
          "help": "#label"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "eventGroup": "common",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:action"
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the button's text label. The oj-menu-button element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "#Default"
        },
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-menu-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-menu button element accepts DOM nodes as children with the endIcon slot.",
          "help": "#endIcon"
        },
        "menu": {
          "description": "The menu associated with the menu button. The oj-menu-button element accepts a single oj-menu element as a child with the menu slot.",
          "maxItems": 1,
          "help": "#menu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-menu-select-many": {
      "name": "oj-menu-select-many",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Menu Multi Select",
      "implements": [
        "MenuSelectManyElement"
      ],
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmenuselectmany",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-select-many"
        }
      },
      "description": "A menu select many allows the user to select one or more menu items from a set.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMenuSelectMany.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "options"
          ]
        }
      ],
      "properties": {
        "disabled": {
          "description": "Disables all the checkable menu items if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "options": {
          "description": "The checkable menu option items.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "disabled": {
                  "description": "menu item is disabled.",
                  "type": "boolean",
                  "displayName": "Disabled"
                },
                "id": {
                  "description": "menu item id.",
                  "type": "string",
                  "displayName": "Id"
                },
                "label": {
                  "description": "menu item label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "menu item value.",
                  "type": "any",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>",
          "displayName": "Value",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-menu-select-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        }
      }
    },
    "oj-menu": {
      "name": "oj-menu",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Menu",
      "implements": [
        "MenuElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmenu",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-menu-modal",
          "uxSpecs": [
            "menu"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Menu icon size",
          "name": "oj-menu-icon-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Padding between icon and menu edge",
          "name": "oj-menu-icon-to-edge-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Padding between text and start icon",
          "name": "oj-menu-text-to-start-icon-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Padding between text and end icon",
          "name": "oj-menu-text-to-end-icon-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Padding between text and menu edge",
          "name": "oj-menu-text-to-edge-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Menu divider margin",
          "name": "oj-menu-divider-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Menu horizontal margin when displayed as a sheet",
          "name": "oj-menu-sheet-margin-horizontal",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Menu item text color",
          "name": "oj-menu-item-text-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Menu icon color",
          "name": "oj-menu-icon-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A menu displays a list of options in a popup.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMenu.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "openOptions.display",
            "openOptions.initialFocus",
            "disabled"
          ]
        }
      ],
      "properties": {
        "disabled": {
          "description": "Disables the menu if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "openOptions": {
          "description": "Specifies settings for launching a menu. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Open Options",
          "help": "#openOptions",
          "properties": {
            "display": {
              "description": "Specifies whether the menu displays as a drop down or as a sheet. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Display",
              "value": "auto",
              "help": "#openOptions.display",
              "enumValues": [
                "auto",
                "dropDown",
                "sheet"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Displays the menu as a sheet or drop down, depending on the screen width.",
                  "displayName": "Auto"
                },
                "dropDown": {
                  "description": "Displays the menu as a drop down.",
                  "displayName": "Drop Down"
                },
                "sheet": {
                  "description": "Displays the menu as a sheet.",
                  "displayName": "Sheet"
                }
              }
            },
            "initialFocus": {
              "description": "Specifies focus behavior when the menu is initially opened.",
              "type": "string",
              "displayName": "Initial Focus",
              "value": "menu",
              "help": "#openOptions.initialFocus",
              "enumValues": [
                "firstItem",
                "menu",
                "none"
              ],
              "propertyEditorValues": {
                "firstItem": {
                  "description": "Focuses the first menu item (e.g. MenuButton DownArrow behavior).",
                  "displayName": "First Item"
                },
                "menu": {
                  "description": "Focuses the menu itself, with no menu item focused (e.g. typical Context Menu behavior).",
                  "displayName": "Menu"
                },
                "none": {
                  "description": "Leaves focus where it is, e.g. on the launching component. The application must verify that the result is accessible.",
                  "displayName": "None"
                }
              }
            },
            "launcher": {
              "description": "Specifies the DOM node that launches this menu. See the Help documentation for more information.",
              "type": "string|Element",
              "displayName": "Launcher",
              "value": null,
              "help": "#openOptions.launcher"
            },
            "position": {
              "description": "Specifies the position of a drop down menu when launched. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Position",
              "help": "#openOptions.position",
              "properties": {
                "at": {
                  "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
                  "type": "object",
                  "displayName": "At",
                  "help": "#openOptions.position.at",
                  "properties": {
                    "horizontal": {
                      "description": "Defines the horizontal alignment of what the menu is aligned to. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Horizontal",
                      "help": "#openOptions.position.at.horizontal",
                      "enumValues": [
                        "center",
                        "end",
                        "left",
                        "right",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "center": {
                          "displayName": "Center"
                        },
                        "end": {
                          "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                          "displayName": "End"
                        },
                        "left": {
                          "displayName": "Left"
                        },
                        "right": {
                          "displayName": "Right"
                        },
                        "start": {
                          "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                          "displayName": "Start"
                        }
                      }
                    },
                    "vertical": {
                      "description": "Defines the vertical alignment of what the menu is aligned to. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Vertical",
                      "help": "#openOptions.position.at.vertical",
                      "enumValues": [
                        "bottom",
                        "center",
                        "top"
                      ],
                      "propertyEditorValues": {
                        "bottom": {
                          "displayName": "Bottom"
                        },
                        "center": {
                          "displayName": "Center"
                        },
                        "top": {
                          "displayName": "Top"
                        }
                      }
                    }
                  }
                },
                "collision": {
                  "description": "Rule for alternate alignment.",
                  "type": "string",
                  "displayName": "Collision",
                  "value": "flipfit",
                  "help": "#openOptions.position.collision",
                  "enumValues": [
                    "fit",
                    "flip",
                    "flipcenter",
                    "flipfit",
                    "none"
                  ],
                  "propertyEditorValues": {
                    "fit": {
                      "description": "shift the element away from the edge of the window.",
                      "displayName": "Fit"
                    },
                    "flip": {
                      "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                      "displayName": "Flip"
                    },
                    "flipcenter": {
                      "description": "first applies the flip rule and follows with center alignment.",
                      "displayName": "Flipcenter"
                    },
                    "flipfit": {
                      "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                      "displayName": "Flipfit"
                    },
                    "none": {
                      "description": "no collision detection.",
                      "displayName": "None"
                    }
                  }
                },
                "my": {
                  "description": "Defines which edge on the menu to align with the target (\"of\") element.",
                  "type": "object",
                  "displayName": "My",
                  "help": "#openOptions.position.my",
                  "properties": {
                    "horizontal": {
                      "description": "Defines the horizontal alignment of the menu.",
                      "type": "string",
                      "displayName": "Horizontal",
                      "value": "start",
                      "help": "#openOptions.position.my.horizontal",
                      "enumValues": [
                        "center",
                        "end",
                        "left",
                        "right",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "center": {
                          "displayName": "Center"
                        },
                        "end": {
                          "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                          "displayName": "End"
                        },
                        "left": {
                          "displayName": "Left"
                        },
                        "right": {
                          "displayName": "Right"
                        },
                        "start": {
                          "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                          "displayName": "Start"
                        }
                      }
                    },
                    "vertical": {
                      "description": "Defines the vertical alignment of the menu.",
                      "type": "string",
                      "displayName": "Vertical",
                      "value": "top",
                      "help": "#openOptions.position.my.vertical",
                      "enumValues": [
                        "bottom",
                        "center",
                        "top"
                      ],
                      "propertyEditorValues": {
                        "bottom": {
                          "displayName": "Bottom"
                        },
                        "center": {
                          "displayName": "Center"
                        },
                        "top": {
                          "displayName": "Top"
                        }
                      }
                    }
                  }
                },
                "of": {
                  "description": "Which element to position the menu against. See the Help documentation for more information.",
                  "type": "string|object",
                  "displayName": "Of",
                  "help": "#openOptions.position.of"
                },
                "offset": {
                  "description": "Defines a point offset in pixels from the (\"my\") alignment.",
                  "type": "object",
                  "displayName": "Offset",
                  "help": "#openOptions.position.offset",
                  "properties": {
                    "x": {
                      "description": "Horizontal alignment offset.",
                      "type": "number",
                      "displayName": "X",
                      "value": 0,
                      "help": "#openOptions.position.offset.x"
                    },
                    "y": {
                      "description": "Vertical alignment offset.",
                      "type": "number",
                      "displayName": "Y",
                      "value": 0,
                      "help": "#openOptions.position.offset.y"
                    }
                  }
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaFocusSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected before the first menu item. It is used for establishing VO cursor focus. Activation of the link will move focus to the first menu item.",
              "type": "string",
              "help": "#translations.ariaFocusSkipLink"
            },
            "labelCancel": {
              "description": "Label for the \"Cancel\" menu item.",
              "type": "string",
              "help": "#translations.labelCancel"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the menu.",
          "help": "#close",
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "open": {
          "description": "Launches this menu after firing the ojBeforeOpen event. See the Help documentation for more information.",
          "help": "#open",
          "params": [
            {
              "name": "event",
              "description": "What triggered the menu launch. May be null. May be omitted if subsequent params are omitted.",
              "type": "Event"
            },
            {
              "name": "openOptions",
              "description": "Options to merge with the openOptions option. May be null. May be omitted if subsequent params are omitted.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the disclosed state of the menu. See the Help documentation for more information.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when a menu item is selected. To ensure keyboard accessibility, the only correct, supported way to react to the selection of a menu item is to listen for this event. See the Help documentation for more information.",
          "eventGroup": "common",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "10.0.0",
              "description": "This event is no longer supported, use the ojMenuAction event instead."
            }
          ],
          "help": "#event:action"
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that triggered the animation.",
              "type": "\"open\"|\"close\""
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojBeforeOpen": {
          "description": "Triggered before this menu is launched. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeOpen",
          "detail": {
            "openOptions": {
              "description": "effecting the open operation",
              "type": "object",
              "properties": {
                "display": {
                  "description": "Determines whether the menu is displayed as a drop down menu or a sheet menu.",
                  "type": "string"
                },
                "initialFocus": {
                  "description": "Determines focus behavior when the menu is initially opened.",
                  "type": "string"
                },
                "launcher": {
                  "description": "The DOM node (which may or may not be a JET element) that launches this menu.",
                  "type": "string|Element"
                },
                "position": {
                  "description": "Determines the position of a drop down menu when launched. Ignored for sheet menus.",
                  "type": "object",
                  "properties": {
                    "my": {
                      "description": "Defines which edge on the menu to align with the target (\"of\") element.",
                      "type": "object",
                      "properties": {
                        "vertical": {
                          "description": "Vertical alignment.",
                          "type": "\"top\"|\"bottom\"|\"center\""
                        },
                        "horizontal": {
                          "description": "Horizontal alignment.",
                          "type": "\"start\"|\"end\"|\"left\"|\"center\"|\"bottom\""
                        }
                      }
                    },
                    "at": {
                      "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
                      "type": "object",
                      "properties": {
                        "vertical": {
                          "description": "Vertical alignment.",
                          "type": "\"top\"|\"bottom\"|\"center\""
                        },
                        "horizontal": {
                          "description": "Horizontal alignment.",
                          "type": "\"start\"|\"end\"|\"left\"|\"center\"|\"bottom\""
                        }
                      }
                    },
                    "offset": {
                      "description": "Defines a point offset in pixels from the (\"my\") alignment.",
                      "type": "object",
                      "properties": {
                        "x": {
                          "description": "Horizontal alignment offset.",
                          "type": "number"
                        },
                        "y": {
                          "description": "Vertical alignment offset.",
                          "type": "number"
                        }
                      }
                    },
                    "of": {
                      "description": "Which element to position the menu against. The default is the launcher argument passed to the open method.",
                      "type": "string|object",
                      "properties": {
                        "x": {
                          "description": "Horizontal alignment offset.",
                          "type": "number"
                        },
                        "y": {
                          "description": "Vertical alignment offset.",
                          "type": "number"
                        }
                      }
                    },
                    "collision": {
                      "description": "Rule for alternate alignment.",
                      "type": "\"flip\"|\"fit\"|\"flipfit\"|\"flipcenter\"|\"none\""
                    }
                  }
                }
              }
            }
          }
        },
        "ojClose": {
          "description": "Triggered after this menu is closed.",
          "help": "#event:close",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojMenuAction": {
          "description": "Triggered when a menu item is selected. To ensure keyboard accessibility, the only correct, supported way to react to the selection of a menu item is to listen for this event. See the Help documentation for more information.",
          "eventGroup": "common",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:menuAction",
          "detail": {
            "selectedValue": {
              "description": "The value of current selected menu item.",
              "type": "any"
            }
          }
        },
        "ojOpen": {
          "description": "Triggered after this menu is launched.",
          "help": "#event:open",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-menu element accepts oj-option and oj-menu-select-many as child elements.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement",
            "MenuSelectManyElement"
          ]
        }
      }
    },
    "oj-message-banner": {
      "name": "oj-message-banner",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "MessageBannerElement"
      ],
      "description": "Message Banners are brief, moderately disruptive, semi-permanent messages that help communicate relevant and useful information.",
      "displayName": "Message Banner",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-message-banner",
          "uxSpecs": [
            "banner-messages"
          ]
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        },
        "vbdt": {
          "module": "ojs/ojmessagebanner",
          "defaultColumns": "6",
          "minColumns": "2"
        }
      },
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMessageBanner.html",
      "since": "12.0.0",
      "properties": {
        "data": {
          "type": "object",
          "description": "Data for the Message Banner component.",
          "displayName": "Data",
          "help": "#data"
        },
        "type": {
          "type": "string",
          "description": "The type of the Banner message.",
          "displayName": "Type",
          "help": "#type",
          "enumValues": [
            "section",
            "page"
          ],
          "value": "section"
        },
        "detailTemplateValue": {
          "type": "string|function",
          "description": "The function that determines the detail template for the current row.",
          "displayName": "Current Detail Template",
          "help": "#detailTemplateValue",
          "dynamicSlotDef": "MessageBannerTemplateContext"
        }
      },
      "dynamicSlots": {
        "MessageBannerTemplateContext": {
          "description": "The dynamic template slots for the Banner message.",
          "displayName": "Dynamic Template Slots",
          "help": "#dynamicTemplates",
          "data": {
            "data": {
              "type": "any"
            },
            "index": {
              "type": "number"
            },
            "key": {
              "type": "any"
            },
            "metadata": {
              "type": "object"
            }
          }
        }
      },
      "events": {
        "ojClose": {
          "description": "Event emitted when the user tries to close a message though UI interaction",
          "help": "#event:ojClose",
          "detail": {
            "data": {
              "type": "any",
              "description": "The data that was used to render the message."
            },
            "key": {
              "type": "any",
              "description": "The key for the message."
            },
            "metadata": {
              "type": "object",
              "description": "The metadata of the message."
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-message": {
      "name": "oj-message",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Message",
      "implements": [
        "MessageElement"
      ],
      "type": "core",
      "since": "5.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmessage"
        },
        "oracle": {
          "icon": "oj-ux-ico-message",
          "uxSpecs": [
            "messages"
          ]
        }
      },
      "description": "A message conveys categorized information to the user, often regarding errors.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMessage.html",
      "properties": {
        "displayOptions": {
          "description": "Specifies the display options for contents of the message.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "category": {
              "description": "Specifies the display option for message category text in this message.",
              "type": "string",
              "displayName": "Category",
              "value": "auto",
              "help": "#displayOptions.category",
              "enumValues": [
                "auto",
                "header",
                "none"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "The component decides whether and where the ojMessage#message.category text is displayed. The behavior is same as 'header' option, but may change in future releases.",
                  "displayName": "Auto"
                },
                "header": {
                  "description": "If the ojMessage#message.category property is specified, its value will be displayed in the header region of the message next to message icon. If ojMessage#message.category property is not specified, a translated text corresponding to the value of the ojMessage#message.severity property will be displayed.",
                  "displayName": "Header"
                },
                "none": {
                  "description": "The ojMessage#message.category text will not be displayed.",
                  "displayName": "None"
                }
              }
            }
          }
        },
        "message": {
          "description": "Structured data specifying essential information to display a message on the UI.",
          "type": "object",
          "displayName": "Message",
          "help": "#message",
          "properties": {
            "autoTimeout": {
              "description": "Specifies the duration in milliseconds that the message will be shown before it closes automatically. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Auto Timeout",
              "value": -1,
              "help": "#message.autoTimeout"
            },
            "category": {
              "description": "Specifies message category text which is shown next to the message icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Category",
              "value": "",
              "help": "#message.category"
            },
            "closeAffordance": {
              "description": "Specifies the UI affordance provided to end users to be able to close the message. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Close Affordance",
              "value": "defaults",
              "help": "#message.closeAffordance",
              "enumValues": [
                "defaults",
                "none"
              ],
              "propertyEditorValues": {
                "defaults": {
                  "description": "Use implicit affordance to best suit the native theme, efficient use of available space, and screen touch capabilities.",
                  "displayName": "Defaults"
                },
                "none": {
                  "description": "No UI affordance is provided to close the message. Application has to call the close() method to dismiss the message.",
                  "displayName": "None"
                }
              }
            },
            "detail": {
              "description": "Specifies detail text for the message.",
              "type": "string",
              "displayName": "Detail",
              "value": "",
              "help": "#message.detail"
            },
            "icon": {
              "description": "Specifies the URL for the custom image to be used as an icon representing the message. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Icon",
              "value": "",
              "help": "#message.icon"
            },
            "severity": {
              "description": "Specifies the severity of message.",
              "type": "string",
              "displayName": "Severity",
              "value": "none",
              "help": "#message.severity",
              "enumValues": [
                "confirmation",
                "error",
                "info",
                "none",
                "warning"
              ],
              "propertyEditorValues": {
                "confirmation": {
                  "description": "Confirmation message.",
                  "displayName": "Confirmation"
                },
                "error": {
                  "description": "Error level message.",
                  "displayName": "Error"
                },
                "info": {
                  "description": "Informational message.",
                  "displayName": "Info"
                },
                "none": {
                  "description": "Message status level not applicable.",
                  "displayName": "None"
                },
                "warning": {
                  "description": "Warning level message.",
                  "displayName": "Warning"
                }
              }
            },
            "sound": {
              "description": "Specifies the sound to be played when a message is opened. This is needed for accessibility. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Sound",
              "value": "none",
              "help": "#message.sound"
            },
            "summary": {
              "description": "Specifies summary text for the message.",
              "type": "string",
              "displayName": "Summary",
              "value": "",
              "help": "#message.summary"
            },
            "timestamp": {
              "description": "Specifies a timestamp for the message to be displayed in the message header. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Timestamp",
              "value": "",
              "help": "#message.timestamp"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "categories": {
              "description": "Category text to be displayed for the messages of different severity levels.",
              "type": "object",
              "help": "#translations.categories",
              "properties": {
                "confirmation": {
                  "description": "Category text for the 'confirmation' severity level.",
                  "type": "string",
                  "help": "#translations.categories.confirmation"
                },
                "error": {
                  "description": "Category text for the 'error' severity level.",
                  "type": "string",
                  "help": "#translations.categories.error"
                },
                "info": {
                  "description": "Category text for the 'info' severity level.",
                  "type": "string",
                  "help": "#translations.categories.info"
                },
                "none": {
                  "description": "Category text when there is no severity level.",
                  "type": "string",
                  "help": "#translations.categories.none"
                },
                "warning": {
                  "description": "Category text for the 'warning' severity level.",
                  "type": "string",
                  "help": "#translations.categories.warning"
                }
              }
            },
            "labelCloseIcon": {
              "description": "Label for the message close button.",
              "type": "string",
              "help": "#translations.labelCloseIcon"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the message.",
          "help": "#close",
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojClose": {
          "description": "Triggered after the message is closed through user interaction or due to calling close() method.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:close",
          "detail": {
            "message": {
              "description": "The message that was closed.",
              "type": "object",
              "properties": {
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "\"error\"|\"warning\"|\"confirmation\"|\"info\"|\"none\""
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string"
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string"
                },
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "\"none\"|\"defaults\""
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "slots": {
        "detail": {
          "description": "The detail slot accepts DOM nodes as children. It is useful for adding links or buttons to the message's detail area.",
          "maxItems": 1,
          "help": "#detail"
        }
      }
    },
    "oj-messages": {
      "name": "oj-messages",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Messages",
      "implements": [
        "MessagesElement"
      ],
      "type": "core",
      "since": "5.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmessages",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-messages-inline-remove-bottom-border"
              ],
              "description": "Inline messages will include a bottom border so that the messages section is demarcated from the contents below it. If this border is not desirable for certain page layouts, it can be removed by setting this marker class on oj-messages."
            },
            {
              "styleGroup": [
                "oj-messages-outlined"
              ],
              "description": "Inline messages (Banners) can be either Edge-to-Edge or Outlined. By default, the inline messages are rendered as Edge-to-Edge Banner messages. If Outlined Banner messages are preferred instead, add oj-messages-outlined class on the oj-messages element."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-messages",
          "uxSpecs": [
            "messages"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-messages-inline-remove-bottom-border",
          "kind": "class",
          "displayName": "No Border",
          "description": "Inline messages will include a bottom border so that the messages section is demarcated from the contents below it. If this border is not desirable for certain page layouts, it can be removed by setting this marker class on oj-messages.",
          "help": "#oj-messages-inline-remove-bottom-border"
        },
        {
          "name": "oj-messages-outlined",
          "kind": "class",
          "displayName": "Outlined Banner Messages",
          "description": "Inline messages (Banners) can be either Edge-to-Edge or Outlined. By default, the inline messages are rendered as Edge-to-Edge Banner messages. If Outlined Banner messages are preferred instead, add oj-messages-outlined class on the oj-messages element.",
          "help": "#oj-messages-outlined"
        }
      ],
      "description": "Messages manages the layout and display of child messages.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojMessages.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "display",
            "position.at.horizontal",
            "position.at.vertical",
            "position.collision",
            "position.my.horizontal",
            "position.my.vertical",
            "position.of",
            "position.offset.x",
            "position.offset.y"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "messages"
          ]
        }
      ],
      "properties": {
        "display": {
          "description": "Specifies the display purpose of the messages. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "general",
          "help": "#display",
          "enumValues": [
            "general",
            "notification"
          ],
          "propertyEditorValues": {
            "general": {
              "description": "Messages pertaining to the page or region of the application.",
              "displayName": "General"
            },
            "notification": {
              "description": "Often used for communicating alerts arriving asynchronously.",
              "displayName": "Notification"
            }
          }
        },
        "displayOptions": {
          "description": "Specifies the display options for contents of all the messages.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "category": {
              "description": "Specifies display option for ojMessage#message.category text in all the messages specified for the ojMessages#messages attribute.",
              "type": "string",
              "displayName": "Category",
              "value": "auto",
              "help": "#displayOptions.category",
              "enumValues": [
                "auto",
                "header",
                "none"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "The component decides whether and where the ojMessage#message.category text is displayed. The behavior is same as 'header' option, but may change in future releases.",
                  "displayName": "Auto"
                },
                "header": {
                  "description": "If the ojMessage#message.category property is specified, its value will be displayed in the header region of the message next to message icon. If ojMessage#message.category property is not specified, a translated text corresponding to the value of the ojMessage#message.severity property will be displayed.",
                  "displayName": "Header"
                },
                "none": {
                  "description": "The ojMessage#message.category text will not be displayed.",
                  "displayName": "None"
                }
              }
            }
          }
        },
        "messages": {
          "description": "Specifies the collection of structured message data used to display the individual messages. See the Help documentation for more information.",
          "type": "null|Array<Object>|object",
          "displayName": "Messages",
          "value": null,
          "help": "#messages",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number",
                  "displayName": "Auto Timeout"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string",
                  "displayName": "Category"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "string",
                  "displayName": "Close Affordance",
                  "enumValues": [
                    "defaults",
                    "none"
                  ]
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string",
                  "displayName": "Detail"
                },
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string",
                  "displayName": "Icon"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "string",
                  "displayName": "Severity",
                  "enumValues": [
                    "confirmation",
                    "error",
                    "info",
                    "none",
                    "warning"
                  ]
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string",
                  "displayName": "Sound"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string",
                  "displayName": "Summary"
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string",
                  "displayName": "Timestamp"
                }
              }
            }
          }
        },
        "position": {
          "description": "Specifies the position and presentation style of the messages. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Position",
          "help": "#position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "#position.at",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of what the messages overlay is aligned to.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "help": "#position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "Evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "Evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of what the messages overlay is aligned to.",
                  "type": "string",
                  "displayName": "Vertical",
                  "help": "#position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "help": "#position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "Shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "The element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipfit": {
                  "description": "First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "No collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the messages overlay to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "#position.my",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of the messages overlay.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "help": "#position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "Evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "Evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of the messages overlay.",
                  "type": "string",
                  "displayName": "Vertical",
                  "help": "#position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Specifies which element to position the messages overlay against. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Of",
              "help": "#position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "#position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal alignment offset.",
                  "type": "number",
                  "displayName": "X",
                  "help": "#position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "help": "#position.offset.y"
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaLiveRegion": {
              "description": "Various contextual live region texts that oj-messages component will use for accessibility purpose.",
              "type": "object",
              "help": "#translations.ariaLiveRegion",
              "properties": {
                "navigationFromKeyboard": {
                  "description": "Text to guide keyboard users navigate to prior focussed element when the messages region gains focus.",
                  "type": "string",
                  "help": "#translations.ariaLiveRegion.navigationFromKeyboard"
                },
                "navigationToKeyboard": {
                  "description": "Text to guide keyboard users navigate to new displayed messages when focus is outside the messages popup.",
                  "type": "string",
                  "help": "#translations.ariaLiveRegion.navigationToKeyboard"
                },
                "navigationToTouch": {
                  "description": "Text to guide touch screen (voice-over) users navigate to new displayed messages when focus is outside the messages popup.",
                  "type": "string",
                  "help": "#translations.ariaLiveRegion.navigationToTouch"
                },
                "newMessage": {
                  "description": "Text representing the new displayed message. This text may contain tokens '{category}' ,'{summary}' and '{detail}', which will be replaced by the corresponding sub-property values in the data for the new message.",
                  "type": "string",
                  "help": "#translations.ariaLiveRegion.newMessage"
                },
                "noDetail": {
                  "description": "Text to be used in the live region when there is no detail.",
                  "type": "string",
                  "help": "#translations.ariaLiveRegion.noDetail"
                }
              }
            },
            "labelLandmark": {
              "description": "Label for the landmark region for accessibility.",
              "type": "string",
              "help": "#translations.labelLandmark"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Unconditionally closes the specified message. See the Help documentation for more information.",
          "help": "#close",
          "params": [
            {
              "name": "message",
              "description": "The message to be closed.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "closeAll": {
          "description": "Closes all child messages matching an optional filter criteria. See the Help documentation for more information.",
          "help": "#closeAll",
          "params": [
            {
              "name": "closeFilter",
              "description": "An optional callback function that will be passed an instance of type ojMessage#message for each child oj-message. If closeFilter returns true, the associated oj-message will be closed. Returning false will exclude the child message from closure. If a closeFilter is not passed, all child messages will be closed.",
              "type": "function"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-messages element accepts only oj-message elements as children for the default slot. See the Help documentation for more information.",
          "displayName": "default",
          "help": "#Default"
        },
        "messageTemplate": {
          "description": "The messageTemplate slot is used to specify the template for rendering each message. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#messageTemplate",
          "preferredContent": [
            "MessageElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-messages> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current message being rendered.",
              "type": "object",
              "properties": {
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "\"error\"|\"warning\"|\"confirmation\"|\"info\"|\"none\""
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string"
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string"
                },
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "\"none\"|\"defaults\""
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "oj-module": {
      "name": "oj-module",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "ojModule Element",
      "implements": [
        "ModuleElement"
      ],
      "type": "core",
      "since": "4.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmodule-element"
        },
        "oracle": {
          "icon": "oj-ux-ico-code"
        }
      },
      "description": "A module is a navigational element that manages content replacement within a particular region of the page.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojModule.html",
      "properties": {
        "animation": {
          "description": "Specifies an animation object used for view transitions. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Animation",
          "value": null,
          "help": "#animation"
        },
        "config": {
          "description": "The module configuration object. See the Help documentation for more information.",
          "type": "object|Promise",
          "displayName": "Config",
          "help": "#config",
          "properties": {
            "cleanupMode": {
              "description": "The cleanup mode for the view.",
              "type": "string",
              "displayName": "Cleanup Mode",
              "value": "onDisconnect",
              "help": "#config.cleanupMode",
              "enumValues": [
                "none",
                "onDisconnect"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Use the setting to preserve the view, e.g. if the view and view model will be stored in external cache.",
                  "displayName": "None"
                },
                "onDisconnect": {
                  "description": "The View nodes will be destroyed on disconnect.",
                  "displayName": "On Disconnect"
                }
              }
            },
            "view": {
              "description": "Defines module view.",
              "type": "Array<Node>",
              "displayName": "View",
              "value": null,
              "help": "#config.view"
            },
            "viewModel": {
              "description": "The ViewModel instance.",
              "type": "object|null",
              "displayName": "View Model",
              "value": null,
              "help": "#config.viewModel"
            }
          }
        }
      },
      "events": {
        "ojTransitionEnd": {
          "description": "Triggered after transition to the new View is complete",
          "help": "#event:transitionEnd",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the new View.",
              "type": "object"
            }
          }
        },
        "ojTransitionStart": {
          "description": "Triggered before transition to the new View is started",
          "help": "#event:transitionStart",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the new View.",
              "type": "object"
            }
          }
        },
        "ojViewConnected": {
          "description": "Triggered after the View is inserted into the DOM",
          "help": "#event:viewConnected",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the View being attached to the DOM.",
              "type": "object"
            }
          }
        },
        "ojViewDisconnected": {
          "description": "Triggered after the View is removed from the DOM",
          "help": "#event:viewDisconnected",
          "detail": {
            "viewModel": {
              "description": "An array of DOM nodes that represent the disconnected View. The application can use the nodes to store them in cache.",
              "type": "object"
            },
            "view": {
              "description": "ViewModel for the new View.",
              "type": "Array<Node>"
            }
          }
        }
      }
    },
    "oj-n-box-node": {
      "name": "oj-n-box-node",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "N Box Node",
      "implements": [
        "NBoxNodeElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnbox"
        }
      },
      "styleVariables": [
        {
          "description": "Nbox node background color",
          "name": "oj-n-box-node-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "The oj-n-box-node element is used to declare properties for NBox nodes. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojNBoxNode.html",
      "properties": {
        "borderColor": {
          "description": "The color of the node border.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "help": "#borderColor"
        },
        "borderWidth": {
          "description": "The width of the node border.",
          "type": "number",
          "displayName": "Border Width",
          "value": 0,
          "help": "#borderWidth"
        },
        "categories": {
          "description": "An optional array of additional category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with other visualization elements. If not defined, the node id is used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The background color of this node.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "help": "#color"
        },
        "column": {
          "description": "The column id for this node.",
          "type": "string",
          "displayName": "Column",
          "value": "",
          "help": "#column"
        },
        "groupCategory": {
          "description": "The group category this node belongs to. Nodes with the same groupCategory will be grouped together.",
          "type": "string",
          "displayName": "Group Category",
          "value": "",
          "help": "#groupCategory"
        },
        "icon": {
          "description": "Defines the primary icon for this node.",
          "type": "object",
          "displayName": "Icon",
          "value": null,
          "help": "#icon",
          "properties": {
            "background": {
              "description": "The background pattern displayed with the initials of this icon.",
              "type": "string",
              "displayName": "Background",
              "value": "neutral",
              "help": "#icon.background",
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors.",
                  "target": "propertyValue",
                  "value": [
                    "red"
                  ]
                },
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors.",
                  "target": "propertyValue",
                  "value": [
                    "forest"
                  ]
                },
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors.",
                  "target": "propertyValue",
                  "value": [
                    "mauve"
                  ]
                }
              ],
              "propertyEditorValues": {
                "blue": {
                  "displayName": "Blue"
                },
                "forest": {
                  "displayName": "Forest"
                },
                "gray": {
                  "displayName": "Gray"
                },
                "green": {
                  "displayName": "Green"
                },
                "lilac": {
                  "displayName": "Lilac"
                },
                "mauve": {
                  "displayName": "Mauve"
                },
                "neutral": {
                  "displayName": "Neutral"
                },
                "orange": {
                  "displayName": "Orange"
                },
                "pink": {
                  "displayName": "Pink"
                },
                "purple": {
                  "displayName": "Purple"
                },
                "red": {
                  "displayName": "Red"
                },
                "slate": {
                  "displayName": "Slate"
                },
                "teal": {
                  "displayName": "Teal"
                }
              }
            },
            "borderColor": {
              "description": "The border color of this icon.",
              "type": "string",
              "displayName": "Border Color",
              "help": "#icon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of this icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#icon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width of this icon.",
              "type": "number",
              "displayName": "Border Width",
              "help": "#icon.borderWidth"
            },
            "color": {
              "description": "The fill color of this icon.",
              "type": "string",
              "displayName": "Color",
              "help": "#icon.color"
            },
            "height": {
              "description": "The height of this icon.",
              "type": "number|null",
              "displayName": "Height",
              "help": "#icon.height"
            },
            "initials": {
              "description": "The initials displayed on this icon if no image source provided.",
              "type": "string",
              "displayName": "Initials",
              "value": "",
              "help": "#icon.initials"
            },
            "opacity": {
              "description": "The opacity of this icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "#icon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of this icon.",
              "type": "string",
              "displayName": "Pattern",
              "value": "none",
              "help": "#icon.pattern",
              "enumValues": [
                "largeChecker",
                "largeCrosshatch",
                "largeDiagonalLeft",
                "largeDiagonalRight",
                "largeDiamond",
                "largeTriangle",
                "mallChecker",
                "none",
                "smallCrosshatch",
                "smallDiagonalLeft",
                "smallDiagonalRight",
                "smallDiamond",
                "smallTriangle"
              ],
              "propertyEditorValues": {
                "largeChecker": {
                  "displayName": "Large Checker"
                },
                "largeCrosshatch": {
                  "displayName": "Large Crosshatch"
                },
                "largeDiagonalLeft": {
                  "displayName": "Large Diagonal Left"
                },
                "largeDiagonalRight": {
                  "displayName": "Large Diagonal Right"
                },
                "largeDiamond": {
                  "displayName": "Large Diamond"
                },
                "largeTriangle": {
                  "displayName": "Large Triangle"
                },
                "mallChecker": {
                  "displayName": "Mall Checker"
                },
                "none": {
                  "displayName": "None"
                },
                "smallCrosshatch": {
                  "displayName": "Small Crosshatch"
                },
                "smallDiagonalLeft": {
                  "displayName": "Small Diagonal Left"
                },
                "smallDiagonalRight": {
                  "displayName": "Small Diagonal Right"
                },
                "smallDiamond": {
                  "displayName": "Small Diamond"
                },
                "smallTriangle": {
                  "displayName": "Small Triangle"
                }
              }
            },
            "shape": {
              "description": "The shape of this icon. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "#icon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URL of an image to display for this icon.",
              "type": "string",
              "displayName": "Source",
              "help": "#icon.source"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of this icon. Will not be applied if initials are specified.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#icon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of this icon. Only SVG CSS style properties are supported. Will not be applied if initials are specified. The default value comes from the CSS and varies based on theme.",
              "type": "object",
              "displayName": "SVG Style",
              "help": "#icon.svgStyle"
            },
            "width": {
              "description": "The width of this icon.",
              "type": "number|null",
              "displayName": "Width",
              "help": "#icon.width"
            }
          }
        },
        "indicatorColor": {
          "description": "The background color for the indicator section of this node.",
          "type": "string",
          "displayName": "Indicator Color",
          "value": "",
          "help": "#indicatorColor"
        },
        "indicatorIcon": {
          "description": "Defines the indicator icon for this node.",
          "type": "object",
          "displayName": "Indicator Icon",
          "value": null,
          "help": "#indicatorIcon",
          "properties": {
            "borderColor": {
              "description": "The border color of this indicator icon.",
              "type": "string",
              "displayName": "Border Color",
              "help": "#indicatorIcon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of this indicator icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "#indicatorIcon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width of this indicator icon.",
              "type": "number",
              "displayName": "Border Width",
              "help": "#indicatorIcon.borderWidth"
            },
            "color": {
              "description": "The fill color of this indicator icon.",
              "type": "string",
              "displayName": "Color",
              "help": "#indicatorIcon.color"
            },
            "height": {
              "description": "The height of this indicator icon.",
              "type": "number|null",
              "displayName": "Height",
              "help": "#indicatorIcon.height"
            },
            "opacity": {
              "description": "The opacity of this indicator icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "#indicatorIcon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of this indicator icon.",
              "type": "string",
              "displayName": "Pattern",
              "help": "#indicatorIcon.pattern",
              "enumValues": [
                "largeChecker",
                "largeCrosshatch",
                "largeDiagonalLeft",
                "largeDiagonalRight",
                "largeDiamond",
                "largeTriangle",
                "none",
                "smallChecker",
                "smallCrosshatch",
                "smallDiagonalLeft",
                "smallDiagonalRight",
                "smallDiamond",
                "smallTriangle"
              ],
              "propertyEditorValues": {
                "largeChecker": {
                  "displayName": "Large Checker"
                },
                "largeCrosshatch": {
                  "displayName": "Large Crosshatch"
                },
                "largeDiagonalLeft": {
                  "displayName": "Large Diagonal Left"
                },
                "largeDiagonalRight": {
                  "displayName": "Large Diagonal Right"
                },
                "largeDiamond": {
                  "displayName": "Large Diamond"
                },
                "largeTriangle": {
                  "displayName": "Large Triangle"
                },
                "none": {
                  "displayName": "None"
                },
                "smallChecker": {
                  "displayName": "Small Checker"
                },
                "smallCrosshatch": {
                  "displayName": "Small Crosshatch"
                },
                "smallDiagonalLeft": {
                  "displayName": "Small Diagonal Left"
                },
                "smallDiagonalRight": {
                  "displayName": "Small Diagonal Right"
                },
                "smallDiamond": {
                  "displayName": "Small Diamond"
                },
                "smallTriangle": {
                  "displayName": "Small Triangle"
                }
              }
            },
            "shape": {
              "description": "The shape of this indicator icon. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "#indicatorIcon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URL of an image to display for this indicator icon.",
              "type": "string|null",
              "displayName": "Source",
              "help": "#indicatorIcon.source"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of this indicator icon.",
              "type": "string",
              "displayName": "SVG Class Name",
              "help": "#indicatorIcon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of this indicator icon. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
              "type": "object|null",
              "displayName": "SVG Style",
              "help": "#indicatorIcon.svgStyle"
            },
            "width": {
              "description": "The width of this indicator icon.",
              "type": "number|null",
              "displayName": "Width",
              "help": "#indicatorIcon.width"
            }
          }
        },
        "label": {
          "description": "The text for the node label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "row": {
          "description": "The row id for this node.",
          "type": "string",
          "displayName": "Row",
          "value": "",
          "help": "#row"
        },
        "secondaryLabel": {
          "description": "The text for the secondary node label.",
          "type": "string",
          "displayName": "Secondary Label",
          "value": "",
          "help": "#secondaryLabel"
        },
        "shortDesc": {
          "description": "The description of the node. Will be lazily created if a function is used. This is used for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the node text.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the node text. Only SVG CSS style properties are supported.",
          "type": "object|null",
          "displayName": "SVG Style",
          "value": null,
          "help": "#svgStyle"
        },
        "xPercentage": {
          "description": "An optional horizontal position (as a percentage) to be used in the average position calculation when grouping across cells.",
          "type": "number|null",
          "displayName": "X Percentage",
          "value": null,
          "help": "#xPercentage"
        },
        "yPercentage": {
          "description": "An optional vertical position (as a percentage) to be used in the average position calculation when grouping across cells.",
          "type": "number|null",
          "displayName": "Y Percentage",
          "value": null,
          "help": "#yPercentage"
        }
      }
    },
    "oj-n-box": {
      "name": "oj-n-box",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "N Box",
      "implements": [
        "NBoxElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnbox",
          "defaultColumns": "12",
          "minColumns": "12"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart-nbox",
          "uxSpecs": [
            "data-visualization-nbox"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Nbox cell background color",
          "name": "oj-n-box-cell-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Nbox maximized cell background color",
          "name": "oj-n-box-cell-bg-color-maximized",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "NBox is an interactive data visualization (typically found in Human Capital Management applications) in which employees are grouped and compared across two dimensions.  Each dimension can be split into multiple ranges.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojNBox.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "rowsTitle",
            "columnsTitle",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "rows",
            "columns",
            "cells"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the nodeTemplate.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "cellContent": {
          "description": "Specifies the content displayed in cells. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Cell Content",
          "value": "auto",
          "help": "#cellContent",
          "enumValues": [
            "auto",
            "counts"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "counts": {
              "displayName": "Counts"
            }
          }
        },
        "cellMaximize": {
          "description": "Specifies whether cell maximize/de-maximize gestures are enabled.",
          "type": "string",
          "displayName": "Cell Maximize",
          "value": "on",
          "help": "#cellMaximize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "cells": {
          "description": "Specifies the list of cells. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Cells",
          "value": null,
          "help": "#cells",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "column": {
                  "description": "The id of the column containing this cell.",
                  "type": "string",
                  "displayName": "Column"
                },
                "label": {
                  "description": "The text for the cell label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelHalign": {
                  "description": "The horizontal alignment value for the cell label.",
                  "type": "string",
                  "displayName": "Label Halign"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the cell label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "maximizedSvgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the minimized cell background and border.",
                  "type": "string",
                  "displayName": "Maximized SVG Class Name"
                },
                "maximizedSvgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the maximized cell background and border. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "Maximized SVG Style"
                },
                "minimizedSvgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the minimized cell background and border.",
                  "type": "string",
                  "displayName": "Minimized SVG Class Name"
                },
                "minimizedSvgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the minimized cell background and border. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "Minimized SVG Style"
                },
                "row": {
                  "description": "The id of the row containing this cell.",
                  "type": "string",
                  "displayName": "Row"
                },
                "shortDesc": {
                  "description": "The description of this cell. This is used for accessibility.",
                  "type": "string",
                  "displayName": "Short Desc"
                },
                "showCount": {
                  "description": "Determines when to display the cell count label (extra info displayed after primary cell label). \"off\" never show the count label. \"on\" always show the count label. Show countLabel value if specified, otherwise use a simple node count. \"auto\" show the count label if countLabel attribute is defined.",
                  "type": "string",
                  "displayName": "Show Count",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "svgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the cell background and border.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the cell background and border. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "SVG Style"
                }
              }
            }
          }
        },
        "columns": {
          "description": "Specifies the list of columns. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Columns",
          "value": null,
          "help": "#columns",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the column. Used to identify this column.",
                  "type": "string",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The text for the column label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the column label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Label Style"
                }
              }
            }
          }
        },
        "columnsTitle": {
          "description": "The text for the title on the column edge.",
          "type": "string",
          "displayName": "Columns Title",
          "value": "",
          "translatable": true,
          "help": "#columnsTitle"
        },
        "countLabel": {
          "description": "A function that returns custom text for the cell count labels.",
          "type": "function|null",
          "displayName": "Count Label",
          "value": null,
          "help": "#countLabel"
        },
        "data": {
          "description": "Specifies the data provider for the NBox. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "groupAttributes": {
          "description": "An array of attributes for styling the group nodes.",
          "type": "Array<string>",
          "displayName": "Group Attributes",
          "value": [
            "color",
            "indicatorColor",
            "indicatorIconShape",
            "indicatorIconColor",
            "indicatorIconPattern"
          ],
          "help": "#groupAttributes",
          "enumValues": [
            "color",
            "indicatorColor",
            "indicatorIconColor",
            "indicatorIconPattern",
            "indicatorIconShape"
          ],
          "propertyEditorValues": {
            "color": {
              "displayName": "Color"
            },
            "indicatorColor": {
              "displayName": "Indicator Color"
            },
            "indicatorIconColor": {
              "displayName": "Indicator Icon Color"
            },
            "indicatorIconPattern": {
              "displayName": "Indicator Icon Pattern"
            },
            "indicatorIconShape": {
              "displayName": "Indicator Icon Shape"
            }
          }
        },
        "groupBehavior": {
          "description": "Specifies how nodes should be grouped.",
          "type": "string",
          "displayName": "Group Behavior",
          "value": "withinCell",
          "help": "#groupBehavior",
          "enumValues": [
            "acrossCells",
            "none",
            "withinCell"
          ],
          "propertyEditorValues": {
            "acrossCells": {
              "displayName": "Across Cells"
            },
            "none": {
              "displayName": "None"
            },
            "withinCell": {
              "displayName": "Within Cell"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "labelTruncation": {
          "description": "Specifies node label truncation behavior. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Truncation",
          "value": "on",
          "help": "#labelTruncation",
          "enumValues": [
            "ifRequired",
            "on"
          ],
          "propertyEditorValues": {
            "ifRequired": {
              "displayName": "If Required"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "maximizedColumn": {
          "description": "The id of the column to be maximized.",
          "type": "string",
          "displayName": "Maximized Column",
          "value": "",
          "writeback": true,
          "help": "#maximizedColumn"
        },
        "maximizedRow": {
          "description": "The id of the row to be maximized.",
          "type": "string",
          "displayName": "Maximized Row",
          "value": "",
          "writeback": true,
          "help": "#maximizedRow"
        },
        "nodes": {
          "description": "The list of nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "#nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the node. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "borderWidth": {
                  "description": "The border width of the node in pixels. Does not apply if custom image is specified.",
                  "type": "number",
                  "displayName": "Border Width"
                },
                "categories": {
                  "description": "An optional array of additional category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with other visualization elements. Defaults to node's id if unspecified.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The color of the node. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "Color"
                },
                "column": {
                  "description": "The column id for this node.",
                  "type": "string",
                  "displayName": "Column"
                },
                "groupCategory": {
                  "description": "The group category this node belongs to. Nodes with the same groupCategory will be grouped together.",
                  "type": "string",
                  "displayName": "Group Category"
                },
                "icon": {
                  "description": "Defines the primary icon for this node.",
                  "type": "object",
                  "displayName": "Icon",
                  "properties": {
                    "background": {
                      "description": "The background of initials",
                      "type": "string",
                      "displayName": "Background",
                      "enumValues": [
                        "forest",
                        "green",
                        "mauve",
                        "neutral",
                        "orange",
                        "purple",
                        "red",
                        "teal"
                      ]
                    },
                    "borderColor": {
                      "description": "The border color of this icon.",
                      "type": "string",
                      "displayName": "Border Color"
                    },
                    "borderRadius": {
                      "description": "The border radius of this icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
                      "type": "string",
                      "displayName": "Border Radius"
                    },
                    "borderWidth": {
                      "description": "The border width of this icon.",
                      "type": "number",
                      "displayName": "Border Width"
                    },
                    "color": {
                      "description": "The fill color of this icon.",
                      "type": "string",
                      "displayName": "Color"
                    },
                    "height": {
                      "description": "The height of this icon.",
                      "type": "number",
                      "displayName": "Height"
                    },
                    "initials": {
                      "description": "The initials displayed for this icon.",
                      "type": "string",
                      "displayName": "Initials"
                    },
                    "opacity": {
                      "description": "The opacity of this icon.",
                      "type": "number",
                      "displayName": "Opacity"
                    },
                    "pattern": {
                      "description": "The pattern of this icon.",
                      "type": "string",
                      "displayName": "Pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shape": {
                      "description": "The shape of this icon. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display for this icon.",
                      "type": "string",
                      "displayName": "Source"
                    },
                    "svgClassName": {
                      "description": "The CSS style class defining the style of this icon. Will not be applied if initials are specified.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "description": "The CSS style object defining the style of this icon. Only SVG CSS style properties are supported. Will not be applied if initials are specified. The default value comes from the CSS and varies based on theme.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "width": {
                      "description": "The width of this icon.",
                      "type": "number",
                      "displayName": "Width"
                    }
                  }
                },
                "id": {
                  "description": "The node id. The node id should be set by the application if the DataProvider is not being used.",
                  "type": "any",
                  "displayName": "Id"
                },
                "indicatorColor": {
                  "description": "The background color for the indicator section of this node.",
                  "type": "string",
                  "displayName": "Indicator Color"
                },
                "indicatorIcon": {
                  "description": "Defines the indicator icon for this node.",
                  "type": "object",
                  "displayName": "Indicator Icon",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of this indicator icon.",
                      "type": "string",
                      "displayName": "Border Color"
                    },
                    "borderRadius": {
                      "description": "The border radius of this indicator icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
                      "type": "string",
                      "displayName": "Border Radius"
                    },
                    "borderWidth": {
                      "description": "The border width of this indicator icon.",
                      "type": "number",
                      "displayName": "Border Width"
                    },
                    "color": {
                      "description": "The fill color of this indicator icon.",
                      "type": "string",
                      "displayName": "Color"
                    },
                    "height": {
                      "description": "The height of this indicator icon.",
                      "type": "number",
                      "displayName": "Height"
                    },
                    "opacity": {
                      "description": "The opacity of this indicator icon.",
                      "type": "number",
                      "displayName": "Opacity"
                    },
                    "pattern": {
                      "description": "The pattern of this indicator icon.",
                      "type": "string",
                      "displayName": "Pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shape": {
                      "description": "The shape of this indicator icon. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display for this indicator icon.",
                      "type": "string",
                      "displayName": "Source"
                    },
                    "svgClassName": {
                      "description": "The CSS style class defining the style of this indicator icon.",
                      "type": "string",
                      "displayName": "SVG Class Name"
                    },
                    "svgStyle": {
                      "description": "The CSS style object defining the style of this indicator icon. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "width": {
                      "description": "The width of this indicator icon.",
                      "type": "number",
                      "displayName": "Width"
                    }
                  }
                },
                "label": {
                  "description": "The text for the node label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "row": {
                  "description": "The row id for this node.",
                  "type": "string",
                  "displayName": "Row"
                },
                "secondaryLabel": {
                  "description": "The text for the secondary node label.",
                  "type": "string",
                  "displayName": "Secondary Label"
                },
                "shortDesc": {
                  "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of this node.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of this node. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "xPercentage": {
                  "description": "An optional horizontal position (as a percentage) to be used in the average position calculation when grouping across cells.",
                  "type": "number",
                  "displayName": "X Percentage"
                },
                "yPercentage": {
                  "description": "An optional vertical position (as a percentage) to be used in the average position calculation when grouping across cells.",
                  "type": "number",
                  "displayName": "Y Percentage"
                }
              }
            }
          }
        },
        "otherColor": {
          "description": "The color for the \"other\" group nodes. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Other Color",
          "format": "color",
          "help": "#otherColor"
        },
        "otherThreshold": {
          "description": "The threshold for aggregating nodes into an \"other\" group node. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Other Threshold",
          "value": 0,
          "help": "#otherThreshold"
        },
        "rows": {
          "description": "The list of rows. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Rows",
          "value": null,
          "help": "#rows",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the row. Used to identify this row.",
                  "type": "string",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The text for the row label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the row label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Label Style"
                }
              }
            }
          }
        },
        "rowsTitle": {
          "description": "The text for the title on the row edge.",
          "type": "string",
          "displayName": "Rows Title",
          "value": "",
          "translatable": true,
          "help": "#rowsTitle"
        },
        "selection": {
          "description": "Specifies the ids of the selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection behavior on the NBox. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this NBox.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "#styleDefaults.animationDuration"
            },
            "cellDefaults": {
              "description": "An object defining the style defaults for cells.",
              "type": "object",
              "displayName": "Cell Defaults",
              "help": "#styleDefaults.cellDefaults",
              "properties": {
                "labelHalign": {
                  "description": "The horizontal alignment value for the cell label.",
                  "type": "string",
                  "displayName": "Label Horizontal Alignment",
                  "value": "start",
                  "help": "#styleDefaults.cellDefaults.labelHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the cell labels.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.cellDefaults.labelStyle"
                },
                "maximizedSvgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border when the cell is maximized.",
                  "type": "object",
                  "displayName": "Maximized SVG Style",
                  "help": "#styleDefaults.cellDefaults.maximizedSvgStyle"
                },
                "minimizedSvgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border when the cell is minimized.",
                  "type": "object",
                  "displayName": "Minimized SVG Style",
                  "help": "#styleDefaults.cellDefaults.minimizedSvgStyle"
                },
                "showCount": {
                  "description": "Specifies when to display the cell count label. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Show Count",
                  "value": "auto",
                  "help": "#styleDefaults.cellDefaults.showCount",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "svgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "help": "#styleDefaults.cellDefaults.svgStyle"
                }
              }
            },
            "columnLabelStyle": {
              "description": "The CSS style object defining the style of the column labels.",
              "type": "object",
              "displayName": "Column Label Style",
              "help": "#styleDefaults.columnLabelStyle"
            },
            "columnsTitleStyle": {
              "description": "The CSS style object defining the style of the columns title.",
              "type": "object",
              "displayName": "Columns Title Style",
              "help": "#styleDefaults.columnsTitleStyle"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "#styleDefaults.hoverBehaviorDelay"
            },
            "nodeDefaults": {
              "description": "An object defining the style defaults for nodes.",
              "type": "object",
              "displayName": "Node Defaults",
              "help": "#styleDefaults.nodeDefaults",
              "properties": {
                "borderColor": {
                  "description": "The default color of the node borders. The default value varies based on theme.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#styleDefaults.nodeDefaults.borderColor"
                },
                "borderWidth": {
                  "description": "The default width of the node borders. The default value varies based on theme.",
                  "type": "number",
                  "displayName": "Border Width",
                  "units": "pixels",
                  "help": "#styleDefaults.nodeDefaults.borderWidth"
                },
                "color": {
                  "description": "The default background color of the nodes.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.nodeDefaults.color"
                },
                "iconDefaults": {
                  "description": "An object defining the style defaults for the node icons.",
                  "type": "object",
                  "displayName": "Icon Defaults",
                  "help": "#styleDefaults.nodeDefaults.iconDefaults",
                  "properties": {
                    "background": {
                      "description": "The URL of an image to display by default for the node icons.",
                      "type": "string",
                      "displayName": "Background",
                      "value": "neutral",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.background",
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "This value will be removed in the future. Please use other colors.",
                          "target": "propertyValue",
                          "value": [
                            "red"
                          ]
                        },
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "This value will be removed in the future. Please use other colors.",
                          "target": "propertyValue",
                          "value": [
                            "forest"
                          ]
                        },
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "This value will be removed in the future. Please use other colors.",
                          "target": "propertyValue",
                          "value": [
                            "mauve"
                          ]
                        }
                      ],
                      "propertyEditorValues": {
                        "blue": {
                          "displayName": "Blue"
                        },
                        "forest": {
                          "displayName": "Forest"
                        },
                        "gray": {
                          "displayName": "Gray"
                        },
                        "green": {
                          "displayName": "Green"
                        },
                        "lilac": {
                          "displayName": "Lilac"
                        },
                        "mauve": {
                          "displayName": "Mauve"
                        },
                        "neutral": {
                          "displayName": "Neutral"
                        },
                        "orange": {
                          "displayName": "Orange"
                        },
                        "pink": {
                          "displayName": "Pink"
                        },
                        "purple": {
                          "displayName": "Purple"
                        },
                        "red": {
                          "displayName": "Red"
                        },
                        "slate": {
                          "displayName": "Slate"
                        },
                        "teal": {
                          "displayName": "Teal"
                        }
                      }
                    },
                    "borderColor": {
                      "description": "The default border color of the node icons. The default value varies based on theme.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.borderColor"
                    },
                    "borderRadius": {
                      "description": "The default border radius of the node icons. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.borderRadius"
                    },
                    "borderWidth": {
                      "description": "The default border width of the node icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Border Width",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.borderWidth"
                    },
                    "color": {
                      "description": "The default fill color of the node icons.",
                      "type": "string",
                      "displayName": "Color",
                      "value": "",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.color"
                    },
                    "height": {
                      "description": "The default height of the node icons. If the value is 0, the height will be automatically based on the remaining node contents.",
                      "type": "number",
                      "displayName": "Height",
                      "value": 0,
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.height"
                    },
                    "opacity": {
                      "description": "The default opacity of the node icons.",
                      "type": "number",
                      "displayName": "Opacity",
                      "value": 1,
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.opacity"
                    },
                    "pattern": {
                      "description": "The default fill pattern of the node icons.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "The default shape of the node icons. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "square",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display by default for the node icons.",
                      "type": "string",
                      "displayName": "Source",
                      "value": "",
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.source"
                    },
                    "width": {
                      "description": "The default width of the node icons. If the value is 0, the width will be automatically based on the remaining node contents.",
                      "type": "number",
                      "displayName": "Width",
                      "value": 0,
                      "help": "#styleDefaults.nodeDefaults.iconDefaults.width"
                    }
                  }
                },
                "indicatorColor": {
                  "description": "The default background color of the node indicator sections.",
                  "type": "string",
                  "displayName": "Indicator Color",
                  "value": "",
                  "format": "color",
                  "help": "#styleDefaults.nodeDefaults.indicatorColor"
                },
                "indicatorIconDefaults": {
                  "description": "An object defining the style defaults for the node indicator icons.",
                  "type": "object",
                  "displayName": "Indicator Icon Defaults",
                  "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults",
                  "properties": {
                    "borderColor": {
                      "description": "The default border color of the node indicator icons. The default value varies based on theme.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.borderColor"
                    },
                    "borderRadius": {
                      "description": "The default border radius of the node indicator icons. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.borderRadius"
                    },
                    "borderWidth": {
                      "description": "The default border width of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Border Width",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.borderWidth"
                    },
                    "color": {
                      "description": "The default fill color of the node indicator icons.",
                      "type": "string",
                      "displayName": "Color",
                      "value": "",
                      "format": "color",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.color"
                    },
                    "height": {
                      "description": "The default height of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Height",
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.height"
                    },
                    "opacity": {
                      "description": "The default opacity of the node indicator icons.",
                      "type": "number",
                      "displayName": "Opacity",
                      "value": 1,
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.opacity"
                    },
                    "pattern": {
                      "description": "The default fill pattern of the node indicator icons.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "The default shape of the node indicator icons. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "square",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display by default for the node indicator icons.",
                      "type": "string",
                      "displayName": "Source",
                      "value": null,
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.source"
                    },
                    "width": {
                      "description": "The default width of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Width",
                      "units": "pixels",
                      "help": "#styleDefaults.nodeDefaults.indicatorIconDefaults.width"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the node labels.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.nodeDefaults.labelStyle"
                },
                "secondaryLabelStyle": {
                  "description": "The CSS style object defining the style of the node secondary labels.",
                  "type": "object",
                  "displayName": "Secondary Label Style",
                  "help": "#styleDefaults.nodeDefaults.secondaryLabelStyle"
                }
              }
            },
            "rowLabelStyle": {
              "description": "The CSS style object defining the style of the row labels.",
              "type": "object",
              "displayName": "Row Label Style",
              "help": "#styleDefaults.rowLabelStyle"
            },
            "rowsTitleStyle": {
              "description": "The CSS style object defining the style of the rows title.",
              "type": "object",
              "displayName": "Rows Title Style",
              "value": null,
              "help": "#styleDefaults.rowsTitleStyle"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "highlightedCount": {
              "description": "Used to indicate number of highlighted nodes in a cell.",
              "type": "string",
              "help": "#translations.highlightedCount"
            },
            "labelAdditionalData": {
              "description": "Used for node overflow button.",
              "type": "string",
              "help": "#translations.labelAdditionalData"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelGroup": {
              "description": "Used to indicate group info for nbox drawer and group nodes for accessibility.",
              "type": "string",
              "help": "#translations.labelGroup"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelOther": {
              "description": "Used for the other label which aggregates small data values.",
              "type": "string",
              "help": "#translations.labelOther"
            },
            "labelSize": {
              "description": "Used to indicate size of node drawer and group nodes for accessibility.",
              "type": "string",
              "help": "#translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getCell": {
          "description": "Returns information for automation testing verification of a specified NBox cell.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getCell",
          "params": [
            {
              "name": "rowValue",
              "description": "The id of the containing row.",
              "type": "string"
            },
            {
              "name": "columnValue",
              "description": "The id of the containing column.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getColumn": {
          "description": "Returns information for automation testing verification of a specified NBox column.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getColumn",
          "params": [
            {
              "name": "columnValue",
              "description": "The id of the column.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getColumnCount": {
          "description": "Get the NBox column count.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getColumnCount",
          "return": "Number"
        },
        "getColumnsTitle": {
          "description": "Get the NBox columns title.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getColumnsTitle",
          "return": "String"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDialog": {
          "description": "Returns information for automation testing verification of the currently active NBox dialog.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getDialog",
          "return": "object|null"
        },
        "getGroupBehavior": {
          "description": "Get the NBox group behavior.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getGroupBehavior",
          "return": "String"
        },
        "getGroupNode": {
          "description": "Returns information for automation testing verification of a specified NBox group node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getGroupNode",
          "params": [
            {
              "name": "groupCategory",
              "description": "A string corresponding to the groupCategory value of the nodes represented by this group node.",
              "type": "String"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "getRow": {
          "description": "Returns information for automation testing verification of a specified NBox row.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getRow",
          "params": [
            {
              "name": "rowValue",
              "description": "The id of the row.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getRowCount": {
          "description": "Get the NBox row count.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getRowCount",
          "return": "Number"
        },
        "getRowsTitle": {
          "description": "Get the NBox rows title.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getRowsTitle",
          "return": "String"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating each node of the NBox. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeTemplate",
          "preferredContent": [
            "NBoxNodeElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-n-box> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current node.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "secondaryLabel": {
              "description": "The secondaryLabel of the hovered node.",
              "type": "string"
            },
            "row": {
              "description": "The id of the row containing the hovered node.",
              "type": "string"
            },
            "column": {
              "description": "The id of the column containing the hovered node.",
              "type": "string"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "indicatorColor": {
              "description": "The indicator color of the hovered node.",
              "type": "string"
            },
            "componentElement": {
              "description": "The NBox HTML element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-navigation-list": {
      "name": "oj-navigation-list",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Navigation List",
      "implements": [
        "NavigationListElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnavigationlist",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-sm-condense",
                "oj-md-condense",
                "oj-lg-condense",
                "oj-xl-condense"
              ],
              "description": "Use this class to condense horizontal navigation list items depending on screen size."
            },
            {
              "styleGroup": [
                "oj-disabled"
              ],
              "description": "Any list item can be disabled by adding the oj-disabled class to that element"
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-navigationlist-category-divider"
              ],
              "description": "Use this class to add a horizontal divider line between two categories of items."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-dividers"
              ],
              "description": "Use this class to render a divider between list items. Note: On IE11, this is not supported when overflow attribute is set to 'popup'."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-end"
              ],
              "description": "Use this class to add an badge/metadata/icon to a list item."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-icon"
              ],
              "description": "Use this class to add an icon to a list item."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-label"
              ],
              "description": "Use this class to specify the element with the label. This will eliminate the need for NavigationList to automatically wrap any child element that is not an icon or a badge with this class. Note the content must have the correct order (icon element first, then the label element, then the badge element) as NavigationList in this case will not attempt to reorder the content."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-text-wrap"
              ],
              "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'. This style class is not supported when edge is 'top' or 'bottom'."
            },
            {
              "styleGroup": [
                "oj-navigationlist-item-title"
              ],
              "description": "When arbitrary content is placed inside an item's content area, its title text can be marked using this style class. This helps the component in identifying the Item's label."
            },
            {
              "styleGroup": [
                "oj-navigationlist-nofollow-link"
              ],
              "description": "Use this class to prevent automatic navigation to a URL within a list item. See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-navigationlist-stack-icon-label"
              ],
              "description": "Use this class to display a horizontal Navigation List with icons and labels stacked. Applicable only when edge is top."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-navigation",
          "uxSpecs": [
            "nav-list"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-[size]-condense",
          "kind": "template",
          "displayName": "Condense",
          "description": "Use this class to condense horizontal navigation list items depending on screen size.",
          "help": "#oj-[size]-condense",
          "tokens": [
            {
              "name": "[size]",
              "description": "Screen Size",
              "styleRelation": "inclusive",
              "values": [
                {
                  "name": "sm",
                  "displayName": "Small",
                  "description": "Small screen size range"
                },
                {
                  "name": "md",
                  "displayName": "Medium",
                  "description": "Medium screen size range"
                },
                {
                  "name": "lg",
                  "displayName": "Large",
                  "description": "Large screen size range"
                },
                {
                  "name": "xl",
                  "displayName": "X-Large",
                  "description": "Extra large screen size and up"
                }
              ]
            }
          ]
        },
        {
          "name": "oj-disabled",
          "kind": "class",
          "displayName": "Disabled Item",
          "description": "Any list item can be disabled by adding the oj-disabled class to that element",
          "styleSelector": "oj-navigation-list li",
          "help": "#oj-disabled"
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-navigationlist-category-divider",
          "kind": "class",
          "displayName": "Category Divider",
          "description": "Use this class to add a horizontal divider line between two categories of items.",
          "styleSelector": "oj-navigation-list li",
          "help": "#oj-navigationlist-category-divider"
        },
        {
          "name": "oj-navigationlist-item-dividers",
          "kind": "class",
          "displayName": "Item Dividers",
          "description": "Use this class to render a divider between list items. Note: On IE11, this is not supported when overflow attribute is set to 'popup'.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Redwood"
              ]
            }
          },
          "help": "#oj-navigationlist-item-dividers"
        },
        {
          "name": "oj-navigationlist-item-end",
          "kind": "class",
          "displayName": "Icon",
          "description": "Use this class to add an badge/metadata/icon to a list item.",
          "styleSelector": "oj-navigation-list span",
          "help": "#oj-navigationlist-item-end"
        },
        {
          "name": "oj-navigationlist-item-icon",
          "kind": "class",
          "displayName": "Icon",
          "description": "Use this class to add an icon to a list item.",
          "styleSelector": "oj-navigation-list span",
          "help": "#oj-navigationlist-item-icon"
        },
        {
          "name": "oj-navigationlist-item-label",
          "kind": "class",
          "displayName": "Label",
          "description": "Use this class to specify the element with the label. This will eliminate the need for NavigationList to automatically wrap any child element that is not an icon or a badge with this class. Note the content must have the correct order (icon element first, then the label element, then the badge element) as NavigationList in this case will not attempt to reorder the content.",
          "styleSelector": "oj-navigation-list span",
          "help": "#oj-navigationlist-item-label"
        },
        {
          "name": "oj-navigationlist-item-text-wrap",
          "kind": "class",
          "displayName": "Text Wrap",
          "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'. This style class is not supported when edge is 'top' or 'bottom'.",
          "help": "#oj-navigationlist-item-text-wrap"
        },
        {
          "name": "oj-navigationlist-item-title",
          "kind": "class",
          "displayName": "Title",
          "description": "When arbitrary content is placed inside an item's content area, its title text can be marked using this style class. This helps the component in identifying the Item's label.",
          "styleSelector": "oj-navigation-list span",
          "help": "#oj-navigationlist-item-title"
        },
        {
          "name": "oj-navigationlist-nofollow-link",
          "kind": "class",
          "displayName": "No Follow Link",
          "description": "Use this class to prevent automatic navigation to a URL within a list item. See the Help documentation for more information.",
          "help": "#oj-navigationlist-nofollow-link"
        },
        {
          "name": "oj-navigationlist-stack-icon-label",
          "kind": "class",
          "displayName": "Stack Icon",
          "description": "Use this class to display a horizontal Navigation List with icons and labels stacked. Applicable only when edge is top.",
          "help": "#oj-navigationlist-stack-icon-label"
        }
      ],
      "styleVariables": [
        {
          "description": "Navigation list font size",
          "name": "oj-navigation-list-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list font weight",
          "name": "oj-navigation-list-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list icon margin",
          "name": "oj-navigation-list-icon-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Padding between icon and text",
          "name": "oj-navigation-list-icon-to-text-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list icon size",
          "name": "oj-navigation-list-icon-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list item minimum height",
          "name": "oj-navigation-list-item-min-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list item margin",
          "name": "oj-navigation-list-item-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Navigation list item padding",
          "name": "oj-navigation-list-item-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Default navigation list item label color",
          "name": "oj-navigation-list-item-label-color",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set2"
        },
        {
          "description": "Navigation list item label color when hovered",
          "name": "oj-navigation-list-item-label-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set3"
        },
        {
          "description": "Navigation list item background color when hovered",
          "name": "oj-navigation-list-item-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set3"
        },
        {
          "description": "Navigation list item label color when selected",
          "name": "oj-navigation-list-item-label-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set4"
        },
        {
          "description": "Navigation list item background color when selected",
          "name": "oj-navigation-list-item-bg-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set4"
        },
        {
          "description": "Navigation list item border color when selected",
          "name": "oj-navigation-list-item-border-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-navigation-list-css-set4"
        },
        {
          "description": "Sliding navigation list heading font size",
          "name": "oj-navigation-list-sliding-heading-font-size",
          "formats": [
            "length"
          ],
          "help": "#oj-navigation-list-css-set5"
        },
        {
          "description": "Sliding navigation list heading font weight",
          "name": "oj-navigation-list-sliding-heading-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-navigation-list-css-set5"
        },
        {
          "description": "Sliding navigation list heading line height",
          "name": "oj-navigation-list-sliding-heading-line-height",
          "formats": [
            "number"
          ],
          "help": "#oj-navigation-list-css-set5"
        }
      ],
      "description": "A navigation list allows navigation between different content sections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojNavigationList.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "display",
            "edge",
            "drillMode",
            "overflow",
            "rootLabel"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "#currentItem"
        },
        "data": {
          "description": "Specifies the data provider for the Navigation List. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "display": {
          "description": "Specifies what needs to be displayed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "#display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "drillMode": {
          "description": "Specifies whether expand/collapse or sliding operations are allowed.",
          "type": "string",
          "displayName": "Drill Mode",
          "value": "none",
          "help": "#drillMode",
          "enumValues": [
            "collapsible",
            "none",
            "sliding"
          ],
          "propertyEditorValues": {
            "collapsible": {
              "description": "Allows user to expand and collapse group items. If there are more than two levels in hierarchy, sliding is preferred drill mode.",
              "displayName": "Collapsible"
            },
            "none": {
              "description": "All group items are expanded by default and user not allowed to collapse them.",
              "displayName": "None"
            },
            "sliding": {
              "description": "This is typically used for hierarchical lists. This allows user to view one level at a time.",
              "displayName": "Sliding"
            }
          }
        },
        "edge": {
          "description": "Specifies the edge position of the Navigation List.",
          "type": "string",
          "displayName": "Edge",
          "value": "start",
          "help": "#edge",
          "enumValues": [
            "bottom",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "description": "This renders list items horizontally. Generally used when navlist placed on bottom of content section.",
              "displayName": "Bottom"
            },
            "start": {
              "description": "This renders list items vertically. Generally used when navlist placed on left/start of content section.",
              "displayName": "Start"
            },
            "top": {
              "description": "This renders list items horizontally. Generally used when navlist placed on top of content section.",
              "displayName": "Top"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "hierarchyMenuThreshold": {
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "The hierarchyMenuThreshold property is deprecated as it is not supported in the Redwood theme."
            }
          ],
          "description": "Specifies the level at which the user can see hierarchical menu button. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Hierarchy Menu Threshold",
          "value": 0,
          "help": "#hierarchyMenuThreshold"
        },
        "item": {
          "description": "Customize the functionality of each item in Navigation List.",
          "type": "object",
          "displayName": "Item",
          "help": "#item",
          "properties": {
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "#item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "function|boolean",
              "displayName": "Selectable",
              "value": true,
              "help": "#item.selectable"
            }
          }
        },
        "overflow": {
          "description": "Specifies overflow behaviour for the Navigation List.",
          "type": "string",
          "displayName": "Overflow",
          "value": "hidden",
          "help": "#overflow",
          "enumValues": [
            "hidden",
            "popup"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Overflow is clipped, and the rest of the content will be invisible.",
              "displayName": "Hidden"
            },
            "popup": {
              "description": "Popup menu will be shown with overflowed items.",
              "displayName": "Popup"
            }
          }
        },
        "rootLabel": {
          "description": "Specifies the label for top level list items.",
          "type": "string",
          "displayName": "Root Label",
          "value": "Navigation List",
          "help": "#rootLabel"
        },
        "selection": {
          "description": "Specifies the key of the selected item. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#selection"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "defaultRootLabel": {
              "description": "Provides properties to customize the title text used by Sliding Navigation List for root node.",
              "type": "string",
              "help": "#translations.defaultRootLabel"
            },
            "hierMenuBtnLabel": {
              "description": "Provides properties to customize the hover message text used by Sliding Navigation List as label for Hierarchical Menu button.",
              "type": "string",
              "help": "#translations.hierMenuBtnLabel"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the message text used by Navigation List when waiting for data.",
              "type": "string",
              "help": "#translations.msgFetchingData"
            },
            "msgNoData": {
              "description": "Provides properties to customize the message text used by Navigation List when there are no items.",
              "type": "string",
              "help": "#translations.msgNoData"
            },
            "overflowItemLabel": {
              "description": "Label for overflow menu button.",
              "type": "string",
              "help": "#translations.overflowItemLabel"
            },
            "previousIcon": {
              "description": "Provides properties to customize the hover message text used by Sliding Navigation List for previous button.",
              "type": "string",
              "help": "#translations.previousIcon"
            },
            "selectedLabel": {
              "description": "Provides text to read to screen reader when an item is selected.",
              "type": "string",
              "help": "#translations.selectedLabel"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the Navigation List.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Event handler for when the default animation of a particular action has ended.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "the action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Event handler for when the default animation of a particular action is about to start.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "the action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Event handler for when an item is about to collapse.",
          "cancelable": true,
          "help": "#event:beforeCollapse",
          "detail": {
            "key": {
              "description": "the Key of the item to be collapse",
              "type": "any"
            },
            "item": {
              "description": "the item to be collapse",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Event handler for when before the current item is changed.",
          "cancelable": true,
          "help": "#event:beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the Key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the Key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Event handler for when an item is about to expand.",
          "cancelable": true,
          "help": "#event:beforeExpand",
          "detail": {
            "key": {
              "description": "the Key of the item to be expand",
              "type": "any"
            },
            "item": {
              "description": "the item to be expand",
              "type": "Element"
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Event handler for when before the selection is changed.",
          "cancelable": true,
          "help": "#event:beforeSelect",
          "detail": {
            "key": {
              "description": "Selected list item Key.",
              "type": "any"
            },
            "item": {
              "description": "Selected list item.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Event handler for after an item has collapsed.",
          "help": "#event:collapse",
          "detail": {
            "key": {
              "description": "The Key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Event handler for after an item has expanded.",
          "help": "#event:expand",
          "detail": {
            "key": {
              "description": "The Key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just expanded.",
              "type": "Element"
            }
          }
        },
        "ojSelectionAction": {
          "description": "Triggered when user performs an action gesture on a tab.",
          "bubbles": true,
          "help": "#event:selectionAction",
          "detail": {
            "value": {
              "description": "the value of new selection.",
              "type": "any"
            },
            "previousValue": {
              "description": "the value of previous selection, which can have the same as key if user selects the same tab/item.",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-navigation-list> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            },
            "depth": {
              "description": "The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node (available when hierarchical data is provided).",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
              "type": "any"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-optgroup": {
      "name": "oj-optgroup",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Option Group",
      "implements": [
        "OptgroupElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojoptgroup"
        },
        "oracle": {
          "icon": "oj-ux-ico-get-options"
        }
      },
      "description": "An optgroup supports grouping of child oj-option elements.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojOptgroup.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "label",
            "disabled"
          ]
        }
      ],
      "properties": {
        "disabled": {
          "description": "Disables the group if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "label": {
          "description": "The group label.",
          "type": "string",
          "displayName": "Label",
          "translatable": true,
          "required": true,
          "help": "#label"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-optgroup element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        }
      }
    },
    "oj-option": {
      "name": "oj-option",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Option",
      "implements": [
        "OptionElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojoption"
        },
        "oracle": {
          "icon": "oj-ux-ico-get-options"
        }
      },
      "description": "An option represents a value for JET elements that display a list of values.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojOption.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "value",
            "disabled"
          ]
        }
      ],
      "properties": {
        "disabled": {
          "description": "Disables the option if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "value": {
          "description": "The value of the option.",
          "type": "any",
          "displayName": "Value",
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The default slot for the option's content.",
          "displayName": "default",
          "help": "#Default"
        },
        "startIcon": {
          "description": "The slot for the option's start icon.",
          "help": "#startIcon"
        },
        "endIcon": {
          "description": "The slot for the option's end icon.",
          "help": "#endIcon"
        }
      }
    },
    "oj-paging-control": {
      "name": "oj-paging-control",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Paging Control",
      "implements": [
        "PagingControlElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpagingcontrol",
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-paging-control"
        }
      },
      "description": "A paging control provides paging functionality for data collections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojPagingControl.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "pageOptions.layout",
            "pageOptions.orientation",
            "pageOptions.type",
            "pageOptions.maxPageLinks",
            "overflow",
            "pageSize"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "data": {
          "description": "Specifies the data bound to the Paging Control. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "loadMoreOptions": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, \"loadMore\" is not compatible with Table, Listview, DataGrid default scroll-policy \"loadMoreOnScroll\"."
            }
          ],
          "description": "Options for loadMore mode.",
          "type": "object",
          "displayName": "Load More Options",
          "help": "#loadMoreOptions",
          "properties": {
            "maxCount": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "The maximum number of items to display.",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "minimum": 0,
              "help": "#loadMoreOptions.maxCount"
            }
          }
        },
        "mode": {
          "description": "Specifies the paging mode.",
          "type": "string",
          "displayName": "Mode",
          "value": "page",
          "help": "#mode",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, \"loadMore\" is not compatible with Table, Listview, DataGrid default scroll-policy \"loadMoreOnScroll\".",
              "target": "propertyValue",
              "value": [
                "loadMore"
              ]
            }
          ],
          "enumValues": [
            "loadMore",
            "page"
          ],
          "propertyEditorValues": {
            "loadMore": {
              "description": "Display paging control in high-water mark mode.",
              "displayName": "Load More"
            },
            "page": {
              "description": "Display paging control in pagination mode.",
              "displayName": "Page"
            }
          }
        },
        "overflow": {
          "description": "Specifies the options for when the Paging Control width is too narrow.",
          "type": "string",
          "displayName": "Overflow",
          "value": "fit",
          "help": "#overflow",
          "enumValues": [
            "fit",
            "none"
          ],
          "propertyEditorValues": {
            "fit": {
              "description": "Display as many controls as can fit in the PagingControl width.",
              "displayName": "Fit"
            },
            "none": {
              "description": "Display all controls. Controls which cannot fit will be truncated.",
              "displayName": "None"
            }
          }
        },
        "pageOptions": {
          "description": "Options for page mode.",
          "type": "object",
          "displayName": "Page Options",
          "help": "#pageOptions",
          "properties": {
            "layout": {
              "description": "An array of values specifying the navigation controls to display for numeric page links.",
              "type": "Array<string>",
              "displayName": "Layout",
              "value": [
                "auto"
              ],
              "help": "#pageOptions.layout",
              "enumValues": [
                "all",
                "auto",
                "input",
                "nav",
                "pages",
                "rangeText"
              ],
              "propertyEditorValues": {
                "all": {
                  "description": "Display all controls",
                  "displayName": "All"
                },
                "auto": {
                  "description": "The PagingControl decides which controls to display",
                  "displayName": "Auto"
                },
                "input": {
                  "description": "Display the page input control",
                  "displayName": "Input"
                },
                "nav": {
                  "description": "Display the navigation arrows",
                  "displayName": "Nav"
                },
                "pages": {
                  "description": "Display the page links",
                  "displayName": "Pages"
                },
                "rangeText": {
                  "description": "Display the page range text control",
                  "displayName": "Range Text"
                }
              }
            },
            "maxPageLinks": {
              "description": "Specifies the maximum number of numeric page links to display.",
              "type": "number",
              "displayName": "Max Page Links",
              "value": 6,
              "minimum": 5,
              "help": "#pageOptions.maxPageLinks"
            },
            "orientation": {
              "description": "Specifies the orientation of the page links.",
              "type": "string",
              "displayName": "Orientation",
              "value": "horizontal",
              "help": "#pageOptions.orientation",
              "enumValues": [
                "horizontal",
                "vertical"
              ],
              "propertyEditorValues": {
                "horizontal": {
                  "displayName": "Horizontal"
                },
                "vertical": {
                  "displayName": "Vertical"
                }
              }
            },
            "type": {
              "description": "Specifies the type of page links.",
              "type": "string",
              "displayName": "Type",
              "value": "numbers",
              "help": "#pageOptions.type",
              "enumValues": [
                "dots",
                "numbers"
              ],
              "propertyEditorValues": {
                "dots": {
                  "description": "Render dots",
                  "displayName": "Dots"
                },
                "numbers": {
                  "description": "Render numeric page links",
                  "displayName": "Numbers"
                }
              }
            }
          }
        },
        "pageSize": {
          "description": "Page size.",
          "type": "number",
          "displayName": "Page Size",
          "value": 25,
          "minimum": 1,
          "help": "#pageSize"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "fullMsgItem": {
              "description": "Singe item page index text.",
              "type": "string",
              "help": "#translations.fullMsgItem"
            },
            "fullMsgItemApprox": {
              "description": "Single item page index text for approximate number of items.",
              "type": "string",
              "help": "#translations.fullMsgItemApprox"
            },
            "fullMsgItemAtLeast": {
              "description": "Single item page index text for minimum number of items.",
              "type": "string",
              "help": "#translations.fullMsgItemAtLeast"
            },
            "fullMsgItemRange": {
              "description": "Item range page index text.",
              "type": "string",
              "help": "#translations.fullMsgItemRange"
            },
            "fullMsgItemRangeApprox": {
              "description": "Item range page index text for approximate number of items.",
              "type": "string",
              "help": "#translations.fullMsgItemRangeApprox"
            },
            "fullMsgItemRangeAtLeast": {
              "description": "Item range page index text for minimum number of items.",
              "type": "string",
              "help": "#translations.fullMsgItemRangeAtLeast"
            },
            "labelAccNavFirstPage": {
              "description": "First page label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccNavFirstPage"
            },
            "labelAccNavLastPage": {
              "description": "Last page label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccNavLastPage"
            },
            "labelAccNavNextPage": {
              "description": "Next page label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccNavNextPage"
            },
            "labelAccNavPage": {
              "description": "Current page label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccNavPage"
            },
            "labelAccNavPreviousPage": {
              "description": "Previous page label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccNavPreviousPage"
            },
            "labelAccPageNumber": {
              "description": "Paging control page number label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccPageNumber"
            },
            "labelAccPaging": {
              "description": "Paging control label for screen readers.",
              "type": "string",
              "help": "#translations.labelAccPaging"
            },
            "labelLoadMore": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "Load more link text.",
              "type": "string",
              "help": "#translations.labelLoadMore"
            },
            "labelLoadMoreMaxRows": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "Label for when load more has reached the maximum limit of rows to fetch.",
              "type": "string",
              "help": "#translations.labelLoadMoreMaxRows"
            },
            "labelNavInputPage": {
              "description": "Current page label.",
              "type": "string",
              "help": "#translations.labelNavInputPage"
            },
            "labelNavInputPageMax": {
              "description": "Maximum page label.",
              "type": "string",
              "help": "#translations.labelNavInputPageMax"
            },
            "maxPageLinksInvalid": {
              "description": "Invalid max page links value error.",
              "type": "string",
              "help": "#translations.maxPageLinksInvalid"
            },
            "msgItemNoTotal": {
              "description": "Single item page index text when no total number of items is available.",
              "type": "string",
              "help": "#translations.msgItemNoTotal"
            },
            "msgItemRangeCurrent": {
              "description": "Item range text for known row count.",
              "type": "string",
              "help": "#translations.msgItemRangeCurrent"
            },
            "msgItemRangeCurrentSingle": {
              "description": "Item range text for single page range.",
              "type": "string",
              "help": "#translations.msgItemRangeCurrentSingle"
            },
            "msgItemRangeItems": {
              "description": "Item range \"items\" text.",
              "type": "string",
              "help": "#translations.msgItemRangeItems"
            },
            "msgItemRangeNoTotal": {
              "description": "Item range page index text when no total number of items is available.",
              "type": "string",
              "help": "#translations.msgItemRangeNoTotal"
            },
            "msgItemRangeOf": {
              "description": "Item range \"of\" text.",
              "type": "string",
              "help": "#translations.msgItemRangeOf"
            },
            "msgItemRangeOfApprox": {
              "description": "Item range of \"approx\" text.",
              "type": "string",
              "help": "#translations.msgItemRangeOfApprox"
            },
            "msgItemRangeOfAtLeast": {
              "description": "Item range of \"at least\" text.",
              "type": "string",
              "help": "#translations.msgItemRangeOfAtLeast"
            },
            "pageInvalid": {
              "description": "Invalid page error.",
              "type": "string",
              "help": "#translations.pageInvalid"
            },
            "tipNavFirstPage": {
              "description": "First page button tip.",
              "type": "string",
              "help": "#translations.tipNavFirstPage"
            },
            "tipNavInputPage": {
              "description": "Current page tip.",
              "type": "string",
              "help": "#translations.tipNavInputPage"
            },
            "tipNavLastPage": {
              "description": "Last page button tip.",
              "type": "string",
              "help": "#translations.tipNavLastPage"
            },
            "tipNavNextPage": {
              "description": "Next page button tip.",
              "type": "string",
              "help": "#translations.tipNavNextPage"
            },
            "tipNavPageLink": {
              "description": "Current page link tip.",
              "type": "string",
              "help": "#translations.tipNavPageLink"
            },
            "tipNavPreviousPage": {
              "description": "Previous page button tip.",
              "type": "string",
              "help": "#translations.tipNavPreviousPage"
            }
          }
        }
      },
      "methods": {
        "firstPage": {
          "description": "Load the first page of data",
          "help": "#firstPage",
          "return": "Promise<null>"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "lastPage": {
          "description": "Load the last page of data",
          "help": "#lastPage",
          "return": "Promise<null>"
        },
        "loadNext": {
          "description": "Load the next set of data",
          "help": "#loadNext",
          "return": "Promise<null>"
        },
        "nextPage": {
          "description": "Load the next page of data",
          "help": "#nextPage",
          "return": "Promise<null>"
        },
        "page": {
          "description": "Load the specified page of data",
          "help": "#page",
          "params": [
            {
              "name": "page",
              "description": "Page number.",
              "type": "number"
            }
          ],
          "return": "Promise<null>"
        },
        "previousPage": {
          "description": "Load the previous page of data",
          "help": "#previousPage",
          "return": "Promise<null>"
        },
        "refresh": {
          "description": "Refresh the paging control.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-picto-chart-item": {
      "name": "oj-picto-chart-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Picto Chart Item",
      "implements": [
        "PictoChartItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpictochart"
        }
      },
      "styleVariables": [
        {
          "description": "Pictochart item background color",
          "name": "oj-picto-chart-item-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "The oj-picto-chart-item element is used to declare properties for picto chart items. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojPictoChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the item. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "#borderColor"
        },
        "borderWidth": {
          "description": "The border width of the item in pixels. Does not apply if custom image is specified.",
          "type": "number",
          "displayName": "Border Width",
          "value": 0,
          "units": "pixels",
          "help": "#borderWidth"
        },
        "categories": {
          "description": "An array of category strings corresponding to this picto chart item. This allows highlighting and filtering of items.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The color of the item. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "#color"
        },
        "columnSpan": {
          "description": "The number of columns each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes.",
          "type": "number",
          "displayName": "Column Span",
          "value": 1,
          "minimum": 0,
          "help": "#columnSpan"
        },
        "count": {
          "description": "Specifies the number of times that the shape (or custom image) is drawn. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Count",
          "value": 1,
          "help": "#count"
        },
        "drilling": {
          "description": "Whether drilling is enabled on the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "name": {
          "description": "The name of the item. Used for default tooltip and accessibility.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "translatable": true,
          "help": "#name"
        },
        "rowSpan": {
          "description": "The number of rows each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes.",
          "type": "number",
          "displayName": "Row Span",
          "value": 1,
          "help": "#rowSpan"
        },
        "shape": {
          "description": "The shape of the item. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Shape",
          "value": "rectangle",
          "help": "#shape",
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "none": {
              "displayName": "None"
            },
            "plus": {
              "displayName": "Plus"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "shortDesc": {
          "description": "The description of the item. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "help": "#shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "#source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "value": "",
          "help": "#sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "value": "",
          "help": "#sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "value": "",
          "help": "#sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        }
      }
    },
    "oj-picto-chart": {
      "name": "oj-picto-chart",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Picto Chart",
      "implements": [
        "PictoChartElement"
      ],
      "type": "core",
      "since": "1.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpictochart",
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart-pictochart",
          "uxSpecs": [
            "data-visualization-picto-chart"
          ]
        }
      },
      "description": "A picto chart displays information using icons to visualize an absolute number or the relative sizes of the different parts of a population.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojPictoChart.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "columnCount",
            "rowCount",
            "layout",
            "layoutOrigin",
            "hoverBehavior",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "alphaFade",
            "auto",
            "none",
            "popIn",
            "zoom"
          ],
          "propertyEditorValues": {
            "alphaFade": {
              "displayName": "Alpha Fade"
            },
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            },
            "popIn": {
              "displayName": "Pop In"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "columnCount": {
          "description": "The number of columns in the picto chart. If unspecified, the number of columns will be automatically computed.",
          "type": "number|null",
          "displayName": "Column Count",
          "value": null,
          "help": "#columnCount"
        },
        "columnWidth": {
          "description": "The width of a column in pixels. If unspecified, the column width will be automatically computed. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Column Width",
          "value": null,
          "units": "pixels",
          "help": "#columnWidth"
        },
        "data": {
          "description": "Specifies the DataProvider for the picto chart. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "#drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "#hoverBehaviorDelay"
        },
        "items": {
          "description": "An array of objects that define the picto chart items. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the item. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "borderWidth": {
                  "description": "The border width of the item in pixels. Does not apply if custom image is specified.",
                  "type": "number",
                  "displayName": "Border Width"
                },
                "categories": {
                  "description": "An array of category strings corresponding to this item. If not specified, defaults to the item id or name. This enables highlighting and filtering of individual data items through interactions with other visualization elements.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The color of the item. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "Color"
                },
                "columnSpan": {
                  "description": "The number of columns each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
                  "type": "number",
                  "displayName": "Column Span"
                },
                "count": {
                  "description": "Specifies the number of times that the shape (or custom image) is drawn. Fractional counts (such as 4.5) are supported; however, fractions other than the multiples of 0.5 should be avoided because the fractional rendering ignores the gaps between shapes and the irregularity of the shapes.",
                  "type": "number",
                  "displayName": "Count"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all items at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "description": "The item id. The item id should be set by the application if the DataProvider is not being used.",
                  "type": "any",
                  "displayName": "Id"
                },
                "name": {
                  "description": "The name of the item. Used for default tooltip and accessibility.",
                  "type": "string",
                  "displayName": "Name"
                },
                "rowSpan": {
                  "description": "The number of rows each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
                  "type": "number",
                  "displayName": "Row Span"
                },
                "shape": {
                  "description": "The shape of the item. Can take the name of a built-in shape or the SVG path commands for a custom shape. \"None\" will make the item transparent and can be used to create gaps. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "Shape",
                  "value": "rectangle",
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "ellipse": {
                      "displayName": "Ellipse"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "shortDesc": {
                  "description": "Short description string for accessibility users.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string",
                  "displayName": "Source"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover Selected"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Selected"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                }
              }
            }
          }
        },
        "layout": {
          "description": "Specifies the direction in which items are laid out.",
          "type": "string",
          "displayName": "Layout",
          "value": "horizontal",
          "help": "#layout",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "layoutOrigin": {
          "description": "Specifies where the first item is rendered. Subsequent items follow the first item according to the layout.",
          "type": "string",
          "displayName": "Layout Origin",
          "value": "topStart",
          "help": "#layoutOrigin",
          "enumValues": [
            "bottomEnd",
            "bottomStart",
            "topEnd",
            "topStart"
          ],
          "propertyEditorValues": {
            "bottomEnd": {
              "displayName": "Bottom End"
            },
            "bottomStart": {
              "displayName": "Bottom Start"
            },
            "topEnd": {
              "displayName": "Top End"
            },
            "topStart": {
              "displayName": "Top Start"
            }
          }
        },
        "rowCount": {
          "description": "The number of rows in the picto chart. If unspecified, the number of rows will be automatically computed.",
          "type": "number|null",
          "displayName": "Row Count",
          "value": null,
          "help": "#rowCount"
        },
        "rowHeight": {
          "description": "The height of a row in pixels. If unspecified, the row height will be automatically computed. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Row Height",
          "value": null,
          "units": "pixels",
          "help": "#rowHeight"
        },
        "selection": {
          "description": "An array of id strings, used to define the selected objects.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the picto chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getItem": {
          "description": "Returns information for automation testing verification of a specified item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getItem",
          "params": [
            {
              "name": "index",
              "description": "The index.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getItemCount": {
          "description": "Returns the number of items in the pictoChart data.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getItemCount",
          "return": "number"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the picto chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "PictoChartItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-picto-chart> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "name": {
              "description": "The name of the hovered item.",
              "type": "string"
            },
            "count": {
              "description": "The count of the hovered item.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The picto chart HTML element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-popup": {
      "name": "oj-popup",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Popup",
      "implements": [
        "PopupElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpopup",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            }
          ],
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-popup-oj",
          "uxSpecs": [
            "popup"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        }
      ],
      "styleVariables": [
        {
          "description": "Popup background color",
          "name": "oj-popup-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Popup border color",
          "name": "oj-popup-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Popup border radius",
          "name": "oj-popup-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Popup box shadow",
          "name": "oj-popup-box-shadow",
          "help": "#css-variables"
        },
        {
          "description": "Popup padding",
          "name": "oj-popup-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Popup tail height",
          "name": "oj-popup-tail-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Popup tail width",
          "name": "oj-popup-tail-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A popup temporarily 'pops up' content in the foreground.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojPopup.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "initalFocus",
            "modality",
            "autoDismiss",
            "tail",
            "position.at.horizontal",
            "position.at.vertical",
            "position.collision",
            "position.my.horizontal",
            "position.my.vertical",
            "position.of",
            "position.offset.x",
            "position.offset.y",
            "style"
          ]
        }
      ],
      "properties": {
        "autoDismiss": {
          "description": "Specifies the auto dismissal behavior.",
          "type": "string",
          "displayName": "Auto Dismiss",
          "value": "focusLoss",
          "help": "#autoDismiss",
          "enumValues": [
            "focusLoss",
            "none"
          ],
          "propertyEditorValues": {
            "focusLoss": {
              "description": "defines auto dismissal behavior when focus leaves the content of the popup or associated launcher. In addition, if what the popup is positioned to is not visible within an overflow area, the popup will auto close dismiss.",
              "displayName": "Focus Loss"
            },
            "none": {
              "description": "disables auto dismissal behaviors.",
              "displayName": "None"
            }
          }
        },
        "chrome": {
          "description": "Specifies whether to use the border, shadow, and background colors from the active theme.",
          "type": "string",
          "displayName": "Chrome",
          "value": "default",
          "help": "#chrome",
          "enumValues": [
            "default",
            "none"
          ],
          "propertyEditorValues": {
            "default": {
              "description": "describes the popups border, shadow, and background color defined by the active theme.",
              "displayName": "Default"
            },
            "none": {
              "description": "turns off the outer chrome defined by the active theme.",
              "displayName": "None"
            }
          }
        },
        "initialFocus": {
          "description": "Specifies whether the popup steals focus to its content when initially opened.",
          "type": "string",
          "displayName": "Initial Focus",
          "value": "auto",
          "help": "#initialFocus",
          "enumValues": [
            "auto",
            "firstFocusable",
            "none",
            "popup"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "is derived from the values of the modality and autoDismiss properties",
              "displayName": "Auto"
            },
            "firstFocusable": {
              "description": "defines that a popup should grab focus to the first focusable element within the popup's content.",
              "displayName": "First Focusable"
            },
            "none": {
              "description": "prevents the popup from stealing focus when open.",
              "displayName": "None"
            },
            "popup": {
              "description": "focus to the root popup container (good choice for touch platforms).",
              "displayName": "Popup"
            }
          }
        },
        "modality": {
          "description": "Specifies whether the popup should block user input to the page.",
          "type": "string",
          "displayName": "Modality",
          "value": "modeless",
          "help": "#modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "propertyEditorValues": {
            "modal": {
              "description": "The popup is modal. Interactions with other page elements are disabled. Modal popups overlay other page elements.",
              "displayName": "Modal"
            },
            "modeless": {
              "description": "defines a modeless popup.",
              "displayName": "Modeless"
            }
          }
        },
        "position": {
          "description": "Specifies the position of a popup when launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Position",
          "help": "#position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "#position.at",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of what the popup is aligned to.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "start",
                  "help": "#position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of what the popup is aligned to.",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "bottom",
                  "help": "#position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "value": "flip",
              "help": "#position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipcenter",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipcenter": {
                  "description": "first applies the flip rule and follow with center alignment.",
                  "displayName": "Flipcenter"
                },
                "flipfit": {
                  "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "no collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the popup to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "#position.my",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of the popup.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "start",
                  "help": "#position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of the popup.",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "top",
                  "help": "#position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Which element to position the popup against. See the Help documentation for more information.",
              "type": "string|object",
              "displayName": "Of",
              "help": "#position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "#position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal alignment offset.",
                  "type": "number",
                  "displayName": "X",
                  "value": 0,
                  "help": "#position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "value": 0,
                  "help": "#position.offset.y"
                }
              }
            }
          }
        },
        "tail": {
          "description": "Specifies whether to display a decoration pointing from the popup to the launching element. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Tail",
          "value": "none",
          "help": "#tail",
          "enumValues": [
            "none",
            "simple"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "no decoration will be displayed from the popup pointing to the launcher.",
              "displayName": "None"
            },
            "simple": {
              "description": "enables showing the tail defined by the current theme.",
              "displayName": "Simple"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaCloseSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the context area of an open popup and used for ojPopup#close activation.",
              "type": "string",
              "help": "#translations.ariaCloseSkipLink"
            },
            "ariaFocusSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the launcher of an open popup. The launcher is passed as the first argument to ojPopup#open. Activation of the link will move focus to the content of the associated popup.",
              "type": "string",
              "help": "#translations.ariaFocusSkipLink"
            },
            "ariaLiveRegionInitialFocusFirstFocusable": {
              "description": "Message announced to a WAI-ARIA live region on desktop platforms when a popup opens and steals initial focus.",
              "type": "string",
              "help": "#translations.ariaLiveRegionInitialFocusFirstFocusable"
            },
            "ariaLiveRegionInitialFocusFirstFocusableTouch": {
              "description": "Message announced to a WAI-ARIA live region on platforms supporting VoiceOver when a popup opens and steals initial focus.",
              "type": "string",
              "help": "#translations.ariaLiveRegionInitialFocusFirstFocusableTouch"
            },
            "ariaLiveRegionInitialFocusNone": {
              "description": "Message announced to a WAI-ARIA live region on desktop platforms when a popup opens but doesn't change focus.",
              "type": "string",
              "help": "#translations.ariaLiveRegionInitialFocusNone"
            },
            "ariaLiveRegionInitialFocusNoneTouch": {
              "description": "Message announced to a WAI-ARIA live region on platforms supporting VoiceOver when a popup opens but doesn't change focus.",
              "type": "string",
              "help": "#translations.ariaLiveRegionInitialFocusNoneTouch"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the popup.",
          "help": "#close",
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "isOpen": {
          "description": "Returns the state of whether the popup is currently visible.",
          "help": "#isOpen",
          "return": "boolean"
        },
        "open": {
          "description": "Opens the popup.",
          "help": "#open",
          "params": [
            {
              "name": "launcher",
              "description": "selector or dom element that is associated with the popup. Defines the context of how the popup is used. The argument is required.",
              "type": "string|Element"
            },
            {
              "name": "position",
              "description": "{@link oj.ojPopup.Position} an element relative to another",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the popup, causing it to reevaluate its position.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation had ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that triggered the animation.",
              "type": "\"open\"|\"close\""
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, It must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojBeforeClose": {
          "description": "Triggered before the popup is dismissed.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeClose"
        },
        "ojBeforeOpen": {
          "description": "Triggered before the popup is launched.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeOpen"
        },
        "ojClose": {
          "description": "Triggered after the popup is dismissed.",
          "bubbles": true,
          "help": "#event:close"
        },
        "ojFocus": {
          "description": "Triggered after focus has been transferred to the popup.",
          "bubbles": true,
          "help": "#event:focus"
        },
        "ojOpen": {
          "description": "Triggered after the popup is launched.",
          "bubbles": true,
          "help": "#event:open"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-popup> accepts any DOM elements in its Default slot but only tracks the validity state of any JET custom element descendents that contain the valid property.",
          "displayName": "default",
          "help": "#Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-progress-bar": {
      "name": "oj-progress-bar",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "ProgressBarElement"
      ],
      "description": "A progress bar allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Bar",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-progress-linear",
          "uxSpecs": [
            "progress-indicator"
          ]
        },
        "vbdt": {
          "module": "ojs/ojprogress-bar",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-progress-bar-embedded"
              ],
              "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog."
            }
          ],
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojProgressBar.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "9.0.0",
      "styleClasses": [
        {
          "name": "oj-progress-bar-embedded",
          "kind": "class",
          "displayName": "Embedded",
          "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog.",
          "help": "#oj-progress-bar-embedded"
        }
      ],
      "styleVariables": [
        {
          "name": "oj-progress-bar-height",
          "description": "Progress bar height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-progress-bar-border-radius",
          "description": "Progress bar border radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-progress-bar-track-bg-color",
          "description": "Progress bar track background color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-progress-bar-value-bg-color",
          "description": "Progress bar value background color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "#max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Bar.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "value",
          "minimum": -1,
          "value": 0
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-progress-circle": {
      "name": "oj-progress-circle",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "ProgressCircleElement"
      ],
      "description": "A progress circle allows the user to visualize the progression of an extended computer operation.",
      "displayName": "Progress Circle",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-circular-progress-7",
          "uxSpecs": [
            "progress-indicator"
          ]
        },
        "vbdt": {
          "module": "ojs/ojprogress-circle",
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojProgressCircle.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "size",
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "since": "9.0.0",
      "styleVariables": [
        {
          "name": "oj-progress-circle-value-bg-color",
          "description": "Progress circle value background color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-progress-circle-determinate-track-bg-color",
          "description": "Determinate progress circle track background color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "name": "oj-progress-circle-sm-size",
          "description": "Progress circle size applied to small ones",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set2"
        },
        {
          "name": "oj-progress-circle-sm-track-width",
          "description": "Progress circle track width applied to small sizing progress circles",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set2"
        },
        {
          "name": "oj-progress-circle-md-size",
          "description": "Progress circle size applied to medium ones",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set3"
        },
        {
          "name": "oj-progress-circle-md-track-width",
          "description": "Progress circle track width applied to medium sizing progress circles",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set3"
        },
        {
          "name": "oj-progress-circle-lg-size",
          "description": "Progress circle size applied to large ones",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set4"
        },
        {
          "name": "oj-progress-circle-lg-track-width",
          "description": "Progress circle track width applied to large sizing progress circles",
          "formats": [
            "length"
          ],
          "help": "#oj-progress-circle-set4"
        }
      ],
      "properties": {
        "max": {
          "type": "number",
          "description": "The maximum allowed value.",
          "displayName": "Max",
          "help": "max",
          "minimum": 0,
          "value": 100
        },
        "value": {
          "type": "number",
          "description": "The value of the Progress Circle.",
          "displayName": "Value",
          "eventGroup": "common",
          "help": "#value",
          "minimum": -1,
          "value": 0
        },
        "size": {
          "type": "string",
          "description": "Specifies the size of the progress circle.",
          "displayName": "Size",
          "help": "#size",
          "propertyEditorValues": {
            "sm": {
              "description": "small progress circle",
              "displayName": "Small"
            },
            "md": {
              "description": "medium progress circle (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large progress circle",
              "displayName": "Large"
            }
          },
          "enumValues": [
            "lg",
            "md",
            "sm"
          ],
          "value": "md"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-progress-list": {
      "name": "oj-progress-list",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Progress List",
      "implements": [
        "ProgressListElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojprogresslist",
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "themes": {
          "unsupportedThemes": [
            "Redwood"
          ]
        },
        "oracle": {
          "icon": "oj-ux-ico-progress-list"
        }
      },
      "status": [
        {
          "type": "deprecated",
          "since": "8.0.0",
          "description": "Please use <oj-list-view> instead."
        }
      ],
      "description": "A progress list displays a list of items and their progress, it is most commonly used in conjunction with a file picker to display file upload progress.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojProgressList.html",
      "propertyLayout": [
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "data": {
          "description": "Data used by the ProgressList.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-progress": {
      "name": "oj-progress",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Progress",
      "implements": [
        "ProgressElement"
      ],
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojprogress",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-progress-bar-embedded"
              ],
              "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog."
            },
            {
              "styleGroup": [
                "oj-progress-bar-end-label"
              ],
              "description": "Optional class that can be set on a div after the oj-progress element. This div contains the end text to display underneath the oj-progress bar."
            },
            {
              "styleGroup": [
                "oj-progress-bar-start-label"
              ],
              "description": "Optional class that can be set on a div after the oj-progress element. This div contains the start text to display underneath the oj-progress bar."
            }
          ],
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "themes": {
          "unsupportedThemes": [
            "Redwood"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-progress-bar-embedded",
          "kind": "class",
          "displayName": "Embedded",
          "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog.",
          "help": "#oj-progress-bar-embedded"
        },
        {
          "name": "oj-progress-bar-end-label",
          "kind": "class",
          "displayName": "End Label",
          "description": "Optional class that can be set on a div after the oj-progress element. This div contains the end text to display underneath the oj-progress bar.",
          "help": "#oj-progress-bar-end-label"
        },
        {
          "name": "oj-progress-bar-start-label",
          "kind": "class",
          "displayName": "Start Label",
          "description": "Optional class that can be set on a div after the oj-progress element. This div contains the start text to display underneath the oj-progress bar.",
          "help": "#oj-progress-bar-start-label"
        }
      ],
      "description": "A progress allows the user to visualize the progression of an extended computer operation.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojProgress.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "max"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "max": {
          "description": "The maximum allowed value.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "minimum": 0,
          "help": "#max"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaIndeterminateProgressText": {
              "description": "Accessible text read by a screen reader while an indeterminate oj-progress is in progress.",
              "type": "string",
              "help": "#translations.ariaIndeterminateProgressText"
            }
          }
        },
        "type": {
          "description": "The shape of the Progress.",
          "type": "string",
          "displayName": "Type",
          "value": "bar",
          "help": "#type",
          "enumValues": [
            "bar",
            "circle"
          ],
          "propertyEditorValues": {
            "bar": {
              "description": "displays progress in a rectangular horizontal meter",
              "displayName": "Bar"
            },
            "circle": {
              "description": "displays progress in a circular meter",
              "displayName": "Circle"
            }
          }
        },
        "value": {
          "description": "The value of the Progress.",
          "type": "number",
          "displayName": "Value",
          "eventGroup": "common",
          "value": 0,
          "writeback": true,
          "minimum": -1,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "",
          "status": [
            {
              "type": "deprecated",
              "since": "10.0.0",
              "description": "<oj-progress> no longer supports context menu."
            }
          ],
          "help": "#contextMenu"
        }
      }
    },
    "oj-radioset": {
      "name": "oj-radioset",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Radioset",
      "implements": [
        "RadiosetElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojradioset",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-choice-direction-column"
              ],
              "description": "This is the default. It lays out the radios in a column."
            },
            {
              "styleGroup": [
                "oj-choice-direction-row"
              ],
              "description": "It lays out the radios in a row."
            },
            {
              "styleGroup": [
                "oj-radioset-input-end"
              ],
              "description": "Use this styleclass to order the radio at the end and the label text at the start even if a theme has a different default order."
            },
            {
              "styleGroup": [
                "oj-radioset-input-start"
              ],
              "description": "Use this styleclass to order the radio at the start and label text at the end even if a theme has a different default order."
            },
            {
              "styleGroup": [
                "oj-radioset-no-chrome"
              ],
              "description": "Use this styleclass if you don't want the chrome around the set."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-radio-button-set",
          "uxSpecs": [
            "radioset"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-choice-direction-column",
          "kind": "class",
          "displayName": "Column Layout",
          "description": "This is the default. It lays out the radios in a column.",
          "help": "#oj-choice-direction-column"
        },
        {
          "name": "oj-choice-direction-row",
          "kind": "class",
          "displayName": "Row Layout",
          "description": "It lays out the radios in a row.",
          "help": "#oj-choice-direction-row"
        },
        {
          "name": "oj-radioset-input-end",
          "kind": "class",
          "displayName": "Input End",
          "description": "Use this styleclass to order the radio at the end and the label text at the start even if a theme has a different default order.",
          "help": "#oj-radioset-input-end"
        },
        {
          "name": "oj-radioset-input-start",
          "kind": "class",
          "displayName": "Input Start",
          "description": "Use this styleclass to order the radio at the start and label text at the end even if a theme has a different default order.",
          "help": "#oj-radioset-input-start"
        },
        {
          "name": "oj-radioset-no-chrome",
          "kind": "class",
          "displayName": "No Chrome",
          "description": "Use this styleclass if you don't want the chrome around the set.",
          "help": "#oj-radioset-no-chrome"
        }
      ],
      "description": "A radio set allows the user to select one option from a set of mutually exclusive options.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojRadioset.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies if the component is disabled. If true, then all of its inputs and labels are also disabled. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the Radioset.",
          "type": "object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "readonlyNoValue": {
              "description": "Used for the readonly radioset when no option is selected.",
              "type": "string",
              "help": "#translations.readonlyNoValue"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the component. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the radioset. A refresh is required after a radioset is programmatically changed. See the Help documentation for more information.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-radioset element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-range-slider": {
      "name": "oj-range-slider",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Range Slider",
      "implements": [
        "RangeSliderElement"
      ],
      "type": "core",
      "since": "8.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojslider",
          "defaultColumns": "3",
          "minColumns": "3"
        },
        "oracle": {
          "icon": "oj-ux-ico-range-slider",
          "uxSpecs": [
            "slider"
          ]
        }
      },
      "description": "A range-slider allows a user to set a value range by moving the indicators.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojRangeSlider.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "type",
            "orientation",
            "min",
            "max",
            "step",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum value of the range slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum value of the range slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "#min"
        },
        "orientation": {
          "description": "Specifies the orientation of the range slider.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the range slider horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the range slider vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "step": {
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "help": "#step"
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "#transientValue",
          "properties": {
            "end": {
              "description": "Specifies the end transientValue of the range selected.",
              "type": "number|null",
              "displayName": "End",
              "value": null,
              "help": "#transientValue.end"
            },
            "start": {
              "description": "Specifies the start transientValue of the range selected.",
              "type": "number|null",
              "displayName": "Start",
              "value": null,
              "help": "#transientValue.start"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "higherValueThumb": {
              "description": "aria-label value for higher value thumb",
              "type": "string",
              "help": "#translations.higherValueThumb"
            },
            "lowerValueThumb": {
              "description": "aria-label value for lower value thumb",
              "type": "string",
              "help": "#translations.lowerValueThumb"
            },
            "startEnd": {
              "description": "value.start is greater than value.end.",
              "type": "string",
              "help": "#translations.startEnd"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The numerical value of the range-slider.",
          "type": "object|null",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value",
          "properties": {
            "end": {
              "description": "Specifies the end value of the range selected.",
              "type": "number|null",
              "displayName": "End",
              "value": null,
              "help": "#value.end"
            },
            "start": {
              "description": "Specifies the start value of the range selected.",
              "type": "number|null",
              "displayName": "Start",
              "value": null,
              "help": "#value.start"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-rating-gauge": {
      "name": "oj-rating-gauge",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Rating Gauge",
      "implements": [
        "RatingGaugeElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge",
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-gauge-rating",
          "uxSpecs": [
            "gauge"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Rating gauge small size",
          "name": "oj-rating-gauge-sm-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Rating gauge medium size",
          "name": "oj-rating-gauge-md-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Rating gauge large size",
          "name": "oj-rating-gauge-lg-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Rating gauge border color when hovered",
          "name": "oj-rating-gauge-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set2"
        },
        {
          "description": "Rating gauge color when hovered",
          "name": "oj-rating-gauge-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set2"
        },
        {
          "description": "Rating gauge border color when unselected",
          "name": "oj-rating-gauge-border-color-unselected",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set3"
        },
        {
          "description": "Rating gauge color when unselected",
          "name": "oj-rating-gauge-color-unselected",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set3"
        },
        {
          "description": "Rating gauge border color when selected",
          "name": "oj-rating-gauge-border-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set4"
        },
        {
          "description": "Rating gauge color when selected",
          "name": "oj-rating-gauge-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set4"
        },
        {
          "description": "Rating gauge border color when changed",
          "name": "oj-rating-gauge-border-color-changed",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set5"
        },
        {
          "description": "Rating gauge color when changed",
          "name": "oj-rating-gauge-color-changed",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set5"
        },
        {
          "description": "Rating gauge color when selected and disabled",
          "name": "oj-rating-gauge-color-selected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set6"
        },
        {
          "description": "Rating gauge color when unselected and disabled",
          "name": "oj-rating-gauge-color-unselected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set7"
        },
        {
          "description": "Rating gauge color when selected and readonly",
          "name": "oj-rating-gauge-color-selected-readonly",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set8"
        },
        {
          "description": "Rating gauge border color when selected and readonly",
          "name": "oj-rating-gauge-border-color-selected-readonly",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set8"
        },
        {
          "description": "Rating gauge color when unselected and readonly",
          "name": "oj-rating-gauge-color-unselected-readonly",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set9"
        },
        {
          "description": "Rating gauge border color when unselected and readonly",
          "name": "oj-rating-gauge-border-color-unselected-readonly",
          "formats": [
            "color"
          ],
          "help": "#oj-rating-gauge-css-set9"
        }
      ],
      "description": "A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojRatingGauge.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "max",
            "step"
          ]
        }
      ],
      "properties": {
        "changed": {
          "description": "Whether there has been a value entered by the user.",
          "type": "boolean",
          "displayName": "Changed",
          "value": false,
          "writeback": true,
          "help": "#changed"
        },
        "changedState": {
          "description": "The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true.",
          "type": "object",
          "displayName": "Changed State",
          "help": "#changedState",
          "properties": {
            "borderColor": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The border color for changed state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "#changedState.borderColor"
            },
            "color": {
              "description": "The color for changed state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "#changedState.color"
            },
            "shape": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "#changedState.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangle": {
                  "displayName": "Triangle"
                }
              }
            },
            "source": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#changedState.source"
            },
            "svgClassName": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The CSS style class to apply to the changed state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#changedState.svgClassName"
            },
            "svgStyle": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The inline style to apply to the changed state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#changedState.svgStyle"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Defines whether the gauge is disabled or not. User interaction is prevented if set to true. Visual indication will not be present when custom image source is used. Other state specific svg-class-name and svg-style will be overridden by disabled default style.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "hoverState": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The shape that displays on hover.",
          "type": "object",
          "displayName": "Hover State",
          "help": "#hoverState",
          "properties": {
            "borderColor": {
              "description": "The border color for hover state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "#hoverState.borderColor"
            },
            "color": {
              "description": "The color for hover state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "#hoverState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "#hoverState.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangle": {
                  "displayName": "Triangle"
                }
              }
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#hoverState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the hover state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#hoverState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the hover state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#hoverState.svgStyle"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "max": {
          "description": "Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed.",
          "type": "number",
          "displayName": "Max",
          "value": 5,
          "minimum": 0,
          "help": "#max"
        },
        "min": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "minimum": 0,
          "help": "#min"
        },
        "orientation": {
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "Usage of vertical rating gauges is not recommended."
            }
          ],
          "description": "Defines the type of rating gauge to be rendered.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "preserveAspectRatio": {
          "description": "Specifies whether the images provided should show up at their defined aspect ratios. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Preserve Aspect Ratio",
          "value": "meet",
          "help": "#preserveAspectRatio",
          "enumValues": [
            "meet",
            "none"
          ],
          "propertyEditorValues": {
            "meet": {
              "displayName": "Meet"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "readonly": {
          "description": "Defines whether the value of the gauge can be changed by the end user.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "selectedState": {
          "description": "The selected shape for the gauge.",
          "type": "object",
          "displayName": "Selected State",
          "help": "#selectedState",
          "properties": {
            "borderColor": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The border color for selected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "#selectedState.borderColor"
            },
            "color": {
              "description": "The color for selected state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "#selectedState.color"
            },
            "shape": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "#selectedState.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangle": {
                  "displayName": "Triangle"
                }
              }
            },
            "source": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#selectedState.source"
            },
            "svgClassName": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The CSS style class to apply to the selected state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#selectedState.svgClassName"
            },
            "svgStyle": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The inline style to apply to the selected state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#selectedState.svgStyle"
            }
          }
        },
        "size": {
          "description": "Specifies the size of the rating gauge item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Size",
          "value": "fit",
          "help": "#size",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "This value will be removed in the future. Please use sm.",
              "target": "propertyValue",
              "value": [
                "small"
              ]
            },
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "This value will be removed in the future. Please use md.",
              "target": "propertyValue",
              "value": [
                "medium"
              ]
            },
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "This value will be removed in the future. Please use lg.",
              "target": "propertyValue",
              "value": [
                "large"
              ]
            }
          ],
          "enumValues": [
            "fit",
            "large",
            "lg",
            "md",
            "medium",
            "sm",
            "small"
          ],
          "propertyEditorValues": {
            "fit": {
              "description": "The size of the individual rating gauge shapes will be determined based on the component size and the value of max. If no explicit component size is specified, a theme-specific default will be used.",
              "displayName": "Fit"
            },
            "large": {
              "description": "Large size, as determined by the theme, will be used for the rating gauge shapes. Deprecated in 12.0.0. Use lg instead.",
              "displayName": "Large"
            },
            "lg": {
              "description": "Large size, as determined by the theme, will be used for the rating gauge shapes. The component size will be computed to fit the individual shapes.",
              "displayName": "Lg"
            },
            "md": {
              "description": "Medium size, as determined by the theme, will be used for the rating gauge shapes. The component size will be computed to fit the individual shapes. Not recommended for editable gauges.",
              "displayName": "Md"
            },
            "medium": {
              "description": "Medium size, as determined by the theme, will be used for the rating gauge shapes. Deprecated in 12.0.0. Use md instead.",
              "displayName": "Medium"
            },
            "sm": {
              "description": "Small size, as determined by the theme, will be used for the rating gauge shapes. The component size will be computed to fit the individual shapes. Not recommended for editable gauges.",
              "displayName": "Sm"
            },
            "small": {
              "description": "Small size, as determined by the theme, will be used for the rating gauge shapes. Deprecated in 12.0.0. Use sm instead.",
              "displayName": "Small"
            }
          }
        },
        "step": {
          "description": "Specifies the increment by which values can be specified by the end user.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "help": "#step",
          "propertyEditorValues": {
            "0": {
              "displayName": "0"
            },
            "1": {
              "displayName": "1"
            },
            "5": {
              "displayName": "5"
            }
          }
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is not recommended in the Redwood design system"
                    }
                  ],
                  "description": "The border color of the threshold.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string",
                  "displayName": "Color"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number",
                  "displayName": "Max"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "displayName": "Short Desc"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "#transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gaugee."
                }
              ],
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-rating-gauge."
                }
              ],
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "unselectedState": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The unselected shape for the gauge.",
          "type": "object",
          "displayName": "Unselected State",
          "help": "#unselectedState",
          "properties": {
            "borderColor": {
              "description": "The border color for unselected state. Does not apply if a custom image is specified. The default value comes from the CSS and varies based on theme.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "#unselectedState.borderColor"
            },
            "color": {
              "description": "The color for unselected state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "#unselectedState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the SVG path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "#unselectedState.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangle": {
                  "displayName": "Triangle"
                }
              }
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#unselectedState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the unselected state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#unselectedState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the unselected state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#unselectedState.svgStyle"
            }
          }
        },
        "value": {
          "description": "The value set on the gauge.",
          "type": "number|null",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "minimum": "0",
          "help": "#value"
        },
        "visualEffects": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated."
            }
          ],
          "description": "Defines whether theme specific visual effects such as overlays and gradients are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "#visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The rating gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-refresher": {
      "name": "oj-refresher",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Refresher",
      "implements": [
        "RefresherElement"
      ],
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojrefresher",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-scroller"
              ],
              "description": "Designates the element to be the scroller element used in place of the target."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "12"
        },
        "oracle": {
          "icon": "oj-ux-ico-refresher"
        }
      },
      "styleClasses": [
        {
          "name": "oj-scroller",
          "kind": "class",
          "displayName": "Scroller element",
          "description": "Designates the element to be the scroller element used in place of the target.",
          "help": "#oj-scroller"
        }
      ],
      "styleVariables": [
        {
          "description": "Refresher background color",
          "name": "oj-refresher-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A refresher is a wrapper for attaching pull to refresh functionality to a DOM element.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojRefresher.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "text",
            "threshold"
          ]
        }
      ],
      "properties": {
        "refreshContent": {
          "description": "Specifies the function to invoke when pull-to-refresh operation is triggered. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Refresh Content",
          "value": null,
          "required": true,
          "help": "#refreshContent"
        },
        "target": {
          "description": "The target element used to detect a pull-to-refresh trigger. See the Help documentation for more information.",
          "type": "Element",
          "displayName": "Target",
          "value": null,
          "help": "#target"
        },
        "text": {
          "description": "Specifies a text message to display in the pull-to-refresh panel after a pull down gesture.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "translatable": true,
          "help": "#text"
        },
        "threshold": {
          "description": "The minimum distance in pixels that the user needs to pull down in order to trigger a refresh. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Threshold",
          "value": 0,
          "units": "pixels",
          "help": "#threshold"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaRefreshCompleteLink": {
              "description": "Label assigned to the refresh message to denote refresh complete that appears after triggering refresh content.",
              "type": "string",
              "help": "#translations.ariaRefreshCompleteLink"
            },
            "ariaRefreshLink": {
              "description": "Label assigned to the refresh link used for triggering refresh content when using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "#translations.ariaRefreshLink"
            },
            "ariaRefreshingLink": {
              "description": "Label assigned to the refresh message to denote that the refresh is occurring that appears after triggering refresh content.",
              "type": "string",
              "help": "#translations.ariaRefreshingLink"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-row-expander": {
      "name": "oj-row-expander",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Row Expander",
      "implements": [
        "RowExpanderElement"
      ],
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojrowexpander"
        },
        "oracle": {
          "icon": "oj-ux-ico-row-expander",
          "uxSpecs": [
            "row-expander"
          ]
        }
      },
      "description": "Enable hierarchical data to be displayed in a JET Table.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojRowExpander.html",
      "properties": {
        "context": {
          "description": "The context object obtained from the column renderer (Table) or cell renderer (DataGrid)",
          "type": "object",
          "displayName": "Context",
          "value": null,
          "required": true,
          "help": "#context"
        },
        "expanded": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The source of truth for expansion is the data source key set."
            }
          ],
          "description": "Specifies if the RowExpander is expanded.",
          "type": "boolean|null",
          "displayName": "Expanded",
          "value": null,
          "writeback": true,
          "help": "#expanded"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleLevelDescription": {
              "description": "Provides properties to customize the accessible context level of the expanded or collapsed row.",
              "type": "string",
              "help": "#translations.accessibleLevelDescription"
            },
            "accessibleRowCollapsed": {
              "description": "Provides properties to customize the accessible context when a row is collapsed.",
              "type": "string",
              "help": "#translations.accessibleRowCollapsed"
            },
            "accessibleRowDescription": {
              "description": "Provides properties to customize the accessible context level and index of the row.",
              "type": "string",
              "help": "#translations.accessibleRowDescription"
            },
            "accessibleRowExpanded": {
              "description": "Provides properties to customize the accessible context when a row is expanded.",
              "type": "string",
              "help": "#translations.accessibleRowExpanded"
            },
            "accessibleStateCollapsed": {
              "description": "Provides properties to customize the accessible state of a collapsed row.",
              "type": "string",
              "help": "#translations.accessibleStateCollapsed"
            },
            "accessibleStateExpanded": {
              "description": "Provides properties to customize the accessible state of an expanded row.",
              "type": "string",
              "help": "#translations.accessibleStateExpanded"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Redraw the RowExpander element.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojCollapse": {
          "description": "Triggered when a collapse is performed on the RowExpander",
          "help": "#event:collapse",
          "detail": {
            "rowKey": {
              "description": "the key of the collapsed row",
              "type": "any"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered when a expand is performed on the RowExpander",
          "help": "#event:expand",
          "detail": {
            "rowKey": {
              "description": "the key of the expanded row",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-select-many": {
      "name": "oj-select-many",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Select (Many)",
      "implements": [
        "SelectManyElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-select-all"
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "A select many is a dropdown list that supports multiple selections and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSelectMany.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "options"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "maximumResultCount": {
          "description": "The maximum number of results displayed in the dropdown.",
          "type": "number",
          "displayName": "Maximum Result Count",
          "value": 15,
          "help": "#maximumResultCount"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "minimumResultsForSearch": {
          "description": "The threshold for showing the search box in the dropdown.",
          "type": "number",
          "displayName": "Minimum Results For Search",
          "value": 15,
          "minimum": 0,
          "help": "#minimumResultsForSearch"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the Select.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "#optionsKeys.childKeys",
              "properties": {
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "displayName": "Child Keys"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string",
                  "displayName": "Children"
                },
                "label": {
                  "description": "The key name for the label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "#optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "The css style to append to the picker.",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "translatable": true,
          "help": "#placeholder"
        },
        "readonly": {
          "description": "Specifies whether a value is readonly",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$selectRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render select in JET or as a HTML Select tag.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "#renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Render the select in jet mode.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Render the select in native mode.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "#translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "#translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "Text for the drop down when no options are found.",
              "type": "string",
              "help": "#translations.noMatchesFound"
            },
            "noMoreResults": {
              "description": "Text for the drop down when all options are selected",
              "type": "string",
              "help": "#translations.noMoreResults"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "#translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "searchField": {
              "description": "Tooltip text for the search box",
              "type": "string",
              "help": "#translations.searchField"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        },
        "valueOptions": {
          "description": "The current values of the element and their associated display labels.",
          "type": "null|Array<Object>",
          "displayName": "Value Options",
          "value": null,
          "writeback": true,
          "help": "#valueOptions",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "description": "display label of value above. If missing, String(value) is used.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "a current value of JET Select",
                  "type": "any",
                  "displayName": "Value"
                }
              }
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the select.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-select-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement",
            "OptgroupElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-select-one": {
      "name": "oj-select-one",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Select (One)",
      "implements": [
        "SelectOneElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-select-single"
        }
      },
      "status": [
        {
          "type": "deprecated",
          "since": "8.1.0",
          "description": "Please use <oj-select-single> instead."
        }
      ],
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "FullWidth",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "A select one is a dropdown list that supports single selection and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSelectOne.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "options"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "maximumResultCount": {
          "description": "The maximum number of results displayed in the dropdown.",
          "type": "number",
          "displayName": "Maximum Result Count",
          "value": 15,
          "help": "#maximumResultCount"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "minimumResultsForSearch": {
          "description": "The threshold for showing the search box in the dropdown.",
          "type": "number",
          "displayName": "Minimum Results For Search",
          "value": 15,
          "minimum": 0,
          "help": "#minimumResultsForSearch"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "#optionRenderer"
        },
        "options": {
          "description": "The option items for the Select.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "#options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "#optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "#optionsKeys.childKeys",
              "properties": {
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "displayName": "Child Keys"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string",
                  "displayName": "Children"
                },
                "label": {
                  "description": "The key name for the label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "#optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "#optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "#optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "#pickerAttributes",
          "properties": {
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string",
              "displayName": "Class"
            },
            "style": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Style property of pickerAttribute is deprecated as it violates the recommended Content Security Policy for JET which disallows inline styles. Use class property instead. As of 11.0.0 this property is ignored and an error is logged."
                }
              ],
              "description": "The css style to append to the picker.",
              "type": "string",
              "displayName": "Style"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "translatable": true,
          "help": "#placeholder"
        },
        "readonly": {
          "description": "Specifies whether a value is readonly",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "renderMode": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "The \"native\" mode rendering is deprecated because JET is promoting a consistent Oracle UX over native look and feel in Redwood. Since this property takes only two values the property itself is deprecated. The theme variable \"$selectRenderModeOptionDefault\" is also deprecated for the same reason."
            }
          ],
          "description": "Specifies whether to render select in JET or as a HTML Select tag.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "#renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Render the select in jet mode.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Render the select in native mode.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "#translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "#translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "Text for the drop down when no options are found.",
              "type": "string",
              "help": "#translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "#translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            },
            "searchField": {
              "description": "Tooltip text for the search box",
              "type": "string",
              "help": "#translations.searchField"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "help": "#value"
        },
        "valueOption": {
          "description": "The current value of the element and its associated display label.",
          "type": "null|object",
          "displayName": "Value Option",
          "value": null,
          "writeback": true,
          "help": "#valueOption",
          "properties": {
            "label": {
              "description": "display label of value above. If missing, String(value) is used.",
              "type": "string",
              "displayName": "Label"
            },
            "value": {
              "description": "current value of JET Select",
              "type": "any",
              "displayName": "Value"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the select.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-select-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "OptionElement",
            "OptgroupElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-select-single": {
      "name": "oj-select-single",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Select (Single)",
      "implements": [
        "SelectSingleElement"
      ],
      "type": "core",
      "since": "8.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectsingle",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-select-results"
              ],
              "description": "Apply this class to the collection element (e.g. an <oj-list-view>) in the collectionTemplate."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-select",
          "uxSpecs": [
            "select-single-item"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "oj-form-control-text-align-start",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "oj-form-control-text-align-start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "oj-form-control-text-align-end",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-select-results",
          "kind": "class",
          "displayName": "Collection Element",
          "description": "Apply this class to the collection element (e.g. an <oj-list-view>) in the collectionTemplate.",
          "styleSelector": "oj-select-single oj-table, oj-select-single oj-list-view",
          "help": "#oj-select-results"
        }
      ],
      "description": "A select single is a dropdown list that supports single selection and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSelectSingle.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "required",
            "disabled",
            "virtualKeyboard"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "value"
          ]
        }
      ],
      "properties": {
        "data": {
          "description": "The data for the Select.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "minCapabilities": {
            "filter": {
              "textFilter": true
            }
          },
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text. The supported attribute values are theme dependent.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "itemText": {
          "description": "Specifies the text string to render for a data item.",
          "type": "string|function",
          "displayName": "Item Text",
          "value": "label",
          "help": "#itemText"
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "type": "string",
          "displayName": "Placeholder",
          "value": "",
          "translatable": true,
          "help": "#placeholder"
        },
        "readonly": {
          "description": "Specifies whether a value is readonly",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "cancel": {
              "description": "Label of the cancel button of the mobile dropdown.",
              "type": "string",
              "help": "#translations.cancel"
            },
            "labelAccClearValue": {
              "description": "Label of the clear value icon for screen readers.",
              "type": "string",
              "help": "#translations.labelAccClearValue"
            },
            "labelAccOpenDropdown": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This option has been deprecated because the dropdown arrow should be ignored by screen readers."
                }
              ],
              "description": "Label of the dropdown arrow for screen readers.",
              "type": "string",
              "help": "#translations.labelAccOpenDropdown"
            },
            "multipleMatchesFound": {
              "description": "Screen reader text for the drop down when multiple results are found.",
              "type": "string",
              "help": "#translations.multipleMatchesFound"
            },
            "nOrMoreMatchesFound": {
              "description": "Screen reader text for the drop down when N or more results are found.",
              "type": "string",
              "help": "#translations.nOrMoreMatchesFound"
            },
            "noMatchesFound": {
              "description": "Screen reader text for the drop down when no results are found.",
              "type": "string",
              "help": "#translations.noMatchesFound"
            },
            "noResultsLine1": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "This option has been deprecated since oj-select-single will no longer show the dropdown when there are no results to show."
                }
              ],
              "description": "First line of text in the no data template shown in the default listView.",
              "type": "string",
              "help": "#translations.noResultsLine1"
            },
            "noResultsLine2": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "This option has been deprecated since oj-select-single will no longer show the dropdown when there are no results to show."
                }
              ],
              "description": "Second line of text in the no data template shown in the default listView.",
              "type": "string",
              "help": "#translations.noResultsLine2"
            },
            "oneMatchFound": {
              "description": "Screen reader text for the drop down when one result is found.",
              "type": "string",
              "help": "#translations.oneMatchFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "null|any",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "help": "#value"
        },
        "valueItem": {
          "description": "The current value of the element and its associated data.",
          "type": "null|object",
          "displayName": "Value Item",
          "value": {
            "key": null,
            "data": null,
            "metadata": null
          },
          "writeback": true,
          "help": "#valueItem"
        },
        "virtualKeyboard": {
          "description": "The type of virtual keyboard to display for entering a value on mobile browsers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Virtual Keyboard",
          "value": "search",
          "help": "#virtualKeyboard",
          "enumValues": [
            "email",
            "number",
            "search",
            "tel",
            "text",
            "url"
          ],
          "propertyEditorValues": {
            "email": {
              "description": "Use a virtual keyboard for entering email addresses.",
              "displayName": "Email"
            },
            "number": {
              "description": "Use a virtual keyboard for entering numbers.",
              "displayName": "Number"
            },
            "search": {
              "description": "Use a virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a virtual keyboard for entering telephone numbers.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a virtual keyboard for URL entry.",
              "displayName": "Url"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the Select.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojValueAction": {
          "description": "Event triggered when a value is submitted by the user, even if the value hasn't changed.",
          "help": "#event:valueAction",
          "detail": {
            "value": {
              "description": "The selected value.",
              "type": "any|null"
            },
            "itemContext": {
              "description": "The data provider context for the value.",
              "type": "object"
            },
            "previousValue": {
              "description": "The previous selected value.",
              "type": "any|null"
            }
          }
        }
      },
      "slots": {
        "collectionTemplate": {
          "description": "Slot for a collection element to render the items in the dropdown instead of the default list.",
          "maxItems": 1,
          "help": "#collectionTemplate",
          "preferredContent": [
            "ListViewElement",
            "TableElement"
          ],
          "data": {
            "data": {
              "description": "The data for the collection.",
              "type": "object"
            },
            "searchText": {
              "description": "Search text.",
              "type": "string"
            },
            "selectedItem": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "The selectedItem property is deprecated in favor of currentRow and handleRowAction properties, which provide additional functionalities."
                }
              ],
              "description": "The selected item context.",
              "type": "object"
            },
            "selected": {
              "description": "The selected property is used to push the current selected option to the collection. This is also used to highlight the option when navigating through the dropdown.",
              "type": "object"
            },
            "currentRow": {
              "description": "The currentRow property is used to set the focus to current active row in the oj-table. This is also used to get the key for the current row when navigating through the options in the dropdown. Since, this property is used to listen to the changes made by the oj-table, it should be bound to the current-row attribute of the oj-table",
              "type": "object",
              "properties": {
                "rowKey": {
                  "description": "When using oj-list-view, this sub-property of the currentRow property should be used instead. This should be bound to the current-item attribute of the oj-list-view",
                  "type": "any"
                }
              }
            },
            "handleRowAction": {
              "description": "The handleRowAction property is used to make selection for oj-select-single when ojItemAction is triggered in the oj-list-view (ojRowAction if oj-table is used).",
              "type": "function"
            }
          }
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the dropdown list when an external collectionTemplate is not provided. The slot must be a <template> element.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "data": {
            "componentElement": {
              "description": "The Select custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            },
            "metadata": {
              "description": "The metadata for the current item being rendered",
              "type": "object"
            },
            "searchText": {
              "description": "The search text entered by the user",
              "type": "string"
            },
            "depth": {
              "description": "(TreeDataProvider only) The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "(TreeDataProvider only) True if the current item is a leaf node (available when hierarchical data is provided).",
              "type": "boolean"
            },
            "parentKey": {
              "description": "(TreeDataProvider only) The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-selector": {
      "name": "oj-selector",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "SelectorElement"
      ],
      "subcomponentType": "data",
      "description": "The selector component renders checkboxes in collections to support selection.",
      "displayName": "Selector",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselector"
        },
        "oracle": {
          "icon": "oj-ux-ico-check-square"
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSelector.html",
      "since": "9.0.0",
      "properties": {
        "rowKey": {
          "type": "any",
          "description": "Specifies the row key of each selector. If the selectionMode property is 'all', rowKey is ignored.",
          "displayName": "Row Key",
          "help": "#rowKey",
          "value": null
        },
        "indeterminate": {
          "type": "boolean",
          "description": "Visual only state to indicate partial selection",
          "displayName": "indeterminate",
          "help": "#indeterminate",
          "writeback": true,
          "value": false
        },
        "selectedKeys": {
          "type": "object",
          "description": "Specifies the selectedKeys, should be hooked into the collection component.",
          "displayName": "Selected Keys",
          "help": "#selectedKeys",
          "required": true,
          "writeback": true,
          "value": null
        },
        "selectionMode": {
          "type": "string",
          "description": "Specifies the selection mode.",
          "displayName": "Selection Mode",
          "help": "#selectionMode",
          "propertyEditorValues": {
            "all": {
              "description": "Specifies the select all case (rowKey property is ignored).",
              "displayName": "All"
            },
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          },
          "enumValues": [
            "all",
            "multiple",
            "single"
          ],
          "value": "multiple"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-slider": {
      "name": "oj-slider",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Slider",
      "implements": [
        "SliderElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojslider",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "3",
          "minColumns": "3"
        },
        "oracle": {
          "icon": "oj-ux-ico-slider"
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "styleVariables": [
        {
          "description": "Slider thumb width",
          "name": "oj-slider-thumb-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Slider thumb height",
          "name": "oj-slider-thumb-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Slider thumb border radius",
          "name": "oj-slider-thumb-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Slider thumb border width",
          "name": "oj-slider-thumb-border-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Slider track thickness",
          "name": "oj-slider-track-thickness",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Slider thumb background color when enabled",
          "name": "oj-slider-thumb-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set2"
        },
        {
          "description": "Slider thumb border color when enabled",
          "name": "oj-slider-thumb-border-color",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set2"
        },
        {
          "description": "Slider thumb box shadow when enabled",
          "name": "oj-slider-thumb-box-shadow",
          "help": "#oj-slider-css-set2"
        },
        {
          "description": "Slider track background color when enabled",
          "name": "oj-slider-track-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set2"
        },
        {
          "description": "Slider value background color when enabled",
          "name": "oj-slider-value-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set2"
        },
        {
          "description": "Slider thumb background color when hovered",
          "name": "oj-slider-thumb-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set3"
        },
        {
          "description": "Slider thumb box shadow when hovered",
          "name": "oj-slider-thumb-box-shadow-hover",
          "help": "#oj-slider-css-set3"
        },
        {
          "description": "Slider thumb background color when active",
          "name": "oj-slider-thumb-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set4"
        },
        {
          "description": "Slider thumb border color when active",
          "name": "oj-slider-thumb-border-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set4"
        },
        {
          "description": "Slider thumb box shadow when active",
          "name": "oj-slider-thumb-box-shadow-active",
          "help": "#oj-slider-css-set4"
        },
        {
          "description": "Slider thumb scale when active",
          "name": "oj-slider-thumb-scale-active",
          "formats": [
            "number"
          ],
          "help": "#oj-slider-css-set4"
        },
        {
          "description": "Slider thumb background color when disabled",
          "name": "oj-slider-thumb-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set5"
        },
        {
          "description": "Slider thumb border color when disabled",
          "name": "oj-slider-thumb-border-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set5"
        },
        {
          "description": "Slider track background color when disabled",
          "name": "oj-slider-track-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set5"
        },
        {
          "description": "Slider value background color when disabled",
          "name": "oj-slider-value-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-slider-css-set5"
        }
      ],
      "description": "A slider allows a user to set a value by moving an indicator.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSlider.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "type",
            "orientation",
            "min",
            "max",
            "step",
            "disabled"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum value of the slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "#max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "min": {
          "description": "The minimum value of the slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "#min"
        },
        "orientation": {
          "description": "Specifies the orientation of the slider.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the slider horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the slider vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "step": {
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "help": "#step"
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "#transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "invalidStep": {
              "description": "Invalid step value.",
              "type": "string",
              "help": "#translations.invalidStep"
            },
            "maxMin": {
              "description": "Max is greater than min.",
              "type": "string",
              "help": "#translations.maxMin"
            },
            "noValue": {
              "description": "Missing value exception.",
              "type": "string",
              "help": "#translations.noValue"
            },
            "optionNum": {
              "description": "The option is not a number.",
              "type": "string",
              "help": "#translations.optionNum"
            },
            "valueRange": {
              "description": "Value outside min to max range.",
              "type": "string",
              "help": "#translations.valueRange"
            }
          }
        },
        "type": {
          "description": "The slider type specifies how the slider value is represented.",
          "type": "string",
          "displayName": "Type",
          "value": "fromMin",
          "help": "#type",
          "enumValues": [
            "fromMax",
            "fromMin",
            "single"
          ],
          "propertyEditorValues": {
            "fromMax": {
              "description": "A single-thumb slider where the value bar goes from the slider thumb to the slider max.",
              "displayName": "From Max"
            },
            "fromMin": {
              "description": "A single-thumb slider where the value bar goes from the slider min to the slider thumb.",
              "displayName": "From Min"
            },
            "single": {
              "description": "A single-thumb slider where the value bar has no additional styling.",
              "displayName": "Single"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The numerical value of the slider.",
          "type": "number",
          "displayName": "Value",
          "eventGroup": "common",
          "value": 0,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-spark-chart-item": {
      "name": "oj-spark-chart-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Spark Chart Item",
      "implements": [
        "SparkChartItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "The oj-spark-chart-item element is used to declare properties for spark chart items. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSparkChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The default border color for the data items.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "#borderColor"
        },
        "color": {
          "description": "The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "#color"
        },
        "date": {
          "description": "The date for the data item. The date should only be specified if the interval between data items is irregular.",
          "type": "string",
          "displayName": "Date",
          "value": "",
          "help": "#date"
        },
        "high": {
          "description": "The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
          "type": "number|null",
          "displayName": "High",
          "value": null,
          "help": "#high"
        },
        "low": {
          "description": "The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
          "type": "number|null",
          "displayName": "Low",
          "value": null,
          "help": "#low"
        },
        "markerDisplayed": {
          "description": "Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts",
          "type": "string",
          "displayName": "Marker Displayed",
          "value": "off",
          "help": "#markerDisplayed",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Marker will not be displayed.",
              "displayName": "Off"
            },
            "on": {
              "description": "Marker will be displayed.",
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "help": "#markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
          "type": "number",
          "displayName": "Marker Size",
          "help": "#markerSize"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the data item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "value": {
          "description": "The value of the data item.",
          "type": "number|null",
          "displayName": "Value",
          "value": null,
          "help": "#value"
        }
      }
    },
    "oj-spark-chart": {
      "name": "oj-spark-chart",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Spark Chart",
      "implements": [
        "SparkChartElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart",
          "defaultColumns": "2",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-chart-spark"
        }
      },
      "description": "A spark chart displays information graphically, typically highlighting the trend of a data set in a compact form factor.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSparkChart.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "type",
            "title",
            "barGapRatio",
            "lineStyle",
            "lineType",
            "lineWidth",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "items"
          ]
        }
      ],
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Animation on data change will be enabled.",
              "displayName": "Auto"
            },
            "none": {
              "description": "Animation on data change will be disabled.",
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Animation on display will be enabled.",
              "displayName": "Auto"
            },
            "none": {
              "description": "Animation on display will be disabled.",
              "displayName": "None"
            }
          }
        },
        "areaColor": {
          "description": "The color of the area. Only applies if type is \"area\" or \"lineWithArea\".",
          "type": "string",
          "displayName": "Area Color",
          "value": "",
          "format": "color",
          "help": "#areaColor"
        },
        "areaSvgClassName": {
          "description": "The CSS style class to apply if type is \"area\" or \"lineWithArea\".",
          "type": "string",
          "displayName": "Area SVG Class Name",
          "value": "",
          "help": "#areaSvgClassName"
        },
        "areaSvgStyle": {
          "description": "The inline style to apply if type is \"area\" or \"lineWithArea\".",
          "type": "object",
          "displayName": "Area SVG Style",
          "value": {},
          "help": "#areaSvgStyle"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "barGapRatio": {
          "description": "Specifies the width of the bar gap as a ratio of the item width. The valid value is a number from 0 to 1.",
          "type": "number",
          "displayName": "Bar Gap Ratio",
          "value": 0.25,
          "help": "#barGapRatio"
        },
        "baselineScaling": {
          "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero.",
          "type": "string",
          "displayName": "Baseline Scaling",
          "value": "min",
          "help": "#baselineScaling",
          "enumValues": [
            "min",
            "zero"
          ],
          "propertyEditorValues": {
            "min": {
              "description": "Axis baseline will start at the minimum value of the data.",
              "displayName": "Min"
            },
            "zero": {
              "description": "Axis baseline will start at zero.",
              "displayName": "Zero"
            }
          }
        },
        "color": {
          "description": "The color of the data items.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "data": {
          "description": "Specifies the data for the spark chart. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "firstColor": {
          "description": "The color of the first data item.",
          "type": "string",
          "displayName": "First Color",
          "value": "",
          "format": "color",
          "help": "#firstColor"
        },
        "highColor": {
          "description": "The color of the data item with the greatest value.",
          "type": "string",
          "displayName": "High Color",
          "value": "",
          "format": "color",
          "help": "#highColor"
        },
        "items": {
          "description": "An array of objects that define the data for the spark chart. See the Help documentation for more information.",
          "type": "Array<Object>|Array<number>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The default border color for the data items.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "color": {
                  "description": "The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds.",
                  "type": "string",
                  "displayName": "Color"
                },
                "date": {
                  "description": "The date for the data item. The date should only be specified if the interval between data items is irregular.",
                  "type": "Date",
                  "displayName": "Date"
                },
                "high": {
                  "description": "The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
                  "type": "number",
                  "displayName": "High"
                },
                "low": {
                  "description": "The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
                  "type": "number",
                  "displayName": "Low"
                },
                "markerDisplayed": {
                  "description": "Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts.",
                  "type": "string",
                  "displayName": "Marker Displayed",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "description": "The shape of the data markers. Can take the name of a built-in shape or the SVG path commands for a custom shape. Only applies to line and area spark charts.",
                  "type": "string",
                  "displayName": "Marker Shape",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
                  "type": "number",
                  "displayName": "Marker Size"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "value": {
                  "description": "The value of the data item.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "lastColor": {
          "description": "The color of the last data item.",
          "type": "string",
          "displayName": "Last Color",
          "value": "",
          "format": "color",
          "help": "#lastColor"
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line spark charts.",
          "type": "string",
          "displayName": "Line Style",
          "value": "solid",
          "help": "#lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "description": "Line will have dashed strokes.",
              "displayName": "Dashed"
            },
            "dotted": {
              "description": "Line will have dotted strokes.",
              "displayName": "Dotted"
            },
            "solid": {
              "description": "Line will have a solid stroke.",
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line and area spark charts.",
          "type": "string",
          "displayName": "Line Type",
          "value": "straight",
          "help": "#lineType",
          "enumValues": [
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "centeredSegmented": {
              "description": "Data points will be connected with a centered segmented line.",
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "description": "Data points will be connected with a centered stepped line.",
              "displayName": "Centered Stepped"
            },
            "curved": {
              "description": "Data points will be connected with a curved line.",
              "displayName": "Curved"
            },
            "none": {
              "description": "Data points will not be connected.",
              "displayName": "None"
            },
            "segmented": {
              "description": "Data points will be connected with a segmented line.",
              "displayName": "Segmented"
            },
            "stepped": {
              "description": "Data points will be connected with a stepped line.",
              "displayName": "Stepped"
            },
            "straight": {
              "description": "Data points will be connected with a straight line.",
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line in pixels. Only applies to line spark charts.",
          "type": "number",
          "displayName": "Line Width",
          "value": 1,
          "units": "pixels",
          "help": "#lineWidth"
        },
        "lowColor": {
          "description": "The color of the data item with the lowest value.",
          "type": "string",
          "displayName": "Low Color",
          "value": "",
          "format": "color",
          "help": "#lowColor"
        },
        "markerShape": {
          "description": "The shape of the data markers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "value": "auto",
          "help": "#markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
          "type": "number",
          "displayName": "Marker Size",
          "value": 5,
          "units": "pixels",
          "help": "#markerSize"
        },
        "referenceObjects": {
          "description": "An array of reference objects associated with the y axis of the spark chart.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "#referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "The color of the reference object.",
                  "type": "string",
                  "displayName": "Color"
                },
                "high": {
                  "description": "The high value of a reference area.",
                  "type": "number",
                  "displayName": "High"
                },
                "lineStyle": {
                  "description": "The line style of a reference line.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "description": "The width of a reference line.",
                  "type": "number",
                  "displayName": "Line Width"
                },
                "location": {
                  "description": "The location of the reference object relative to the data items.",
                  "type": "string",
                  "displayName": "Location",
                  "value": "back",
                  "enumValues": [
                    "back",
                    "front"
                  ]
                },
                "low": {
                  "description": "The low value of a reference area.",
                  "type": "number",
                  "displayName": "Low"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "type": {
                  "description": "The type of reference object being shown.",
                  "type": "string",
                  "displayName": "Type",
                  "value": "line",
                  "enumValues": [
                    "area",
                    "line"
                  ]
                },
                "value": {
                  "description": "The value of a reference line.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data items. If type is \"lineWithArea\", this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the data items. If type is \"lineWithArea\", this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the spark chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "type": {
          "description": "The chart type.",
          "type": "string",
          "displayName": "Type",
          "value": "line",
          "help": "#type",
          "enumValues": [
            "area",
            "bar",
            "line",
            "lineWithArea"
          ],
          "propertyEditorValues": {
            "area": {
              "description": "Series will be represented by an area. Use lineWithArea to prevent values from being obscured.",
              "displayName": "Area"
            },
            "bar": {
              "description": "Data items will be represented by bars.",
              "displayName": "Bar"
            },
            "line": {
              "description": "Series will be represented by a line.",
              "displayName": "Line"
            },
            "lineWithArea": {
              "description": "Series will be presented by a line and area.",
              "displayName": "Line With Area"
            }
          }
        },
        "visualEffects": {
          "description": "Defines whether visual effects such as overlays are applied to the spark chart.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "#visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Overlays and gradients could be applied to the spark chart.",
              "displayName": "Auto"
            },
            "none": {
              "description": "No overlays are applied to the spark chart.",
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getDataItem": {
          "description": "Returns information for automation testing verification of a specified data item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getDataItem",
          "params": [
            {
              "name": "itemIndex",
              "description": "The item index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the spark chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "SparkChartItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-spark-chart> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the chart.",
              "type": "string"
            },
            "componentElement": {
              "description": "The spark chart element.",
              "type": "Element"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-status-meter-gauge": {
      "name": "oj-status-meter-gauge",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Status Meter Gauge",
      "implements": [
        "StatusMeterGaugeElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge",
          "defaultColumns": "4",
          "minColumns": "1"
        },
        "oracle": {
          "icon": "oj-ux-ico-linear-status",
          "uxSpecs": [
            "gauge"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Font weight for metric label.",
          "name": "--oj-gauge-metric-label-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-status-meter-gauge-css-set1"
        },
        {
          "description": "Vertical and horizontal status meter gauge small size",
          "name": "oj-statusmeter-gauge-bar-sm-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Vertical and horizontal status meter gauge medium size",
          "name": "oj-statusmeter-gauge-bar-md-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Vertical and horizontal status meter gauge large size",
          "name": "oj-statusmeter-gauge-bar-lg-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Circular status meter gauge small size",
          "name": "oj-statusmeter-gauge-circular-sm-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Circular status meter gauge medium size",
          "name": "oj-statusmeter-gauge-circular-md-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Circular status meter gauge large size",
          "name": "oj-statusmeter-gauge-circular-lg-size",
          "formats": [
            "length"
          ],
          "help": "#oj-statusmeter-gauge-css-set2"
        },
        {
          "description": "Border color for plot area in vertical and horizontal status meter gauges.",
          "name": "--oj-statusmeter-gauge-bar-plotarea-border-color",
          "formats": [
            "color"
          ],
          "help": "#oj-statusmeter-gauge-css-set3"
        },
        {
          "description": "Color for plot area in vertical and horizontal status meter gauges.",
          "name": "--oj-statusmeter-gauge-bar-plotarea-color",
          "formats": [
            "color"
          ],
          "help": "#oj-statusmeter-gauge-css-set3"
        }
      ],
      "description": "A status meter gauge displays information graphically, highlighting a specific metric value's progress in relation to its thresholds.  Horizontal, vertical, and circular formats are supported.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojStatusMeterGauge.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "orientation",
            "metricLabel.rendered",
            "metricLabel.textType",
            "metricLabel.text",
            "thresholdDisplay",
            "animationOnDataChange",
            "animationOnDisplay",
            "plotArea.rendered",
            "color",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value",
            "min",
            "max",
            "step",
            "thresholds",
            "referenceLines"
          ]
        }
      ],
      "properties": {
        "angleExtent": {
          "description": "Specifies the angle extent of a gauge with circular orientation. Value should be provided in degrees.",
          "type": "number",
          "displayName": "Angle Extent",
          "value": 360,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "#angleExtent"
        },
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "minimum": 0,
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "borderColor": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "borderRadius": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "Specifies the border radius of the indicator and plot area. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Border Radius",
          "value": "auto",
          "help": "#borderRadius"
        },
        "center": {
          "description": "An object defining the center content of a status meter with circular orientation.",
          "type": "object",
          "displayName": "Center",
          "help": "#center",
          "properties": {
            "renderer": {
              "description": "A function that returns custom center content. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#center.renderer"
            }
          }
        },
        "color": {
          "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "#color"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string|null",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "indicatorSize": {
          "description": "Defines the ratio of relative thickness of the indicator to the plot area.",
          "type": "number",
          "displayName": "Indicator Size",
          "value": 1,
          "minimum": 0,
          "help": "#indicatorSize"
        },
        "innerRadius": {
          "description": "Specifies the inner radius of a gauge with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1.",
          "type": "number",
          "displayName": "Inner Radius",
          "value": 0.7,
          "maximum": 1,
          "minimum": 0,
          "help": "#innerRadius"
        },
        "label": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This attribute is deprecated. Use metric-label instead."
            }
          ],
          "description": "An object defining the label.",
          "type": "object",
          "displayName": "Label",
          "help": "#label",
          "properties": {
            "position": {
              "description": "Specifies the label position for horizontal and vertical gauges. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "#label.position",
              "enumValues": [
                "auto",
                "center",
                "start"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "center": {
                  "displayName": "Center"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "style": {
              "description": "The CSS style object to apply to the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "#label.style"
            },
            "text": {
              "description": "The text for the label.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "#label.text"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "#labelledBy"
        },
        "max": {
          "description": "The maximum value of the gauge.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "#max"
        },
        "metricLabel": {
          "description": "An object defining the value label.",
          "type": "object",
          "displayName": "Metric Label",
          "help": "#metricLabel",
          "properties": {
            "converter": {
              "description": "The converter used to format the labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "#metricLabel.converter"
            },
            "position": {
              "description": "Specifies the metric label position for horizontal and vertical gauges. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "#metricLabel.position",
              "enumValues": [
                "auto",
                "center",
                "insideIndicatorEdge",
                "outsideIndicatorEdge",
                "outsidePlotArea",
                "withLabel"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "center": {
                  "displayName": "Center"
                },
                "insideIndicatorEdge": {
                  "displayName": "Inside Indicator Edge"
                },
                "outsideIndicatorEdge": {
                  "displayName": "Outside Indicator Edge"
                },
                "outsidePlotArea": {
                  "displayName": "Outside Plot Area"
                },
                "withLabel": {
                  "displayName": "With Label"
                }
              }
            },
            "rendered": {
              "description": "Defines if the label is rendered. If set to auto, the label is rendered if the orientation is circular.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "help": "#metricLabel.rendered",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "help": "#metricLabel.scaling",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object to apply to the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "#metricLabel.style"
            },
            "text": {
              "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "#metricLabel.text"
            },
            "textType": {
              "description": "Defines whether the label is a number or a percentage of the total value.",
              "type": "string",
              "displayName": "Text Type",
              "value": "number",
              "help": "#metricLabel.textType",
              "enumValues": [
                "number",
                "percent"
              ],
              "propertyEditorValues": {
                "number": {
                  "displayName": "Number"
                },
                "percent": {
                  "displayName": "Percent"
                }
              }
            }
          }
        },
        "min": {
          "description": "The minimum value of the gauge.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "#min"
        },
        "orientation": {
          "description": "Defines the type of status meter to be rendered.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "circular",
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "circular": {
              "displayName": "Circular"
            },
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "plotArea": {
          "description": "Plot Area for Status Meter Gauge",
          "type": "object",
          "displayName": "Plot Area",
          "help": "#plotArea",
          "properties": {
            "borderColor": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The border color of the plot area.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "#plotArea.borderColor"
            },
            "borderRadius": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "Specifies the border radius of the plot area shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "value": "auto",
              "help": "#plotArea.borderRadius"
            },
            "color": {
              "description": "The color of the plot area.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "#plotArea.color"
            },
            "rendered": {
              "description": "Specifies whether to render the plot area. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "help": "#plotArea.rendered",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "svgClassName": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The CSS style class to apply to the plot area. See the Help documentation for more information.",
              "type": "string",
              "displayName": "SVG Class Name",
              "value": "",
              "help": "#plotArea.svgClassName"
            },
            "svgStyle": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is not recommended in the Redwood design system."
                }
              ],
              "description": "The inline style to apply to the plot area. See the Help documentation for more information.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#plotArea.svgStyle"
            }
          }
        },
        "readonly": {
          "description": "Defines whether the value of the gauge can be changed by the end user.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "referenceLines": {
          "description": "An array of objects specifying the reference lines for the gauge.",
          "type": "Array<Object>",
          "displayName": "Reference Lines",
          "value": [],
          "help": "#referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "The color of the reference line.",
                  "type": "string",
                  "displayName": "Color"
                },
                "lineStyle": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is not recommended in the Redwood design system"
                    }
                  ],
                  "description": "The line style of the reference line.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineWidth": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.1.0",
                      "description": "This is not recommended in the Redwood design system"
                    }
                  ],
                  "description": "The width of the reference line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": 2
                },
                "value": {
                  "description": "The value of the reference line.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "size": {
          "description": "Specifies the gauge size.",
          "type": "string",
          "displayName": "Size",
          "value": "fit",
          "help": "#size",
          "enumValues": [
            "fit",
            "lg",
            "md",
            "sm"
          ],
          "propertyEditorValues": {
            "fit": {
              "description": "The size of the gauge will be determined based on the application styling. If no explicit component size is specified, a default size will be used.",
              "displayName": "Fit"
            },
            "lg": {
              "description": "Large size, as determined by the theme, will be used for the size of the gauge.",
              "displayName": "Lg"
            },
            "md": {
              "description": "Medium size, as determined by the theme, will be used for the size of the gauge.",
              "displayName": "Md"
            },
            "sm": {
              "description": "Small size, as determined by the theme, will be used for the size of the gauge.",
              "displayName": "Sm"
            }
          }
        },
        "startAngle": {
          "description": "Specifies the start angle of a gauge with circular orientation. Value should be provided in degrees.",
          "type": "number",
          "displayName": "Start Angle",
          "value": 90,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "#startAngle"
        },
        "step": {
          "description": "Specifies the increment by which values can be changed by the end user. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Step",
          "exclusiveMinimum": "0",
          "help": "#step"
        },
        "svgClassName": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The CSS style class to apply to the gauge indicator. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "status": [
            {
              "type": "deprecated",
              "since": "14.0.0",
              "description": "This is not recommended in the Redwood design system."
            }
          ],
          "description": "The inline style to apply to the gauge indicator. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "thresholdDisplay": {
          "description": "Controls whether the current threshold is displayed on the indicator, in the plotArea, or if all the thresholds are displayed in the plot area.",
          "type": "string",
          "displayName": "Threshold Display",
          "value": "onIndicator",
          "help": "#thresholdDisplay",
          "enumValues": [
            "all",
            "currentOnly",
            "onIndicator"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "currentOnly": {
              "displayName": "Current Only"
            },
            "onIndicator": {
              "displayName": "On Indicator"
            }
          }
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "#thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is not recommended in the Redwood design system"
                    }
                  ],
                  "description": "The border color of the threshold.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string",
                  "displayName": "Color"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number",
                  "displayName": "Max"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "displayName": "Short Desc"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "#transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the oj-status-meter-gauge."
                }
              ],
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "This is deprecated because it is not used by the status meter gauge."
                }
              ],
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "value": {
          "description": "The metric value.",
          "type": "number|null",
          "displayName": "Value",
          "eventGroup": "common",
          "writeback": true,
          "help": "#value"
        },
        "visualEffects": {
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "Overlays and gradients are not supported in Redwood theme and are not recommended. As such, this attribute is deprecated."
            }
          ],
          "description": "Defines whether the theme specific visual effects such as overlays and gradients are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "#visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getMetricLabel": {
          "description": "Returns the gauge's formatted metric label.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getMetricLabel",
          "return": "string"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "centerTemplate": {
          "description": "The centerTemplate slot is used to specify custom center content for a circular status meter gauge. This slot takes precedence over the center.renderer property if specified. See the Help documentation for more information.",
          "help": "#centerTemplate",
          "data": {
            "componentElement": {
              "description": "The status meter gauge HTML element.",
              "type": "Element"
            },
            "innerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle inscribed in the center area. The inner bounds are useful for inserting content that is guaranteed to fit within the center area. If the angleExtent isn't 360 then we will provide the clipped square.",
              "type": "oj.ojStatusMeterGauge.Bounds",
              "properties": {
                "x": {
                  "description": "The x position of the bounding rectangle.",
                  "type": "number"
                },
                "y": {
                  "description": "The y position of the bounding rectangle.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the bounding rectangle.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the bounding rectangle.",
                  "type": "number"
                }
              }
            },
            "metricLabel": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "outerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle circumscribing the center area. The outer bounds are useful for creating background for the entire center area when used with a CSS border-radius. If the angleExtent isn't 360 then we will provide the clipped square.",
              "type": "oj.ojStatusMeterGauge.Bounds",
              "properties": {
                "x": {
                  "description": "The x position of the bounding rectangle.",
                  "type": "number"
                },
                "y": {
                  "description": "The y position of the bounding rectangle.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the bounding rectangle.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the bounding rectangle.",
                  "type": "number"
                }
              }
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The status meter gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-stream-list": {
      "name": "oj-stream-list",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "StreamListElement"
      ],
      "description": "A stream list displays data in an activity stream feed.",
      "displayName": "Stream List",
      "extension": {
        "oracle": {
          "icon": "oj-ux-ico-tables-basic",
          "uxSpecs": [
            "activity-stream"
          ]
        },
        "vbdt": {
          "module": "ojs/ojstreamlist"
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojStreamList.html",
      "since": "9.0.0",
      "properties": {
        "data": {
          "type": "object",
          "description": "Specifies the data for the component. See the Help documentation for more information.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "11.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "expanded": {
          "type": "object",
          "description": "Specifies the key set containing the keys of the items that should be expanded.",
          "displayName": "Expanded",
          "help": "#expanded",
          "writeback": true
        },
        "scrollPolicy": {
          "type": "string",
          "description": "Specifies how data are fetched as user scrolls towards the bottom of the list.",
          "displayName": "Scroll Policy",
          "help": "#scrollPolicy",
          "propertyEditorValues": {
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data is fetched when the user scrolls towards the bottom of the list.",
              "displayName": "Load More On Scroll"
            }
          },
          "enumValues": [
            "loadAll",
            "loadMoreOnScroll"
          ],
          "value": "loadMoreOnScroll"
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number",
              "description": "The number of items to fetch in each block.",
              "displayName": "Fetch Size",
              "help": "#scrollPolicyOptions.fetchSize",
              "value": 25
            },
            "maxCount": {
              "type": "number",
              "description": "The maximum total number of items to fetch.",
              "displayName": "Max Count",
              "help": "#scrollPolicyOptions.maxCount",
              "value": 500
            },
            "scroller": {
              "type": "string|Element",
              "description": "The element or a CSS selector string to an element used to determine the scroll position as well as the maximum scroll position. See the Help documentation for more information.",
              "displayName": "Scroller",
              "help": "#scrollPolicyOptions.scroller",
              "value": null
            }
          }
        },
        "scrollPosition": {
          "type": "object",
          "description": "Specifies the current scroll position of the StreamList. See the Help documentation for more information.",
          "displayName": "Scroll Position",
          "help": "#scrollPosition",
          "properties": {
            "y": {
              "type": "number",
              "description": "The vertical position in pixels.",
              "value": 0
            },
            "key": {
              "type": "any",
              "description": "The key of the item. If DataProvider is used for data and the key does not exist in the DataProvider or if the item has not been fetched yet, then the value is ignored."
            },
            "offsetY": {
              "type": "number",
              "description": "The vertical offset in pixels relative to the item identified by key."
            },
            "parentKey": {
              "type": "any",
              "description": "The key of the parent if tree data."
            }
          },
          "writeback": true
        }
      },
      "slots": {
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "help": "#groupTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any",
              "description": "The data for the current item being rendered"
            },
            "key": {
              "type": "any",
              "description": "The key of the current item being rendered"
            },
            "leaf": {
              "type": "boolean",
              "description": "If the current item has children, null if not a TreeDataProvider"
            },
            "parentKey": {
              "type": "any",
              "description": "The key of the parent current item being rendered, null if not a TreeDataProvider"
            },
            "depth": {
              "type": "number",
              "description": "The zero-based depth of the current item, null if not a TreeDataProvider"
            }
          }
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any",
              "description": "The data for the current item being rendered"
            },
            "key": {
              "type": "any",
              "description": "The key of the current item being rendered"
            },
            "leaf": {
              "type": "boolean",
              "description": "If the current item has children, null if not a TreeDataProvider"
            },
            "parentKey": {
              "type": "any",
              "description": "The key of the parent current item being rendered, null if not a TreeDataProvider"
            },
            "depth": {
              "type": "number",
              "description": "The zero-based depth of the current item, null if not a TreeDataProvider"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-sunburst-node": {
      "name": "oj-sunburst-node",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Sunburst Node",
      "implements": [
        "SunburstNodeElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojsunburst"
        }
      },
      "description": "The oj-sunburst-node element is used to declare properties for sunburst nodes. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSunburstNode.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the node.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "borderWidth": {
          "description": "The border width of the node.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "#borderWidth"
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. See the Help documentation for more information.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The fill color of the node.",
          "type": "string",
          "displayName": "Color",
          "value": "#000000",
          "format": "color",
          "help": "#color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled for the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "label": {
          "description": "The label for this node.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelDisplay": {
          "description": "The label display behavior for the nodes. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Display",
          "help": "#labelDisplay",
          "enumValues": [
            "auto",
            "horizontal",
            "off",
            "rotated"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "horizontal": {
              "displayName": "Horizontal"
            },
            "off": {
              "displayName": "Off"
            },
            "rotated": {
              "displayName": "Rotated"
            }
          }
        },
        "labelHalign": {
          "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
          "type": "string",
          "displayName": "Label Halign",
          "help": "#labelHalign",
          "enumValues": [
            "center",
            "inner",
            "outer"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "inner": {
              "displayName": "Inner"
            },
            "outer": {
              "displayName": "Outer"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration. The default value comes from the CSS and varies based on theme.",
          "type": "object",
          "displayName": "Label Style",
          "help": "#labelStyle"
        },
        "pattern": {
          "description": "The pattern used to fill the node.",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "#pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "none": {
              "displayName": "None"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "radius": {
          "description": "The radius of the node relative to the other nodes.",
          "type": "number",
          "displayName": "Radius",
          "help": "#radius"
        },
        "selectable": {
          "description": "Specifies whether the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "showDisclosure": {
          "description": "Specifies whether to display the expand/collapse button on hover.",
          "type": "string",
          "displayName": "Show Disclosure",
          "value": "inherit",
          "help": "#showDisclosure",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the node. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "value": {
          "description": "The value of the node, which determines the relative size of the node.",
          "type": "number",
          "displayName": "Value",
          "help": "#value"
        }
      }
    },
    "oj-sunburst": {
      "name": "oj-sunburst",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Sunburst",
      "implements": [
        "SunburstElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojsunburst",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-sunburst",
          "uxSpecs": [
            "data-visualization-sunburst"
          ]
        }
      },
      "description": "A sunburst is an interactive data visualization in which hierarchical data is represented in concentric rings.\nEach ring segment is proportionally sized relative to the other segments at a given level.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSunburst.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "colorLabel",
            "sizeLabel",
            "nodeDefaults.labelDisplay",
            "nodeDefaults.labelHalign",
            "animationOnDataChange",
            "animationOnDisplay",
            "startAngle",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationDuration": {
          "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, the value specifies the duration of each stage.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationUpdateColor": {
          "description": "Specifies the color displayed during a data change animation when a node is updated.",
          "type": "string",
          "displayName": "Animation Update Color",
          "value": "",
          "format": "color",
          "help": "#animationUpdateColor"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "colorLabel": {
          "description": "Specifies the label displayed in the legend describing the color metric of the sunburst.",
          "type": "string",
          "displayName": "Color Label",
          "value": "",
          "translatable": true,
          "help": "#colorLabel"
        },
        "data": {
          "description": "Specifies the DataProvider for the sunburst. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "displayLevels": {
          "description": "The number of levels of nodes to display. By default all nodes are displayed.",
          "type": "number",
          "displayName": "Display Levels",
          "value": 1.7976931348623157e+308,
          "help": "#displayLevels"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire ojBeforeDrill and ojDrill events on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "#drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the ids of sunburst nodes that should be expanded on initial render. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightMode": {
          "description": "Specifies whether the highlight-mode should be by category or descendants.",
          "type": "string",
          "displayName": "Highlight Mode",
          "value": "categories",
          "help": "#highlightMode",
          "enumValues": [
            "categories",
            "descendants"
          ],
          "propertyEditorValues": {
            "categories": {
              "displayName": "Categories"
            },
            "descendants": {
              "displayName": "Descendants"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over the nodes.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting nodes.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "#hoverBehaviorDelay"
        },
        "nodeDefaults": {
          "description": "An object defining default properties for the nodes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Node Defaults",
          "help": "#nodeDefaults",
          "properties": {
            "borderColor": {
              "description": "The default border color of the nodes.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "#nodeDefaults.borderColor"
            },
            "borderWidth": {
              "description": "The default border width of the nodes.",
              "type": "number",
              "displayName": "Border Width",
              "value": 1,
              "units": "pixels",
              "help": "#nodeDefaults.borderWidth"
            },
            "hoverColor": {
              "description": "The color of the node hover feedback.",
              "type": "string",
              "displayName": "Hover Color",
              "format": "color",
              "help": "#nodeDefaults.hoverColor"
            },
            "labelDisplay": {
              "description": "The label display behavior for the nodes. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Label Display",
              "value": "auto",
              "help": "#nodeDefaults.labelDisplay",
              "enumValues": [
                "auto",
                "horizontal",
                "off",
                "rotated"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "horizontal": {
                  "displayName": "Horizontal"
                },
                "off": {
                  "displayName": "Off"
                },
                "rotated": {
                  "displayName": "Rotated"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
              "type": "string",
              "displayName": "Label Halign",
              "value": "center",
              "help": "#nodeDefaults.labelHalign",
              "enumValues": [
                "center",
                "inner",
                "outer"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "inner": {
                  "displayName": "Inner"
                },
                "outer": {
                  "displayName": "Outer"
                }
              }
            },
            "labelMinLength": {
              "description": "The minimum number of visible characters needed to render a truncated label. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Label Min Length",
              "value": 1,
              "help": "#nodeDefaults.labelMinLength"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Label Style",
              "help": "#nodeDefaults.labelStyle"
            },
            "selectedInnerColor": {
              "description": "The inner color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Inner Color",
              "format": "color",
              "help": "#nodeDefaults.selectedInnerColor"
            },
            "selectedOuterColor": {
              "description": "The outer color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Outer Color",
              "format": "color",
              "help": "#nodeDefaults.selectedOuterColor"
            },
            "showDisclosure": {
              "description": "Specifies whether to display the expand/collapse button on hover.",
              "type": "string",
              "displayName": "Show Disclosure",
              "value": "off",
              "help": "#nodeDefaults.showDisclosure",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "nodes": {
          "description": "An array of objects defining the data for the nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "#nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the node.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "borderWidth": {
                  "description": "The border width of the node.",
                  "type": "number",
                  "displayName": "Border Width"
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The fill color of the node.",
                  "type": "string",
                  "displayName": "Color"
                },
                "drilling": {
                  "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "description": "The id of the node. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The label for this node.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelDisplay": {
                  "description": "The label display behavior for the nodes. More labels are generally displayed when using rotation, with the trade off of readability. When auto is used, rotated or horizontal labels will be used based on the client browser and platform.",
                  "type": "string",
                  "displayName": "Label Display",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "horizontal",
                    "off",
                    "rotated"
                  ]
                },
                "labelHalign": {
                  "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
                  "type": "string",
                  "displayName": "Label Halign",
                  "value": "center",
                  "enumValues": [
                    "center",
                    "inner",
                    "outer"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration. The default value comes from the CSS and varies based on theme. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "nodes": {
                  "description": "An array of objects with properties for the child nodes.",
                  "type": "Array<Object>",
                  "displayName": "Nodes"
                },
                "pattern": {
                  "description": "The pattern used to fill the node.",
                  "type": "string",
                  "displayName": "Pattern",
                  "value": "none",
                  "enumValues": [
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "none",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "radius": {
                  "description": "The radius of the node relative to the other nodes.",
                  "type": "number",
                  "displayName": "Radius"
                },
                "selectable": {
                  "description": "Specifies whether or not the node will be selectable.",
                  "type": "string",
                  "displayName": "Selectable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "showDisclosure": {
                  "description": "Specifies whether to display the expand/collapse button on hover for a specific node. If the button is clicked, the expanded attribute is updated with the new array of node ids.",
                  "type": "string",
                  "displayName": "Show Disclosure",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "value": {
                  "description": "The value of the node, which determines the relative size of the node.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "rootNode": {
          "description": "The id of the root node. When specified, only the root node and children of the root will be displayed.",
          "type": "any",
          "displayName": "Root Node",
          "value": "",
          "help": "#rootNode"
        },
        "rootNodeContent": {
          "description": "An object defining custom root node content for the sunburst.",
          "type": "object",
          "displayName": "Root Node Content",
          "help": "#rootNodeContent",
          "properties": {
            "renderer": {
              "description": "A function that returns custom root node content. The function takes a context argument, provided by the sunburst. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#rootNodeContent.renderer"
            }
          }
        },
        "rotation": {
          "description": "Specifies whether client side rotation is enabled.",
          "type": "string",
          "displayName": "Rotation",
          "value": "on",
          "help": "#rotation",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "selection": {
          "description": "An array containing the ids of the initially selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection behavior on the sunburst. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "sizeLabel": {
          "description": "Specifies the label used in the legend describing the size metric of the sunburst.",
          "type": "string",
          "displayName": "Size Label",
          "value": "",
          "translatable": true,
          "help": "#sizeLabel"
        },
        "sorting": {
          "description": "Specifies whether the nodes are sorted by size. Nodes with the same parent are sorted in order of descending size.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "#sorting",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "startAngle": {
          "description": "Specifies the starting angle of the sunburst. Valid values are numbers between 0 and 360.",
          "type": "number",
          "displayName": "Start Angle",
          "value": 90,
          "writeback": true,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "#startAngle"
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the sunburst. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelColor": {
              "description": "Used for the color label.",
              "type": "string",
              "help": "#translations.labelColor"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelSize": {
              "description": "Used for the size label.",
              "type": "string",
              "help": "#translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "tooltipCollapse": {
              "description": "Used for the collapse tooltip.",
              "type": "string",
              "help": "#translations.tooltipCollapse"
            },
            "tooltipExpand": {
              "description": "Used for the expand tooltip.",
              "type": "string",
              "help": "#translations.tooltipExpand"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getNode": {
          "description": "Returns information for automation testing verification of a specified node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getNode",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired node",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeCollapse": {
          "description": "Triggered immediately before any container node in the sunburst is collapsed.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-before-collapse event has been deprecated. Lazy loading of data can be done through the data provider."
            }
          ],
          "help": "#event:beforeCollapse",
          "detail": {
            "id": {
              "description": "the id of the node to collapse",
              "type": "any"
            },
            "data": {
              "description": "the data object of the node to collapse",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node to collapse. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojBeforeDrill": {
          "description": "Triggered immediately before any node in the sunburst is drilled into.",
          "help": "#event:beforeDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered immediately before any node in the sunburst is expanded.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-before-expand event has been deprecated. Lazy loading of data can be done through the data provider."
            }
          ],
          "help": "#event:beforeExpand",
          "detail": {
            "id": {
              "description": "the id of the node to expand",
              "type": "any"
            },
            "data": {
              "description": "the data object of the node to expand",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node to expand. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered when a node has been collapsed.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-collapse event has been deprecated. Use on-expanded-changed instead."
            }
          ],
          "help": "#event:collapse",
          "detail": {
            "id": {
              "description": "the id of the collapsed node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the collapsed node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the collapsed node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "description": "the id of the drilled node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered when a node has been expanded.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "The oj-expand event has been deprecated. Use on-expanded-changed instead."
            }
          ],
          "help": "#event:expand",
          "detail": {
            "id": {
              "description": "the id of the expanded node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the expanded node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the expanded node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojRotateInput": {
          "description": "Triggered during user rotation of the sunburst.",
          "help": "#event:rotateInput",
          "detail": {
            "value": {
              "description": "the start angle of the sunburst, in degrees",
              "type": "number"
            }
          }
        }
      },
      "slots": {
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating nodes of the sunburst. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeTemplate",
          "preferredContent": [
            "SunburstNodeElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-sunburst> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "rootNodeContentTemplate": {
          "description": "The rootNodeContentTemplate slot is used to specify custom root node content for a sunburst. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#rootNodeContentTemplate",
          "data": {
            "outerBounds": {
              "description": "Object containing information on the rectangle circumscribing the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle circumscribing the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle circumscribing the root node area.",
                  "type": "number"
                }
              }
            },
            "innerBounds": {
              "description": "Object containing information on the rectangle inscribed in the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle inscribed in the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle inscribed in the root node area.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The id of the root node.",
              "type": "any"
            },
            "data": {
              "description": "The data object of the root node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the root node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "value": {
              "description": "The value of the hovered node.",
              "type": "number"
            },
            "radius": {
              "description": "The radius of the hovered node.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "data": {
              "description": "The data object of the hovered node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the hovered node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-swipe-actions": {
      "name": "oj-swipe-actions",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Swipe Actions",
      "implements": [
        "SwipeActionsElement"
      ],
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswipeactions",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-swipeactions-neutral",
                "oj-swipeactions-attention",
                "oj-swipeactions-danger",
                "oj-swipeactions-default"
              ],
              "description": "Designed to tag swipe action items within an oj-list-view."
            },
            {
              "styleGroup": [
                "oj-swipeactions-container"
              ],
              "description": "Designed for use with item in oj-list-view that contains the oj-swipe-actions element, specifically this will remove the padding around the content of the item so that the swipe actions can take the full height."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "12"
        },
        "oracle": {
          "icon": "oj-ux-ico-swipe-to-reveal",
          "uxSpecs": [
            "swipe-actions"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-swipeactions-[swipe-option]",
          "kind": "template",
          "displayName": "Swipe Action Items",
          "description": "Designed to tag swipe action items within an oj-list-view.",
          "styleSelector": "oj-swipe-actions oj-option",
          "help": "#oj-swipeactions-[swipe-option]",
          "tokens": [
            {
              "name": "[swipe-option]",
              "description": "Options for ojSwipeActions",
              "styleRelation": "exclusive",
              "values": [
                {
                  "name": "neutral",
                  "displayName": "Show more available actions",
                  "description": "Designed for use with an action item that shows more available actions that users can perform."
                },
                {
                  "name": "attention",
                  "displayName": "Tag the associated item",
                  "description": "Designed for use with an action item that tags the associated item in oj-list-view"
                },
                {
                  "name": "danger",
                  "displayName": "Perform an explicit action",
                  "description": "Designed for use with an action item that performs an explicit action like deleting the associated item in oj-list-view."
                },
                {
                  "name": "default",
                  "displayName": "Default action",
                  "description": "Designed for use with an action item that should get all the space when user swipes pass the threshold distance. This is usually the last item within the template"
                }
              ]
            }
          ]
        },
        {
          "name": "oj-swipeactions-container",
          "kind": "class",
          "displayName": "No Padding",
          "description": "Designed for use with item in oj-list-view that contains the oj-swipe-actions element, specifically this will remove the padding around the content of the item so that the swipe actions can take the full height.",
          "styleSelector": "oj-list-view li",
          "help": "#oj-swipeactions-container"
        }
      ],
      "description": "A swipe actions component adds swipe-to-reveal functionality to elements such as items in ListView.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSwipeActions.html",
      "properties": {
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "ariaHideActionsDescription": {
              "description": "Label assigned to an anchor tag used for hidding start/end swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "#translations.ariaHideActionsDescription"
            },
            "ariaShowEndActionsDescription": {
              "description": "Label assigned to an anchor tag used for showing end swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "#translations.ariaShowEndActionsDescription"
            },
            "ariaShowStartActionsDescription": {
              "description": "Label assigned to an anchor tag used for showing start swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "#translations.ariaShowStartActionsDescription"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Re-initialize the swipe actions.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when an action item is selected or when the default action is triggered.",
          "help": "#event:action"
        }
      },
      "slots": {
        "": {
          "description": "When using SwipeActions within ListView, any content for the item in ListView should be added as child element in SwipeActions.",
          "displayName": "default",
          "help": "#Default"
        },
        "start": {
          "description": "The start slot is used to specify the action bar options that appear when user swipes from start to end on its container. See the Help documentation for more information.",
          "help": "#start",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "end": {
          "description": "The end slot is used to specify the action bar options that appear when user swipes from end to start on its container. See the Help documentation for more information.",
          "help": "#end",
          "preferredContent": [
            "OptionElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-switch": {
      "name": "oj-switch",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Switch",
      "implements": [
        "SwitchElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswitch",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-switch"
              ],
              "description": "Top level switch class."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-switch-on",
          "uxSpecs": [
            "switch"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-switch",
          "kind": "class",
          "displayName": "Switch",
          "description": "Top level switch class.",
          "help": "#oj-switch"
        }
      ],
      "styleVariables": [
        {
          "description": "Switch track height",
          "name": "oj-switch-track-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch track width",
          "name": "oj-switch-track-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch track border radius",
          "name": "oj-switch-track-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch thumb to track horizontal margin",
          "name": "oj-switch-thumb-to-track-horizontal-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch thumb height",
          "name": "oj-switch-thumb-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch thumb width",
          "name": "oj-switch-thumb-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch thumb border radius",
          "name": "oj-switch-thumb-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Switch track background color when enabled",
          "name": "oj-switch-track-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set2"
        },
        {
          "description": "Switch track border color when enabled",
          "name": "oj-switch-track-border-color",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set2"
        },
        {
          "description": "Switch thumb background color when enabled",
          "name": "oj-switch-thumb-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set2"
        },
        {
          "description": "Switch thumb border color when enabled",
          "name": "oj-switch-thumb-border-color",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set2"
        },
        {
          "description": "Switch thumb box shadow when enabled",
          "name": "oj-switch-thumb-box-shadow",
          "help": "#oj-switch-css-set2"
        },
        {
          "description": "Switch track background color when hovered",
          "name": "oj-switch-track-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch track border color when hovered",
          "name": "oj-switch-track-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch track border color when hovered",
          "name": "oj-switch-track-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch thumb background color when hovered",
          "name": "oj-switch-thumb-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch thumb border color when hovered",
          "name": "oj-switch-thumb-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch thumb box shadow when hovered",
          "name": "oj-switch-thumb-box-shadow-hover",
          "help": "#oj-switch-css-set3"
        },
        {
          "description": "Switch track background color when selected and hovered",
          "name": "oj-switch-track-bg-color-selected-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set4"
        },
        {
          "description": "Switch track border color when selected and hovered",
          "name": "oj-switch-track-border-color-selected-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set4"
        },
        {
          "description": "Switch thumb background color when selected and hovered",
          "name": "oj-switch-thumb-bg-color-selected-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set4"
        },
        {
          "description": "Switch thumb border color when selected and hovered",
          "name": "oj-switch-thumb-border-color-selected-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set4"
        },
        {
          "description": "Switch thumb box shadow when selected and hovered",
          "name": "oj-switch-thumb-box-shadow-selected-hover",
          "help": "#oj-switch-css-set4"
        },
        {
          "description": "Switch track background color when active",
          "name": "oj-switch-track-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch track border color when active",
          "name": "oj-switch-track-border-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch thumb background color when active",
          "name": "oj-switch-thumb-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch thumb border color when active",
          "name": "oj-switch-thumb-border-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch thumb box shadow when active",
          "name": "oj-switch-thumb-box-shadow-active",
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch thumb width when active",
          "name": "oj-switch-thumb-width-active",
          "formats": [
            "length"
          ],
          "help": "#oj-switch-css-set5"
        },
        {
          "description": "Switch track background color when selected and active",
          "name": "oj-switch-track-bg-color-selected-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set6"
        },
        {
          "description": "Switch track border color when selected and active ",
          "name": "oj-switch-track-border-color-selected-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set6"
        },
        {
          "description": "Switch thumb background color when selected and active",
          "name": "oj-switch-thumb-bg-color-selected-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set6"
        },
        {
          "description": "Switch thumb border color when selected and active",
          "name": "oj-switch-thumb-border-color-selected-active",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set6"
        },
        {
          "description": "Switch thumb box shadow when selected and active",
          "name": "oj-switch-thumb-box-shadow-selected-active",
          "help": "#oj-switch-css-set6"
        },
        {
          "description": "Switch track background color when disabled",
          "name": "oj-switch-track-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set7"
        },
        {
          "description": "Switch track border color when disabled",
          "name": "oj-switch-track-border-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set7"
        },
        {
          "description": "Switch thumb background color when disabled",
          "name": "oj-switch-thumb-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set7"
        },
        {
          "description": "Switch thumb border color when disabled",
          "name": "oj-switch-thumb-border-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set7"
        },
        {
          "description": "Switch track background color when selected and disabled",
          "name": "oj-switch-track-bg-color-selected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set8"
        },
        {
          "description": "Switch track border color when selected and disabled",
          "name": "oj-switch-track-border-color-selected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set8"
        },
        {
          "description": "Switch thumb background color when selected and disabled",
          "name": "oj-switch-thumb-bg-color-selected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set8"
        },
        {
          "description": "Switch thumb border color when selected and disabled",
          "name": "oj-switch-thumb-border-color-selected-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-switch-css-set8"
        }
      ],
      "description": "A switch toggles between two mutually exclusive states — on and off.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSwitch.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "disabled",
            "readonly"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "switchOff": {
              "description": "Text to be displayed when the oj-switch is in readonly mode and value is false.",
              "type": "string",
              "help": "#translations.switchOff"
            },
            "switchOn": {
              "description": "Text to be displayed when the oj-switch is in readonly mode and value is true.",
              "type": "string",
              "help": "#translations.switchOn"
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The boolean state of the switch component.",
          "type": "boolean",
          "displayName": "Value",
          "eventGroup": "common",
          "value": false,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-switcher": {
      "name": "oj-switcher",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Switcher",
      "implements": [
        "SwitcherElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswitcher",
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-switcher"
        }
      },
      "description": "A switcher dynamically decides which child element should be made visible.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojSwitcher.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "value": {
          "description": "Specifies the value for this switcher.",
          "type": "string",
          "displayName": "Value",
          "eventGroup": "common",
          "value": "",
          "help": "#value",
          "dynamicSlotDef": ""
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "dynamicSlots": {}
    },
    "oj-tab-bar": {
      "name": "oj-tab-bar",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Tab Bar",
      "implements": [
        "TabBarElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnavigationlist",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-sm-condense",
                "oj-md-condense",
                "oj-lg-condense",
                "oj-xl-condense"
              ],
              "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'."
            },
            {
              "styleGroup": [
                "oj-disabled"
              ],
              "description": "Any list item can be disabled by adding the oj-disabled class to that element"
            },
            {
              "styleGroup": [
                "oj-focus-highlight"
              ],
              "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-removable"
              ],
              "description": "Use this class to make an item removable."
            },
            {
              "styleGroup": [
                "oj-tabbar-category-divider"
              ],
              "description": "Use this class to add a horizontal divider line between two categories of items."
            },
            {
              "styleGroup": [
                "oj-tabbar-hide-remove-icon"
              ],
              "description": "Use this class to hide the remove icon. In this case, Item can be removed using context menu."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-dividers"
              ],
              "description": "Use this class to render a divider between tab items. Note: On IE11, this is not supported when overflow attribute is set to 'popup'."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-end"
              ],
              "description": "Use this class to add an badge/metadata/icon to a list item."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-icon"
              ],
              "description": "Use this class to add an icon to a list item."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-label"
              ],
              "description": "Use this class to specify the element with the label. This will eliminate the need for Tabbar to automatically wrap any child element that is not an icon or a badge with this class. Note the content must have the correct order (icon element first, then the label element, then the badge element) as Tabbar in this case will not attempt to reorder the content."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-text-wrap"
              ],
              "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'. This style class is not supported when edge is 'top' or 'bottom'."
            },
            {
              "styleGroup": [
                "oj-tabbar-item-title"
              ],
              "description": "When arbitrary content is placed inside an item's content area, its title text can be marked using this style class. This helps the component in identifying the Item's label."
            },
            {
              "styleGroup": [
                "oj-tabbar-nofollow-link"
              ],
              "description": "Use this class to prevent automatic navigation to a URL within a tab item. See the Help documentation for more information."
            },
            {
              "styleGroup": [
                "oj-tabbar-stack-icon-label"
              ],
              "description": "Use this class to display a horizontal Tab Bar with icons and labels stacked. Applicable only when edge is top."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-tab-bar",
          "uxSpecs": [
            "tab-bar"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-[size]-condense",
          "kind": "template",
          "displayName": "Condense",
          "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'.",
          "help": "#oj-[size]-condense",
          "tokens": [
            {
              "name": "[size]",
              "description": "Screen Size",
              "styleRelation": "inclusive",
              "values": [
                {
                  "name": "sm",
                  "displayName": "Small",
                  "description": "Small screen size range"
                },
                {
                  "name": "md",
                  "displayName": "Medium",
                  "description": "Medium screen size range"
                },
                {
                  "name": "lg",
                  "displayName": "Large",
                  "description": "Large screen size range"
                },
                {
                  "name": "xl",
                  "displayName": "X-Large",
                  "description": "Extra large screen size and up"
                }
              ]
            }
          ]
        },
        {
          "name": "oj-disabled",
          "kind": "class",
          "displayName": "Disabled Item",
          "description": "Any list item can be disabled by adding the oj-disabled class to that element",
          "styleSelector": "oj-tab-bar li",
          "help": "#oj-disabled"
        },
        {
          "name": "oj-focus-highlight",
          "kind": "class",
          "displayName": "Focus Styling",
          "description": "Allows per-instance control of the focus highlight policy (not typically required). See the Help documentation for more information.",
          "help": "#oj-focus-highlight"
        },
        {
          "name": "oj-removable",
          "kind": "class",
          "displayName": "Item Removable",
          "description": "Use this class to make an item removable.",
          "styleSelector": "oj-tab-bar li",
          "help": "#oj-removable"
        },
        {
          "name": "oj-tabbar-category-divider",
          "kind": "class",
          "displayName": "CategoryDivider",
          "description": "Use this class to add a horizontal divider line between two categories of items.",
          "styleSelector": "oj-tab-bar li",
          "help": "#oj-tabbar-category-divider"
        },
        {
          "name": "oj-tabbar-hide-remove-icon",
          "kind": "class",
          "displayName": "Hide Remove Icon",
          "description": "Use this class to hide the remove icon. In this case, Item can be removed using context menu.",
          "help": "#oj-tabbar-hide-remove-icon"
        },
        {
          "name": "oj-tabbar-item-dividers",
          "kind": "class",
          "displayName": "ItemDividers",
          "description": "Use this class to render a divider between tab items. Note: On IE11, this is not supported when overflow attribute is set to 'popup'.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Redwood"
              ]
            }
          },
          "help": "#oj-tabbar-item-dividers"
        },
        {
          "name": "oj-tabbar-item-end",
          "kind": "class",
          "displayName": "Icon",
          "description": "Use this class to add an badge/metadata/icon to a list item.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#oj-tabbar-item-end"
        },
        {
          "name": "oj-tabbar-item-icon",
          "kind": "class",
          "displayName": "Icons",
          "description": "Use this class to add an icon to a list item.",
          "styleSelector": "oj-tab-bar span",
          "help": "#oj-tabbar-item-icon"
        },
        {
          "name": "oj-tabbar-item-label",
          "kind": "class",
          "displayName": "Label",
          "description": "Use this class to specify the element with the label. This will eliminate the need for Tabbar to automatically wrap any child element that is not an icon or a badge with this class. Note the content must have the correct order (icon element first, then the label element, then the badge element) as Tabbar in this case will not attempt to reorder the content.",
          "styleSelector": "oj-tabbar span",
          "help": "#oj-tabbar-item-label"
        },
        {
          "name": "oj-tabbar-item-text-wrap",
          "kind": "class",
          "displayName": "Text Wrap",
          "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when overflow attribute is set to 'popup'. This style class is not supported when edge is 'top' or 'bottom'.",
          "help": "#oj-tabbar-item-text-wrap"
        },
        {
          "name": "oj-tabbar-item-title",
          "kind": "class",
          "displayName": "Title",
          "description": "When arbitrary content is placed inside an item's content area, its title text can be marked using this style class. This helps the component in identifying the Item's label.",
          "styleSelector": "oj-tab-bar span",
          "help": "#oj-tabbar-item-title"
        },
        {
          "name": "oj-tabbar-nofollow-link",
          "kind": "class",
          "displayName": "No Follow Link",
          "description": "Use this class to prevent automatic navigation to a URL within a tab item. See the Help documentation for more information.",
          "help": "#oj-tabbar-nofollow-link"
        },
        {
          "name": "oj-tabbar-stack-icon-label",
          "kind": "class",
          "displayName": "Stack Icon",
          "description": "Use this class to display a horizontal Tab Bar with icons and labels stacked. Applicable only when edge is top.",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "Use display attribute instead."
            }
          ],
          "help": "#oj-tabbar-stack-icon-label"
        }
      ],
      "styleVariables": [
        {
          "description": "Padding between icon and text",
          "name": "oj-tab-bar-icon-to-text-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar icon margin",
          "name": "oj-tab-bar-icon-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar icon size",
          "name": "oj-tab-bar-icon-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar item margin",
          "name": "oj-tab-bar-item-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar item padding",
          "name": "oj-tab-bar-item-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar item minimum height",
          "name": "oj-tab-bar-item-min-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar item line height",
          "name": "oj-tab-bar-item-line-height",
          "formats": [
            "number"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tab bar item font size",
          "name": "oj-tab-bar-item-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Default tab bar item font weight",
          "name": "oj-tab-bar-item-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-tab-bar-css-set2"
        },
        {
          "description": "Default tab bar item label color",
          "name": "oj-tab-bar-item-label-color",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set2"
        },
        {
          "description": "Tab bar item label color when hovered",
          "name": "oj-tab-bar-item-label-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set3"
        },
        {
          "description": "Tab bar item background color when hovered",
          "name": "oj-tab-bar-item-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set3"
        },
        {
          "description": "Tab bar item background color when active",
          "name": "oj-tab-bar-item-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set4"
        },
        {
          "description": "Tab bar item border color when active",
          "name": "oj-tab-bar-item-border-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set4"
        },
        {
          "description": "Tab bar item font weight when selected",
          "name": "oj-tab-bar-item-font-weight-selected",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-tab-bar-css-set5"
        },
        {
          "description": "Tab bar item label color when selected",
          "name": "oj-tab-bar-item-label-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set5"
        },
        {
          "description": "Tab bar item background color when selected",
          "name": "oj-tab-bar-item-bg-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set5"
        },
        {
          "description": "Tab bar item border color when selected",
          "name": "oj-tab-bar-item-border-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-tab-bar-css-set5"
        }
      ],
      "description": "A tab bar allows navigation between different content sections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTabBar.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selection",
            "edge",
            "display",
            "truncation",
            "overflow"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data"
          ]
        }
      ],
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "#currentItem"
        },
        "data": {
          "description": "Specifies the data provider for the Tab Bar. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "deprecated",
                  "since": "14.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "display": {
          "description": "Specifies what needs to be displayed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "#display",
          "enumValues": [
            "all",
            "icons",
            "stacked"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            },
            "stacked": {
              "description": "Display icons with stacked label.",
              "displayName": "Stacked"
            }
          }
        },
        "edge": {
          "description": "Specifies the edge position of the Tab Bar.",
          "type": "string",
          "displayName": "Edge",
          "value": "start",
          "help": "#edge",
          "enumValues": [
            "bottom",
            "end",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "description": "This renders list items horizontally. Generally used when tab bar placed on bottom of content section.",
              "displayName": "Bottom"
            },
            "end": {
              "description": "This renders list items vertically. Generally used when tab bar placed on right/end of content section.",
              "displayName": "End"
            },
            "start": {
              "description": "This renders list items vertically. Generally used when tab bar placed on left/start of content section.",
              "displayName": "Start"
            },
            "top": {
              "description": "This renders list items horizontally. Generally used when tab bar placed on top of content section.",
              "displayName": "Top"
            }
          }
        },
        "item": {
          "description": "Customize the functionality of each tab on Tab Bar.",
          "type": "object",
          "displayName": "Item",
          "help": "#item",
          "properties": {
            "renderer": {
              "description": "Specifies the renderer for the tab item. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "#item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the tab can be selected. See the Help documentation for more information.",
              "type": "function|boolean",
              "displayName": "Selectable",
              "value": true,
              "help": "#item.selectable"
            }
          }
        },
        "layout": {
          "description": "Specifies whether to stretch the tab bar items to occupy available space or to condense items.",
          "type": "string",
          "displayName": "Layout",
          "value": "stretch",
          "help": "#layout",
          "enumValues": [
            "condense",
            "stretch"
          ],
          "propertyEditorValues": {
            "condense": {
              "description": "all items are condense",
              "displayName": "Condense"
            },
            "stretch": {
              "description": "all items are stretched",
              "displayName": "Stretch"
            }
          }
        },
        "overflow": {
          "description": "Specifies overflow behaviour for the Tab Bar.",
          "type": "string",
          "displayName": "Overflow",
          "value": "hidden",
          "help": "#overflow",
          "enumValues": [
            "hidden",
            "popup"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Overflow is clipped, and the rest of the content will be invisible.",
              "displayName": "Hidden"
            },
            "popup": {
              "description": "Popup menu will be shown with overflowed items.",
              "displayName": "Popup"
            }
          }
        },
        "reorderable": {
          "description": "Specifies whether tabs can be reordered.",
          "type": "string",
          "displayName": "Reorderable",
          "value": "disabled",
          "help": "#reorderable",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Disables reordering of items in tabbar.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Enables reordering of items in tabbar.",
              "displayName": "Enabled"
            }
          }
        },
        "selection": {
          "description": "Specifies the key of the selected item. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#selection"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleReorderAfterItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is after a certain item.",
              "type": "string",
              "help": "#translations.accessibleReorderAfterItem"
            },
            "accessibleReorderBeforeItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is before a certain item.",
              "type": "string",
              "help": "#translations.accessibleReorderBeforeItem"
            },
            "accessibleReorderTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for reordering items.",
              "type": "string",
              "help": "#translations.accessibleReorderTouchInstructionText"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label.",
              "type": "string",
              "help": "#translations.labelCut"
            },
            "labelPasteAfter": {
              "description": "Provides properties to customize the context menu paste after label.",
              "type": "string",
              "help": "#translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Provides properties to customize the context menu paste before label.",
              "type": "string",
              "help": "#translations.labelPasteBefore"
            },
            "labelRemove": {
              "description": "Provides properties to customize the context menu remove label.",
              "type": "string",
              "help": "#translations.labelRemove"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the message text used by Tab Bar when waiting for data.",
              "type": "string",
              "help": "#translations.msgFetchingData"
            },
            "msgNoData": {
              "description": "Provides properties to customize the message text used by Tab Bar when there are no items.",
              "type": "string",
              "help": "#translations.msgNoData"
            },
            "overflowItemLabel": {
              "description": "Label for overflow menu button.",
              "type": "string",
              "help": "#translations.overflowItemLabel"
            },
            "removeCueText": {
              "description": "Text cue for the removable tab, used as the aria-label for the close icon.",
              "type": "string",
              "help": "#translations.removeCueText"
            },
            "selectedLabel": {
              "description": "Provides text to read to screen reader when an item is selected.",
              "type": "string",
              "help": "#translations.selectedLabel"
            }
          }
        },
        "truncation": {
          "description": "Specifies whether truncation needs to be applied.",
          "type": "string",
          "displayName": "Truncation",
          "value": "none",
          "help": "#truncation",
          "enumValues": [
            "none",
            "progressive"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "tabs always take up the space needed by the title texts.",
              "displayName": "None"
            },
            "progressive": {
              "description": "If not enough space is available to display all of the tabs, then the width of each tab title is restricted just enough to allow all tabs to fit. All tab titles that are truncated are displayed with ellipses. However the width of each tab title will not be truncated below $tabBarTruncatedLabelMinWidth.",
              "displayName": "Progressive"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the Tab Bar.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Event handler for when the default animation of a particular action has ended.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "the action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Event handler for when the default animation of a particular action is about to start.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "the action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Event handler for when before the current item is changed.",
          "cancelable": true,
          "help": "#event:beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the Key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the Key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojBeforeDeselect": {
          "description": "Event handler for when before tab is deselected.",
          "cancelable": true,
          "help": "#event:beforeDeselect",
          "detail": {
            "fromKey": {
              "description": "the Key of the tab item being navigated from",
              "type": "any"
            },
            "fromItem": {
              "description": "the tab item being navigated from",
              "type": "Element"
            },
            "toKey": {
              "description": "the Key of the tab item being navigated to",
              "type": "any"
            },
            "toItem": {
              "description": "the tab item being navigated to",
              "type": "Element"
            }
          }
        },
        "ojBeforeRemove": {
          "description": "Event handler for when a tab is about to be removed.",
          "cancelable": true,
          "help": "#event:beforeRemove",
          "detail": {
            "item": {
              "description": "Item being removed",
              "type": "Element"
            },
            "key": {
              "description": "Key of the item being removed",
              "type": "any"
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Event handler for when before the selection is changed.",
          "cancelable": true,
          "help": "#event:beforeSelect",
          "detail": {
            "key": {
              "description": "Selected list item Key.",
              "type": "any"
            },
            "item": {
              "description": "Selected list item.",
              "type": "Element"
            }
          }
        },
        "ojDeselect": {
          "description": "Event handler for when a tab is deselected.",
          "help": "#event:deselect",
          "detail": {
            "fromKey": {
              "description": "the Key of the tab item being navigated from",
              "type": "any"
            },
            "fromItem": {
              "description": "the tab item being navigated from",
              "type": "Element"
            },
            "toKey": {
              "description": "the Key of the tab item being navigated to",
              "type": "any"
            },
            "toItem": {
              "description": "the tab item being navigated to",
              "type": "Element"
            }
          }
        },
        "ojRemove": {
          "description": "Event handler for when a tab is removed.",
          "help": "#event:remove",
          "detail": {
            "item": {
              "description": "Item removed",
              "type": "Element"
            },
            "key": {
              "description": "Key of the item removed",
              "type": "any"
            }
          }
        },
        "ojReorder": {
          "description": "Event handler for when a tab is reordered.",
          "help": "#event:reorder",
          "detail": {
            "item": {
              "description": "Item to be moved",
              "type": "Element"
            },
            "position": {
              "description": "the drop position relative to the reference item. Possible values are \"before\" and \"after\".",
              "type": "'before'|'after'"
            },
            "reference": {
              "description": "the item where the moved items are drop on.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-tab-bar> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-table": {
      "name": "oj-table",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Table",
      "implements": [
        "TableElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtable",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-table-data-cell-no-padding"
              ],
              "description": "Used to style a table cell so that it has no padding."
            },
            {
              "styleGroup": [
                "oj-table-data-cell-padding"
              ],
              "description": "Used to style a table cell so that it has default padding."
            },
            {
              "styleGroup": [
                "oj-table-hide-vertical-scrollbar"
              ],
              "description": "Used to explicitly hide the vertical scrollbar when the table body is scrollable."
            },
            {
              "styleGroup": [
                "oj-table-stretch"
              ],
              "description": "Used to notify the Table that it should stretch its inner contents to fill all available horizontal and vertical space. This requires that the Table's outer dimensions are controlled externally, either by its containing layout or by height and width values being set on it."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-tables-basic",
          "uxSpecs": [
            "table"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-table-data-cell-no-padding",
          "kind": "class",
          "displayName": "No Padding",
          "description": "Used to style a table cell so that it has no padding.",
          "help": "#oj-table-data-cell-no-padding"
        },
        {
          "name": "oj-table-data-cell-padding",
          "kind": "class",
          "displayName": "Padding",
          "description": "Used to style a table cell so that it has default padding.",
          "help": "#oj-table-data-cell-padding"
        },
        {
          "name": "oj-table-hide-vertical-scrollbar",
          "kind": "class",
          "displayName": "Hide Vertical Scrollbar",
          "description": "Used to explicitly hide the vertical scrollbar when the table body is scrollable.",
          "help": "#oj-table-hide-vertical-scrollbar"
        },
        {
          "name": "oj-table-stretch",
          "kind": "class",
          "displayName": "Stretch",
          "description": "Used to notify the Table that it should stretch its inner contents to fill all available horizontal and vertical space. This requires that the Table's outer dimensions are controlled externally, either by its containing layout or by height and width values being set on it.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#oj-table-stretch"
        }
      ],
      "styleVariables": [
        {
          "description": "Table horizontal cell padding",
          "name": "oj-table-cell-padding-horizontal",
          "formats": [
            "length"
          ],
          "help": "#oj-table-css-set1"
        }
      ],
      "description": "A table displays data items in a tabular format with highly interactive features.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTable.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode.row",
            "selectionMode.column",
            "display",
            "horizontalGridVisible",
            "verticalGridVisible"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "columns",
            "selected.row",
            "selected.column",
            "firstSelectedRow"
          ]
        }
      ],
      "properties": {
        "accessibility": {
          "description": "Accessibility attributes.",
          "type": "object|null",
          "displayName": "Accessibility",
          "help": "#accessibility",
          "properties": {
            "rowHeader": {
              "description": "Specifies the column ids to be used as the row headers by screen readers. See the Help documentation for more information.",
              "type": "string|Array<string>",
              "displayName": "Row Header",
              "help": "#accessibility.rowHeader"
            }
          }
        },
        "addRowDisplay": {
          "description": "Specifies whether to show or hide add new row when addRowTemplate or addRowCellTemplate is present.",
          "type": "string",
          "displayName": "Add Row Display",
          "value": "top",
          "help": "#addRowDisplay",
          "enumValues": [
            "hidden",
            "top"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Hide add new row.",
              "displayName": "Hidden"
            },
            "top": {
              "description": "Display add new row at the top.",
              "displayName": "Top"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to the content of the cell template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "columns": {
          "description": "An array of column definitions. See the Help documentation for more information.",
          "type": "Array<Object>|null",
          "displayName": "Columns",
          "value": null,
          "writeback": true,
          "help": "#columns",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "className": {
                  "description": "The CSS class to apply to the column cells.",
                  "type": "string|null",
                  "displayName": "Class Name",
                  "value": null
                },
                "field": {
                  "description": "The data field that this column refers to.",
                  "type": "string|null",
                  "displayName": "Field",
                  "value": null
                },
                "footerClassName": {
                  "description": "The CSS class to apply to the footer cell.",
                  "type": "string|null",
                  "displayName": "Footer Class Name",
                  "value": null
                },
                "footerRenderer": {
                  "description": "A function that renders the content of the footer cell. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Footer Renderer",
                  "value": null
                },
                "footerStyle": {
                  "description": "The CSS styling to apply to the footer cell.",
                  "type": "string|null",
                  "displayName": "Footer Style",
                  "value": null
                },
                "footerTemplate": {
                  "description": "The slot name used to specify the template for rendering the footer cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Footer Template",
                  "value": null,
                  "dynamicSlotDef": "FooterTemplateContext",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use HTMLDocument methods to retrieve this element."
                            }
                          ],
                          "description": "The <oj-table> custom element.",
                          "type": "Element"
                        },
                        "columnIndex": {
                          "description": "The zero-based index of the current column during initial rendering.",
                          "type": "number"
                        },
                        "columnKey": {
                          "description": "The key of the current column being rendered.",
                          "type": "any"
                        }
                      }
                    }
                  }
                },
                "frozenEdge": {
                  "description": "The edge that this column is frozen against. If present, the column will not be allowed to scroll past the specified edge of the Table.",
                  "type": "string|null",
                  "displayName": "Frozen Edge",
                  "value": null,
                  "enumValues": [
                    "start",
                    "end"
                  ],
                  "propertyEditorValues": {
                    "start": {
                      "description": "Do not scroll this column past the start edge of the Table",
                      "displayName": "Start"
                    },
                    "end": {
                      "description": "Do not scroll this column past the end edge of the Table",
                      "displayName": "End"
                    }
                  }
                },
                "headerClassName": {
                  "description": "The CSS class to apply to the column header text.",
                  "type": "string|null",
                  "displayName": "Header Class Name",
                  "value": null
                },
                "headerRenderer": {
                  "description": "A function that renders the content of the header. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Header Renderer",
                  "value": null
                },
                "headerStyle": {
                  "description": "The CSS styling to apply to the column header text.",
                  "type": "string|null",
                  "displayName": "Header Style",
                  "value": null
                },
                "headerTemplate": {
                  "description": "The slot name used to specify the template for rendering the header cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Header Template",
                  "value": null,
                  "dynamicSlotDef": "HeaderTemplateContext",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use HTMLDocument methods to retrieve this element."
                            }
                          ],
                          "description": "The <oj-table> custom element.",
                          "type": "Element"
                        },
                        "data": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use HeaderTemplateContext.headerText instead."
                            }
                          ],
                          "description": "The data object for the current header.",
                          "type": "any"
                        },
                        "columnIndex": {
                          "description": "The zero-based index of the current column during initial rendering.",
                          "type": "number"
                        },
                        "columnKey": {
                          "description": "The key of the current column being rendered.",
                          "type": "any"
                        },
                        "headerText": {
                          "description": "The text for the current header being rendered.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "headerText": {
                  "description": "Text to display in the header of the column.",
                  "type": "string|null",
                  "displayName": "Header Text",
                  "value": null,
                  "translatable": true
                },
                "id": {
                  "description": "The identifier for the column. This property is required when column selection is enabled.",
                  "type": "string|null",
                  "displayName": "Id"
                },
                "maxWidth": {
                  "description": "The maximum width style string of the column. See the Help documentation for more information.",
                  "type": "string|number|null",
                  "displayName": "Max Width",
                  "value": null
                },
                "minWidth": {
                  "description": "The minimum width style string of the column. See the Help documentation for more information.",
                  "type": "string|number|null",
                  "displayName": "Min Width",
                  "value": null,
                  "propertyEditorValues": {
                    "auto": {
                      "description": "The minimum width will be determined by the theme and the layout attribute.",
                      "displayName": "Auto"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that renders the content of the cell. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null
                },
                "resizable": {
                  "description": "Enable or disable width resizing along the column end headers.",
                  "type": "string",
                  "displayName": "Resizable",
                  "value": "disabled",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "displayName": "Enabled"
                    }
                  }
                },
                "showRequired": {
                  "description": "Whether the column header should display a required icon. When set to true, the Table's default column header rendering, tooltip, and assistive text will convey this information to the user as per the specified theme. If a custom header renderer or header template is specified, the application is responsible for rendering the icon.",
                  "type": "boolean",
                  "displayName": "Show Required",
                  "value": false,
                  "extension": {
                    "themes": {
                      "unsupportedThemes": [
                        "Alta"
                      ]
                    }
                  }
                },
                "sortProperty": {
                  "description": "Specifies the row attribute used for sorting when a sort is invoked on this column. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Sort Property",
                  "value": null
                },
                "sortable": {
                  "description": "Specifies whether a column is sortable. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Column will be sortable if the underlying model supports sorting.",
                      "displayName": "Auto"
                    },
                    "disabled": {
                      "description": "Sorting is disabled.",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Sorting is enabled if the underlying model supports sorting.",
                      "displayName": "Enabled"
                    }
                  }
                },
                "style": {
                  "description": "The CSS styling to apply to the column cells.",
                  "type": "string|null",
                  "displayName": "Style",
                  "value": null
                },
                "template": {
                  "description": "The slot name used to specify the template for rendering the cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Template",
                  "value": null,
                  "dynamicSlotDef": "CellTemplateContext",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use HTMLDocument methods to retrieve this element."
                            }
                          ],
                          "description": "The <oj-table> custom element.",
                          "type": "Element"
                        },
                        "data": {
                          "description": "The data for the current cell being rendered.",
                          "type": "any"
                        },
                        "row": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use CellTemplateContext.item.data instead."
                            }
                          ],
                          "description": "The data for the row contained the current cell being rendered.",
                          "type": "any"
                        },
                        "index": {
                          "description": "The zero-based index of the current row during initial rendering. Note the index is not updated in response to row additions and removals.",
                          "type": "number"
                        },
                        "columnIndex": {
                          "description": "The zero-based index of the current column during initial rendering.",
                          "type": "number"
                        },
                        "key": {
                          "status": [
                            {
                              "type": "deprecated",
                              "since": "10.0.0",
                              "description": "Use CellTemplateContext.item.key instead."
                            }
                          ],
                          "description": "The key of the current cell being rendered.",
                          "type": "any"
                        },
                        "mode": {
                          "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
                          "type": "\"edit\"|\"navigation\""
                        },
                        "item": {
                          "description": "The Item for the row being rendered.",
                          "type": "Item<K, D>"
                        },
                        "columnKey": {
                          "description": "The key of the current column being rendered.",
                          "type": "any"
                        },
                        "datasource": {
                          "description": "The \"data\" attribute of the Table.",
                          "type": "DataProvider<K, D>|null"
                        },
                        "rowEditable": {
                          "description": "On if row is editable, off if editing has been disabled.",
                          "type": "\"on\"|\"off\""
                        }
                      }
                    }
                  }
                },
                "weight": {
                  "description": "The sizing weight of the column in a fixed layout. See the Help documentation for more information.",
                  "type": "number|null",
                  "displayName": "Weight",
                  "value": null,
                  "extension": {
                    "themes": {
                      "unsupportedThemes": [
                        "Alta"
                      ]
                    }
                  }
                },
                "width": {
                  "description": "The width style string of the column. See the Help documentation for more information.",
                  "type": "string|number|null",
                  "displayName": "Width",
                  "value": null
                }
              }
            }
          }
        },
        "columnsDefault": {
          "description": "Default values to apply to all column objects.",
          "type": "object|null",
          "displayName": "Columns Default",
          "help": "#columnsDefault",
          "properties": {
            "className": {
              "description": "The CSS class to apply to the column cells.",
              "type": "string|null",
              "displayName": "Class Name",
              "value": null
            },
            "field": {
              "description": "The data field that this column refers to.",
              "type": "string|null",
              "displayName": "Field",
              "value": null
            },
            "footerClassName": {
              "description": "The CSS class to apply to the footer cell.",
              "type": "string|null",
              "displayName": "Footer Class Name",
              "value": null
            },
            "footerRenderer": {
              "description": "A function that renders the content of the footer cell. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Footer Renderer",
              "value": null
            },
            "footerStyle": {
              "description": "The CSS styling to apply to the footer cell.",
              "type": "string|null",
              "displayName": "Footer Style",
              "value": null
            },
            "footerTemplate": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Use the footerTemplate slot instead."
                }
              ],
              "description": "The slot name used to specify the template for rendering the footer cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Footer Template",
              "value": null,
              "dynamicSlotDef": "FooterTemplateContext",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use HTMLDocument methods to retrieve this element."
                        }
                      ],
                      "description": "The <oj-table> custom element.",
                      "type": "Element"
                    },
                    "columnIndex": {
                      "description": "The zero-based index of the current column during initial rendering.",
                      "type": "number"
                    },
                    "columnKey": {
                      "description": "The key of the current column being rendered.",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "headerClassName": {
              "description": "The CSS class to apply to the column header text.",
              "type": "string|null",
              "displayName": "Header Class Name",
              "value": null
            },
            "headerRenderer": {
              "description": "A function that renders the content of the header. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Header Renderer",
              "value": null
            },
            "headerStyle": {
              "description": "The CSS styling to apply to the column header text.",
              "type": "string|null",
              "displayName": "Header Style",
              "value": null
            },
            "headerTemplate": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Use the headerTemplate slot instead."
                }
              ],
              "description": "The slot name used to specify the template for rendering the header cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Header Template",
              "value": null,
              "dynamicSlotDef": "HeaderTemplateContext",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use HTMLDocument methods to retrieve this element."
                        }
                      ],
                      "description": "The <oj-table> custom element.",
                      "type": "Element"
                    },
                    "data": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use HeaderTemplateContext.headerText instead."
                        }
                      ],
                      "description": "The data object for the current header.",
                      "type": "any"
                    },
                    "columnIndex": {
                      "description": "The zero-based index of the current column during initial rendering.",
                      "type": "number"
                    },
                    "columnKey": {
                      "description": "The key of the current column being rendered.",
                      "type": "any"
                    },
                    "headerText": {
                      "description": "The text for the current header being rendered.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "headerText": {
              "description": "Text to display in the header of the column.",
              "type": "string|null",
              "displayName": "Header Text",
              "value": null,
              "translatable": true
            },
            "maxWidth": {
              "description": "The maximum width style string of the column. See the Help documentation for more information.",
              "type": "string|number|null",
              "displayName": "Max Width",
              "value": null
            },
            "minWidth": {
              "description": "The minimum width style string of the column. See the Help documentation for more information.",
              "type": "string|number|null",
              "displayName": "Min Width",
              "value": "auto",
              "propertyEditorValues": {
                "auto": {
                  "description": "The minimum width will be determined by the theme and the layout attribute.",
                  "displayName": "Auto"
                }
              }
            },
            "renderer": {
              "description": "A function that renders the content of the cell. The function takes a context argument, provided by the Table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null
            },
            "resizable": {
              "description": "Enable or disable width resizing along the column end headers.",
              "type": "string",
              "displayName": "Resizable",
              "value": "disabled",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "displayName": "Disabled"
                },
                "enabled": {
                  "displayName": "Enabled"
                }
              }
            },
            "showRequired": {
              "description": "Whether the column header should display a required icon. When set to true, the Table's default column header rendering, tooltip, and assistive text will convey this information to the user as per the specified theme. If a custom header renderer or header template is specified, the application is responsible for rendering the icon.",
              "type": "boolean",
              "displayName": "Show Required",
              "value": false,
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "sortProperty": {
              "description": "Specifies the row attribute used for sorting when a sort is invoked on this column. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Sort Property",
              "value": null
            },
            "sortable": {
              "description": "Specifies whether a column is sortable. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Sortable",
              "value": "auto",
              "enumValues": [
                "auto",
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Column will be sortable if the underlying model supports sorting.",
                  "displayName": "Auto"
                },
                "disabled": {
                  "description": "Sorting is disabled.",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Sorting is enabled if the underlying model supports sorting.",
                  "displayName": "Enabled"
                }
              }
            },
            "style": {
              "description": "The CSS styling to apply to the column cells.",
              "type": "string|null",
              "displayName": "Style",
              "value": null
            },
            "template": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "Use the template slot instead."
                }
              ],
              "description": "The slot name used to specify the template for rendering the cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Template",
              "value": null,
              "dynamicSlotDef": "CellTemplateContext",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use HTMLDocument methods to retrieve this element."
                        }
                      ],
                      "description": "The <oj-table> custom element.",
                      "type": "Element"
                    },
                    "data": {
                      "description": "The data for the current cell being rendered.",
                      "type": "any"
                    },
                    "row": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use CellTemplateContext.item.data instead."
                        }
                      ],
                      "description": "The data for the row contained the current cell being rendered.",
                      "type": "any"
                    },
                    "index": {
                      "description": "The zero-based index of the current row during initial rendering. Note the index is not updated in response to row additions and removals.",
                      "type": "number"
                    },
                    "columnIndex": {
                      "description": "The zero-based index of the current column during initial rendering.",
                      "type": "number"
                    },
                    "key": {
                      "status": [
                        {
                          "type": "deprecated",
                          "since": "10.0.0",
                          "description": "Use CellTemplateContext.item.key instead."
                        }
                      ],
                      "description": "The key of the current cell being rendered.",
                      "type": "any"
                    },
                    "mode": {
                      "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
                      "type": "\"edit\"|\"navigation\""
                    },
                    "item": {
                      "description": "The Item for the row being rendered.",
                      "type": "Item<K, D>"
                    },
                    "columnKey": {
                      "description": "The key of the current column being rendered.",
                      "type": "any"
                    },
                    "datasource": {
                      "description": "The \"data\" attribute of the Table.",
                      "type": "DataProvider<K, D>|null"
                    },
                    "rowEditable": {
                      "description": "On if row is editable, off if editing has been disabled.",
                      "type": "\"on\"|\"off\""
                    }
                  }
                }
              }
            },
            "weight": {
              "description": "The sizing weight of the column in a fixed layout. See the Help documentation for more information.",
              "type": "number|null",
              "displayName": "Weight",
              "value": 1,
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "width": {
              "description": "The width style string of the column. See the Help documentation for more information.",
              "type": "string|number|null",
              "displayName": "Width",
              "value": null
            }
          }
        },
        "currentRow": {
          "description": "Specifies the row that currently has keyboard focus. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Current Row",
          "value": null,
          "writeback": true,
          "help": "#currentRow"
        },
        "data": {
          "description": "Specifies the data for the table. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "display": {
          "description": "Specifies whether to display this table in list or grid mode. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "list",
          "help": "#display",
          "enumValues": [
            "grid",
            "list"
          ],
          "propertyEditorValues": {
            "grid": {
              "description": "Display table in grid mode. This is a more compact look than list mode.",
              "displayName": "Grid"
            },
            "list": {
              "description": "Display table in list mode.",
              "displayName": "List"
            }
          }
        },
        "dnd": {
          "description": "Specifies drag and drop features. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "An object that describes drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "value": null,
              "help": "#dnd.drag",
              "properties": {
                "rows": {
                  "description": "An object that describes drag functionality for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "#dnd.drag.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "value": null,
              "help": "#dnd.drop",
              "properties": {
                "columns": {
                  "description": "An object that describes drop functionality for a selected set of columns. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Columns",
                  "help": "#dnd.drop.columns",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop"
                    }
                  }
                },
                "rows": {
                  "description": "An object that describes drop functionality for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "#dnd.drop.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop"
                    }
                  }
                }
              }
            },
            "reorder": {
              "description": "An object that describes reorder functionality.",
              "type": "object",
              "displayName": "Reorder",
              "help": "#dnd.reorder",
              "properties": {
                "columns": {
                  "description": "An object that describes reorder functionality for a selected column. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Columns",
                  "value": "disabled",
                  "help": "#dnd.reorder.columns",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Disable column reordering.",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enable column reordering.",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "editMode": {
          "description": "Specifies if the table is read-only or editable. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Edit Mode",
          "value": "none",
          "help": "#editMode",
          "enumValues": [
            "none",
            "rowEdit"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The table is read-only and is a single Tab stop.",
              "displayName": "None"
            },
            "rowEdit": {
              "description": "The table has single row at a time editability and the cells within the editable row are tabbable.",
              "displayName": "Row Edit"
            }
          }
        },
        "editRow": {
          "description": "Specifies the row that is currently being edited. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Edit Row",
          "value": {
            "rowKey": null,
            "rowIndex": -1
          },
          "writeback": true,
          "help": "#editRow"
        },
        "firstSelectedRow": {
          "description": "Read-only property used for retrieving the key and data of the first selected row. See the Help documentation for more information.",
          "type": "object",
          "displayName": "First Selected Row",
          "eventGroup": "common",
          "value": {
            "key": null,
            "data": null
          },
          "writeback": true,
          "readOnly": true,
          "help": "#firstSelectedRow",
          "properties": {
            "data": {
              "description": "The data for first selected row.",
              "type": "any",
              "displayName": "Data"
            },
            "key": {
              "description": "The key of first selected row.",
              "type": "any",
              "displayName": "Key"
            }
          }
        },
        "horizontalGridVisible": {
          "description": "Specifies the visibility of the horizontal gridlines. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Horizontal Grid Visible",
          "value": "auto",
          "help": "#horizontalGridVisible",
          "enumValues": [
            "auto",
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by display attribute.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Horizontal gridlines are disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Horizontal gridlines are enabled.",
              "displayName": "Enabled"
            }
          }
        },
        "layout": {
          "description": "The column sizing method used for the Table and its columns.",
          "type": "string",
          "displayName": "Layout",
          "value": "contents",
          "help": "#layout",
          "enumValues": [
            "contents",
            "fixed"
          ],
          "propertyEditorValues": {
            "contents": {
              "description": "When specified, the default column sizing is determined by the contents of the data. Does not require an overall width set on the Table. Can have performance issues when large numbers of columns and/or rows are initially rendered.",
              "displayName": "Contents"
            },
            "fixed": {
              "description": "When specified, the default column sizing is determined by column weights. Requires an overall width set on the Table (width='100%', width='200rem', etc.) Very performant when rendering large numbers of columns and/or rows.",
              "displayName": "Fixed"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "row": {
          "description": "Customizes the functionality of each row in the table.",
          "type": "object",
          "displayName": "Row",
          "help": "#row",
          "properties": {
            "editable": {
              "description": "Specifies whether the row can be edited. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Editable",
              "value": null,
              "help": "#row.editable"
            },
            "selectable": {
              "description": "Specifies whether the row can be selected. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Selectable",
              "value": null,
              "help": "#row.selectable"
            },
            "sticky": {
              "description": "Specifies whether the row is sticky. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Sticky",
              "value": null,
              "help": "#row.sticky",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            }
          }
        },
        "rowRenderer": {
          "description": "A function that returns row content. The function takes a context argument, provided by the table. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Row Renderer",
          "value": null,
          "help": "#rowRenderer"
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls down the table.",
          "type": "string",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "#scrollPolicy",
          "enumValues": [
            "auto",
            "loadAll",
            "loadMoreOnScroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by element. The default is to have the same behavior as \"loadMoreOnScroll\" except when legacy TableDataSource is used, in which case the behavior is the same as \"loadAll\".",
              "displayName": "Auto"
            },
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data are fetched when the user scrolls to the bottom of the table. This option should be used only when table height is specified.",
              "displayName": "Load More On Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "type": "object|null",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "description": "The number of data rows to fetch in each block.",
              "type": "number",
              "displayName": "Fetch Size",
              "value": 25,
              "minimum": 1,
              "help": "#scrollPolicyOptions.fetchSize"
            },
            "maxCount": {
              "description": "The maximum number of rows to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "minimum": 0,
              "help": "#scrollPolicyOptions.maxCount"
            },
            "scroller": {
              "description": "The CSS selector string to an element used to determine the scroll position as well as the maximum scroll position. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Scroller",
              "value": null,
              "help": "#scrollPolicyOptions.scroller",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "scrollerOffsetBottom": {
              "description": "The bottom offset value (in pixels) used for the Table's external scroller. This value is used to specify the location where the Table's footer region becomes 'sticky' when the 'scroller' attribute is specified.",
              "type": "number|null",
              "displayName": "Scroller Offset Bottom",
              "value": null,
              "help": "#scrollPolicyOptions.scrollerOffsetBottom",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "scrollerOffsetEnd": {
              "description": "The end offset value (in pixels) used for the Table's external scroller. This value is used to specify the location where the Table's frozen 'end' columns (or frozen 'start' columns in RTL) become 'sticky' when the 'scroller' attribute is specified.",
              "type": "number|null",
              "displayName": "Scroller Offset End",
              "value": null,
              "help": "#scrollPolicyOptions.scrollerOffsetEnd",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "scrollerOffsetStart": {
              "description": "The start offset value (in pixels) used for the Table's external scroller. This value is used to specify the location where the Table's frozen 'start' columns (or frozen 'end' columns in RTL) become 'sticky' when the 'scroller' attribute is specified.",
              "type": "number|null",
              "displayName": "Scroller Offset Start",
              "value": null,
              "help": "#scrollPolicyOptions.scrollerOffsetStart",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            },
            "scrollerOffsetTop": {
              "description": "The top offset value (in pixels) used for the Table's external scroller. This value is used to specify the location where the Table's header region becomes 'sticky' when the 'scroller' attribute is specified.",
              "type": "number|null",
              "displayName": "Scroller Offset Top",
              "value": null,
              "help": "#scrollPolicyOptions.scrollerOffsetTop",
              "extension": {
                "themes": {
                  "unsupportedThemes": [
                    "Alta"
                  ]
                }
              }
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the scroll position of the table. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "#scrollPosition",
          "properties": {
            "columnIndex": {
              "description": "The zero-based index of the cell at the origin of the table.",
              "type": "number",
              "displayName": "Column Index"
            },
            "columnKey": {
              "description": "The key of the column. This corresponds to the identifier of the column specified in columns. If the column does not exists then the value is ignored.",
              "type": "any",
              "displayName": "Column Key"
            },
            "offsetX": {
              "description": "The horizontal offset in pixels relative to the column identified by columnKey/columnIndex.",
              "type": "number",
              "displayName": "Offset X"
            },
            "offsetY": {
              "description": "The vertical offset in pixels relative to the row identified by rowKey/rowIndex.",
              "type": "number",
              "displayName": "Offset Y"
            },
            "rowIndex": {
              "description": "The zero-based index of the cell at the origin of the table. If scrollPolicy is set to 'loadMoreOnScroll and the row index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the table is reached and there are no more rows to fetch.",
              "type": "number",
              "displayName": "Row Index"
            },
            "rowKey": {
              "description": "The key of the row. If DataProvider is used for data and the key does not exists in the DataProvider, then the value is ignored. If DataProvider is not used then Table will fetch and scroll until the item is found or the end of the table is reached and there's no more items to fetch.",
              "type": "any",
              "displayName": "Row Key"
            },
            "x": {
              "description": "The horizontal position in pixels.",
              "type": "number",
              "displayName": "X"
            },
            "y": {
              "description": "The vertical position in pixels.",
              "type": "number",
              "displayName": "Y"
            }
          }
        },
        "scrollToKey": {
          "description": "Specifies the behavior when Table needs to scroll to a position based on an item key.",
          "type": "string|null",
          "displayName": "Scroll To Key",
          "value": "auto",
          "help": "#scrollToKey",
          "enumValues": [
            "always",
            "auto",
            "capability",
            "never"
          ],
          "propertyEditorValues": {
            "always": {
              "description": "Table will scroll to a position based on a row key as long as the key is valid.",
              "displayName": "Always"
            },
            "auto": {
              "description": "The behavior is determined by the component. By default the behavior is the same as \"capability\" except when legacy TableDataSource is used, in which case the behavior is the same as \"always\".",
              "displayName": "Auto"
            },
            "capability": {
              "description": "Table will only scroll to a position based on a row key if either the row has already been fetched or if the associated DataProvider supports 'immediate' iterationSpeed for 'fetchFirst' capability.",
              "displayName": "Capability"
            },
            "never": {
              "description": "Table will not change the scroll position if the request is based on a row key.",
              "displayName": "Never"
            }
          }
        },
        "selectAllControl": {
          "description": "Specifies the visibility of the select all control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Select All Control",
          "value": "visible",
          "help": "#selectAllControl",
          "enumValues": [
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "Select all control is hidden.",
              "displayName": "Hidden"
            },
            "visible": {
              "description": "Select all control is visible.",
              "displayName": "Visible"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "selected": {
          "description": "Specifies the current selected rows and/or columns in the table. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Selected",
          "eventGroup": "common",
          "writeback": true,
          "help": "#selected",
          "properties": {
            "column": {
              "description": "Specifies the current selected columns in the table.",
              "type": "KeySet",
              "displayName": "Column",
              "writeback": true,
              "help": "#selected.column"
            },
            "row": {
              "description": "Specifies the current selected rows in the table.",
              "type": "KeySet",
              "displayName": "Row",
              "writeback": true,
              "help": "#selected.row"
            }
          }
        },
        "selection": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "Use selected attribute instead."
            }
          ],
          "description": "Specifies the current selections in the table. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the row and column selection modes.",
          "type": "Object<string, string>|null",
          "displayName": "Selection Mode",
          "value": null,
          "help": "#selectionMode",
          "properties": {
            "column": {
              "description": "Specifies the selection mode for columns. By default, column selection is disabled.",
              "type": "string",
              "displayName": "Column",
              "help": "#selectionMode.column",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Multiple columns can be selected at the same time.",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "Selection is disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "Only a single column can be selected at a time.",
                  "displayName": "Single"
                }
              }
            },
            "row": {
              "description": "Specifies the selection mode for rows. By default, row selection is disabled.",
              "type": "string",
              "displayName": "Row",
              "help": "#selectionMode.row",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Multiple rows can be selected at the same time.",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "Selection is disabled.",
                  "displayName": "None"
                },
                "single": {
                  "description": "Only a single row can be selected at a time.",
                  "displayName": "Single"
                }
              }
            }
          }
        },
        "selectionRequired": {
          "description": "Specifies whether selection is required on the Table.",
          "type": "boolean",
          "displayName": "Selection Required",
          "value": false,
          "help": "#selectionRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleAddRow": {
              "description": "Provides properties to customize the accessible text for the 'add row' row.",
              "type": "string",
              "help": "#translations.accessibleAddRow"
            },
            "accessibleColumnContext": {
              "description": "Provides properties to customize the accessible context for the column index.",
              "type": "string",
              "help": "#translations.accessibleColumnContext"
            },
            "accessibleColumnFooterContext": {
              "description": "Provides properties to customize the accessible context for the column footer index.",
              "type": "string",
              "help": "#translations.accessibleColumnFooterContext"
            },
            "accessibleColumnHeaderContext": {
              "description": "Provides properties to customize the accessible context for the column header index.",
              "type": "string",
              "help": "#translations.accessibleColumnHeaderContext"
            },
            "accessibleColumnsSpan": {
              "description": "Provides properties to customize the accessible text when a cell spans multiple columns.",
              "type": "string",
              "help": "#translations.accessibleColumnsSpan"
            },
            "accessibleContainsControls": {
              "description": "Provides properties to customize the accessible text when a cell contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "accessibleRowContext": {
              "description": "Provides properties to customize the accessible context for the row index.",
              "type": "string",
              "help": "#translations.accessibleRowContext"
            },
            "accessibleSortAscending": {
              "description": "Provides properties to customize the accessible text when a header is sorted ascending.",
              "type": "string",
              "help": "#translations.accessibleSortAscending"
            },
            "accessibleSortDescending": {
              "description": "Provides properties to customize the accesible text when a header is sorted descending.",
              "type": "string",
              "help": "#translations.accessibleSortDescending"
            },
            "accessibleSortable": {
              "description": "Provides properties to customize the accessible text when a header is able to be sorted.",
              "type": "string",
              "help": "#translations.accessibleSortable"
            },
            "accessibleStateSelected": {
              "description": "Provides properties to customize the accessible context when an item is selected.",
              "type": "string",
              "help": "#translations.accessibleStateSelected"
            },
            "accessibleStateUnselected": {
              "description": "Provides properties to customize the accessible context when an item is unselected.",
              "type": "string",
              "help": "#translations.accessibleStateUnselected"
            },
            "accessibleSummaryEstimate": {
              "description": "Provides properties to customize the accessible context read when the exact row count is unknown.",
              "type": "string",
              "help": "#translations.accessibleSummaryEstimate"
            },
            "accessibleSummaryExact": {
              "description": "Provides properties to customize the accessible context read when the exact row count is known.",
              "type": "string",
              "help": "#translations.accessibleSummaryExact"
            },
            "labelAccSelectionAffordanceBottom": {
              "description": "Label for the bottom selection affordance on touch devices.",
              "type": "string",
              "help": "#translations.labelAccSelectionAffordanceBottom"
            },
            "labelAccSelectionAffordanceTop": {
              "description": "Label for the top selection affordance on touch devices.",
              "type": "string",
              "help": "#translations.labelAccSelectionAffordanceTop"
            },
            "labelColumnWidth": {
              "description": "Provides properties to customize the resize column input label.",
              "type": "string",
              "help": "#translations.labelColumnWidth"
            },
            "labelDisableNonContiguousSelection": {
              "description": "Provides properties to customize the context menu label for exiting non-contiguous selection.",
              "type": "string",
              "help": "#translations.labelDisableNonContiguousSelection"
            },
            "labelEditRow": {
              "description": "Edit row label.",
              "type": "string",
              "help": "#translations.labelEditRow"
            },
            "labelEnableNonContiguousSelection": {
              "description": "Provides properties to customize the context menu label for entering non-contiguous selection.",
              "type": "string",
              "help": "#translations.labelEnableNonContiguousSelection"
            },
            "labelResize": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "11.1.0",
                  "description": "This option has been deprecated. Use labelResizeColumn option."
                }
              ],
              "description": "Provides properties to customize the context menu label for column resize.",
              "type": "string",
              "help": "#translations.labelResize"
            },
            "labelResizeColumn": {
              "description": "Provides properties to customize the context menu label for column resize.",
              "type": "string",
              "help": "#translations.labelResizeColumn"
            },
            "labelResizeColumnDialog": {
              "description": "Provides properties to customize the resize dialog title.",
              "type": "string",
              "help": "#translations.labelResizeColumnDialog"
            },
            "labelResizeDialogApply": {
              "description": "Provides properties to customize the resize dialog apply button label.",
              "type": "string",
              "help": "#translations.labelResizeDialogApply"
            },
            "labelResizePopupCancel": {
              "description": "Provides properties to customize the resize popup cancel button.",
              "type": "string",
              "help": "#translations.labelResizePopupCancel"
            },
            "labelResizePopupSpinner": {
              "description": "Provides properties to customize the resize popup spinner label.",
              "type": "string",
              "help": "#translations.labelResizePopupSpinner"
            },
            "labelResizePopupSubmit": {
              "description": "Provides properties to customize the resize popup submit button.",
              "type": "string",
              "help": "#translations.labelResizePopupSubmit"
            },
            "labelSelectAllRows": {
              "description": "Select all rows label.",
              "type": "string",
              "help": "#translations.labelSelectAllRows"
            },
            "labelSelectAndEditRow": {
              "description": "Select and Edit row label.",
              "type": "string",
              "help": "#translations.labelSelectAndEditRow"
            },
            "labelSelectColum": {
              "description": "Select column label.",
              "type": "string",
              "help": "#translations.labelSelectColum"
            },
            "labelSelectRow": {
              "description": "Select row label.",
              "type": "string",
              "help": "#translations.labelSelectRow"
            },
            "labelSort": {
              "description": "Context menu label for sort.",
              "type": "string",
              "help": "#translations.labelSort"
            },
            "labelSortAsc": {
              "description": "Context menu label and sort icon tooltip for sort ascending.",
              "type": "string",
              "help": "#translations.labelSortAsc"
            },
            "labelSortDsc": {
              "description": "Context menu label and sort icon tooltip for sort descending.",
              "type": "string",
              "help": "#translations.labelSortDsc"
            },
            "msgColumnResizeWidthValidation": {
              "description": "Column resize input width validation.",
              "type": "string",
              "help": "#translations.msgColumnResizeWidthValidation"
            },
            "msgFetchingData": {
              "description": "Fetching data message.",
              "type": "string",
              "help": "#translations.msgFetchingData"
            },
            "msgInitializing": {
              "description": "Table initializing message.",
              "type": "string",
              "help": "#translations.msgInitializing"
            },
            "msgNoData": {
              "description": "No data to display message.",
              "type": "string",
              "help": "#translations.msgNoData"
            },
            "msgScrollPolicyMaxCountDetail": {
              "description": "Warning message detail that maxCount has been reached for scrollPolicy=loadMoreOnScroll.",
              "type": "string",
              "help": "#translations.msgScrollPolicyMaxCountDetail"
            },
            "msgScrollPolicyMaxCountSummary": {
              "description": "Warning message summary that maxCount has been reached for scrollPolicy=loadMoreOnScroll.",
              "type": "string",
              "help": "#translations.msgScrollPolicyMaxCountSummary"
            },
            "msgStatusSortAscending": {
              "description": "Sort ascending status notification for accessibility.",
              "type": "string",
              "help": "#translations.msgStatusSortAscending"
            },
            "msgStatusSortDescending": {
              "description": "Sort descending status notification for accessibility.",
              "type": "string",
              "help": "#translations.msgStatusSortDescending"
            },
            "tooltipRequired": {
              "description": "Used for the default required icon tooltip.",
              "type": "string",
              "help": "#translations.tooltipRequired"
            }
          }
        },
        "verticalGridVisible": {
          "description": "Specifies the visibility of the vertical gridlines. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Vertical Grid Visible",
          "value": "auto",
          "help": "#verticalGridVisible",
          "enumValues": [
            "auto",
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by display attribute.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Vertical gridlines are disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Vertical gridlines are enabled.",
              "displayName": "Enabled"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDataForVisibleRow": {
          "description": "Return the row data for a rendered row in the table.",
          "help": "#getDataForVisibleRow",
          "params": [
            {
              "name": "rowIndex",
              "description": "row index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refresh the table.",
          "help": "#refresh",
          "return": "void"
        },
        "refreshRow": {
          "description": "Refresh a row in the table.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "Use DataProvider mutations and update events instead."
            }
          ],
          "help": "#refreshRow",
          "params": [
            {
              "name": "rowIdx",
              "description": "Index of the row to refresh.",
              "type": "number"
            }
          ],
          "return": "Promise<boolean>"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "\"add\"|\"remove\"|\"update\""
            },
            "element": {
              "description": "The target of animation. For row animations this will be the cell contents wrapped in an HTML div element.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "\"add\"|\"remove\"|\"update\""
            },
            "element": {
              "description": "The target of animation. For row animations this will be the cell contents wrapped in a div.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCurrentRow": {
          "description": "Triggered before the current row is changed.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeCurrentRow",
          "detail": {
            "currentRow": {
              "description": "The new current row.",
              "type": "object"
            },
            "previousCurrentRow": {
              "description": "The previous current row.",
              "type": "object"
            }
          }
        },
        "ojBeforeRowAddEnd": {
          "description": "Triggered before the table is going to exit the insert row mode. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeRowAddEnd",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously. The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "cancelAdd": {
              "description": "true if the insert should be negated based on actions (i.e. escape key).",
              "type": "boolean"
            }
          }
        },
        "ojBeforeRowEdit": {
          "description": "Triggered before the table is going to enter edit mode.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeRowEdit",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously. The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "rowContext": {
              "description": "The rowContext of the row that editing is going to be performed on.",
              "type": "object",
              "properties": {
                "componentElement": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use HTMLDocument methods to retrieve this element."
                    }
                  ],
                  "description": "A reference to the Table root element.",
                  "type": "Element"
                },
                "parentElement": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use HTMLDocument methods to retrieve this element."
                    }
                  ],
                  "description": "Empty rendered TR element.",
                  "type": "Element"
                },
                "datasource": {
                  "description": "The \"data\" attribute of the Table.",
                  "type": "any"
                },
                "mode": {
                  "description": "The mode of the row. It can be \"edit\" or \"navigation\".",
                  "type": "\"edit\"|\"navigation\""
                },
                "item": {
                  "description": "The Item for the row being edited.",
                  "type": "Item<K, D>"
                },
                "status": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use rowContext.item instead."
                    }
                  ],
                  "description": "Contains the rowIndex, rowKey, and currentRow",
                  "type": "any"
                }
              }
            }
          }
        },
        "ojBeforeRowEditEnd": {
          "description": "Triggered before the table is going to exit edit mode. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:beforeRowEditEnd",
          "detail": {
            "accept": {
              "description": "This method can be called with an application-created Promise to cancel this event asynchronously. The Promise should be resolved or rejected to accept or cancel the event, respectively.",
              "type": "function"
            },
            "rowContext": {
              "description": "The rowContext of the edited row.",
              "type": "object",
              "properties": {
                "componentElement": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use HTMLDocument methods to retrieve this element."
                    }
                  ],
                  "description": "A reference to the Table root element.",
                  "type": "Element"
                },
                "parentElement": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use HTMLDocument methods to retrieve this element."
                    }
                  ],
                  "description": "Empty rendered TR element.",
                  "type": "Element"
                },
                "datasource": {
                  "description": "The \"data\" attribute of the Table.",
                  "type": "any"
                },
                "mode": {
                  "description": "The mode of the row. It can be \"edit\" or \"navigation\".",
                  "type": "\"edit\"|\"navigation\""
                },
                "item": {
                  "description": "The Item for the row being edited.",
                  "type": "Item<K, D>"
                },
                "status": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "10.0.0",
                      "description": "Use rowContext.item instead."
                    }
                  ],
                  "description": "Contains the rowIndex, rowKey, and currentRow.",
                  "type": "any"
                }
              }
            },
            "cancelEdit": {
              "description": "true if the edit should be negated based on actions (i.e. escape key).",
              "type": "boolean"
            }
          }
        },
        "ojRowAction": {
          "description": "Triggered when user performs an action gesture on a row.",
          "bubbles": true,
          "help": "#event:rowAction",
          "detail": {
            "context": {
              "description": "The context information about the row where the action gesture is performed on.",
              "type": "object"
            },
            "originalEvent": {
              "description": "The DOM event that triggers the action.",
              "type": "Event"
            }
          }
        },
        "ojSort": {
          "description": "Triggered when a sort is performed on the table.",
          "bubbles": true,
          "cancelable": true,
          "help": "#event:sort",
          "detail": {
            "header": {
              "description": "The key of the header which was sorted on.",
              "type": "string"
            },
            "direction": {
              "description": "The direction of the sort.",
              "type": "'ascending'|'descending'"
            }
          }
        }
      },
      "slots": {
        "headerTemplate": {
          "description": "Named slot for the Table's default header template. The slot content must be a <template> element. The content of the template should not include the <td> element, only what's inside it.",
          "help": "#headerTemplate",
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "data": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HeaderTemplateContext.headerText instead."
                }
              ],
              "description": "The data object for the current header.",
              "type": "any"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            },
            "headerText": {
              "description": "The text for the current header being rendered.",
              "type": "string"
            }
          }
        },
        "cellTemplate": {
          "description": "Named slot for the Table's default cell template. The slot content must be a <template> element. The content of the template should not include the <td> element, only what's inside it.",
          "help": "#cellTemplate",
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current cell being rendered.",
              "type": "any"
            },
            "row": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use CellTemplateContext.item.data instead."
                }
              ],
              "description": "The data for the row contained the current cell being rendered.",
              "type": "any"
            },
            "index": {
              "description": "The zero-based index of the current row during initial rendering. Note the index is not updated in response to row additions and removals.",
              "type": "number"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "key": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use CellTemplateContext.item.key instead."
                }
              ],
              "description": "The key of the current cell being rendered.",
              "type": "any"
            },
            "mode": {
              "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
              "type": "\"edit\"|\"navigation\""
            },
            "item": {
              "description": "The Item for the row being rendered.",
              "type": "Item<K, D>"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            },
            "datasource": {
              "description": "The \"data\" attribute of the Table.",
              "type": "DataProvider<K, D>|null"
            },
            "rowEditable": {
              "description": "On if row is editable, off if editing has been disabled.",
              "type": "\"on\"|\"off\""
            }
          }
        },
        "rowTemplate": {
          "description": "Named slot for the Table's default row template. The slot content must be a <template> element. The content of the template should include the <tr> element.",
          "help": "#rowTemplate",
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "data": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use RowTemplateContext.item.data instead."
                }
              ],
              "description": "The data for the current row being rendered.",
              "type": "any"
            },
            "index": {
              "description": "The zero-based index of the current row during initial rendering. Note the index is not updated in response to row additions and removals.",
              "type": "number"
            },
            "key": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use RowTemplateContext.item.key instead."
                }
              ],
              "description": "The key of the current row being rendered.",
              "type": "any"
            },
            "rowContext": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use Top level RowTemplateContext APIs instead."
                }
              ],
              "description": "Context of the row.",
              "type": "object"
            },
            "mode": {
              "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
              "type": "\"edit\"|\"navigation\""
            },
            "item": {
              "description": "The Item for the row being rendered.",
              "type": "Item<K, D>"
            },
            "editable": {
              "description": "On if row is editable, off if editing has been disabled.",
              "type": "\"on\"|\"off\""
            },
            "datasource": {
              "description": "The \"data\" attribute of the Table.",
              "type": "DataProvider<K, D>|null"
            }
          },
          "extension": {
            "jet": {
              "unsupportedBrowsers": [
                "IE11"
              ]
            }
          }
        },
        "footerTemplate": {
          "description": "Named slot for the Table's default footer template. The slot content must be a <template> element. The content of the template should not include the <td> element, only what's inside it.",
          "help": "#footerTemplate",
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            }
          }
        },
        "addRowTemplate": {
          "description": "Named slot used to render add new row at the top of the table. The slot content must be a <template> element. The content of the template should include the <tr> element.",
          "help": "#addRowTemplate",
          "data": {
            "datasource": {
              "description": "The \"data\" attribute of the Table.",
              "type": "DataProvider<K, D>|null"
            },
            "submitAddRow": {
              "description": "This function can be used to programatically submit or cancel row. Should pass true while canceling submit.",
              "type": "function"
            }
          },
          "extension": {
            "jet": {
              "unsupportedBrowsers": [
                "IE11"
              ]
            }
          }
        },
        "addRowCellTemplate": {
          "description": "Named slot used to render add new row at the top of the table. The slot content must be a <template> element. The content of the template should not include the <td> element, only what's inside it.",
          "help": "#addRowCellTemplate",
          "data": {
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            },
            "datasource": {
              "description": "The \"data\" attribute of the Table.",
              "type": "DataProvider<K, D>|null"
            },
            "submitAddRow": {
              "description": "This function can be used to programatically submit or cancel row. Should pass true while canceling submit.",
              "type": "function"
            }
          },
          "extension": {
            "jet": {
              "unsupportedBrowsers": [
                "IE11"
              ]
            }
          }
        },
        "bottom": {
          "description": "Named slot for the Table's bottom panel where applications can add content such as a paging control. The Table will render the content provided at the bottom of the Table element. The content specified should not include any styling that may conflict with the Table's positioning. Unsupported styling includes, but is not limited to, margins and absolute positioning.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This is an anti-pattern. Please use high-water mark scrolling and page layouts instead."
            }
          ],
          "help": "#bottom"
        },
        "noData": {
          "description": "The noData slot is used to specify the content to display when the table is empty. The slot content must be a <template> element. If not specified then a default no data message will be displayed.",
          "help": "#noData",
          "data": {}
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      },
      "dynamicSlots": {
        "CellTemplateContext": {
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current cell being rendered.",
              "type": "any"
            },
            "row": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use CellTemplateContext.item.data instead."
                }
              ],
              "description": "The data for the row contained the current cell being rendered.",
              "type": "any"
            },
            "index": {
              "description": "The zero-based index of the current row during initial rendering. Note the index is not updated in response to row additions and removals.",
              "type": "number"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "key": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use CellTemplateContext.item.key instead."
                }
              ],
              "description": "The key of the current cell being rendered.",
              "type": "any"
            },
            "mode": {
              "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
              "type": "\"edit\"|\"navigation\""
            },
            "item": {
              "description": "The Item for the row being rendered.",
              "type": "Item<K, D>"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            },
            "datasource": {
              "description": "The \"data\" attribute of the Table.",
              "type": "DataProvider<K, D>|null"
            },
            "rowEditable": {
              "description": "On if row is editable, off if editing has been disabled.",
              "type": "\"on\"|\"off\""
            }
          }
        },
        "FooterTemplateContext": {
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            }
          }
        },
        "HeaderTemplateContext": {
          "data": {
            "componentElement": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HTMLDocument methods to retrieve this element."
                }
              ],
              "description": "The <oj-table> custom element.",
              "type": "Element"
            },
            "data": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "Use HeaderTemplateContext.headerText instead."
                }
              ],
              "description": "The data object for the current header.",
              "type": "any"
            },
            "columnIndex": {
              "description": "The zero-based index of the current column during initial rendering.",
              "type": "number"
            },
            "columnKey": {
              "description": "The key of the current column being rendered.",
              "type": "any"
            },
            "headerText": {
              "description": "The text for the current header being rendered.",
              "type": "string"
            }
          }
        }
      }
    },
    "oj-tag-cloud-item": {
      "name": "oj-tag-cloud-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Tag Cloud Item",
      "implements": [
        "TagCloudItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtagcloud"
        }
      },
      "description": "The oj-tag-cloud-item element is used to declare properties for tag cloud items. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTagCloudItem.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The color of the text. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "#color"
        },
        "label": {
          "description": "The text of the item.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "translatable": true,
          "help": "#label"
        },
        "shortDesc": {
          "description": "The description of the item. This is used for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the item text.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the item text. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "url": {
          "description": "The url this item references.",
          "type": "string",
          "displayName": "Url",
          "value": "",
          "help": "#url"
        },
        "value": {
          "description": "The value of this item is used to scale its font size within the tag cloud.",
          "type": "number|null",
          "displayName": "Value",
          "value": null,
          "help": "#value"
        }
      }
    },
    "oj-tag-cloud": {
      "name": "oj-tag-cloud",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Tag Cloud",
      "implements": [
        "TagCloudElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtagcloud",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-cloud-tag",
          "uxSpecs": [
            "tag-cloud"
          ]
        }
      },
      "description": "A tag cloud is an interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTagCloud.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "layout",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "data": {
          "description": "Specifies the DataProvider for the tag cloud. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "items": {
          "description": "An array of objects defining the data items for the tag cloud items. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "#items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.",
                  "type": "string",
                  "displayName": "Color"
                },
                "id": {
                  "description": "The item id should be set by the application if the DataProvider is not being used. The row key will be used as id in the DataProvider case.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The text of the item.",
                  "type": "string",
                  "displayName": "Label"
                },
                "shortDesc": {
                  "description": "The description of the item. This is used for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the item text.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the item text. Only SVG CSS style properties are supported. The default value comes from the CSS and varies based on theme.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "url": {
                  "description": "The url this item references.",
                  "type": "string",
                  "displayName": "Url"
                },
                "value": {
                  "description": "The value of this item which will be used to scale its font-size within the tag cloud.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "layout": {
          "description": "The layout to use for tag display.",
          "type": "string",
          "displayName": "Layout",
          "value": "rectangular",
          "help": "#layout",
          "enumValues": [
            "cloud",
            "rectangular"
          ],
          "propertyEditorValues": {
            "cloud": {
              "displayName": "Cloud"
            },
            "rectangular": {
              "displayName": "Rectangular"
            }
          }
        },
        "selection": {
          "description": "An array containing the ids of the initially selected data items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this tag cloud.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "#styleDefaults.animationDuration"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "#styleDefaults.hoverBehaviorDelay"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the items.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#styleDefaults.svgStyle"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the tag cloud. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getItem": {
          "description": "Returns information for automation testing verification of a specified item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getItem",
          "params": [
            {
              "name": "index",
              "description": "The index.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getItemCount": {
          "description": "Returns the number of items in the tag cloud data.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getItemCount",
          "return": "number"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the tag cloud. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "TagCloudItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-tag-cloud> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The tag cloud element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "label": {
              "description": "The data label of the hovered item.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "value": {
              "description": "The value of the hovered item.",
              "type": "number"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-text-area": {
      "name": "oj-text-area",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Text Area",
      "implements": [
        "TextAreaElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-form-control-max-width-sm",
                "oj-form-control-max-width-md"
              ],
              "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-width-sm",
                "oj-form-control-width-md"
              ],
              "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field."
            },
            {
              "styleGroup": [
                "oj-form-control-text-align-right",
                "oj-form-control-text-align-start",
                "oj-form-control-text-align-end"
              ],
              "description": "Classes that help align text of the element."
            },
            {
              "styleGroup": [
                "oj-form-control-full-width"
              ],
              "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-text-input-area",
          "uxSpecs": [
            "input-text"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "form-control-max-width",
          "kind": "set",
          "displayName": "Max Width",
          "description": "In the Redwood theme the default max width of a text field is 100%. These max width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-max-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-max-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the max width for a small field"
            },
            {
              "name": "oj-form-control-max-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the max width for a medium field"
            }
          ]
        },
        {
          "name": "form-control-width",
          "kind": "set",
          "displayName": "Width",
          "description": "In the Redwood theme the default width of a text field is 100%. These width convenience classes are available to create a medium or small field.",
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          },
          "help": "#form-control-width",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-width-sm",
              "kind": "class",
              "displayName": "Small",
              "description": "Sets the width for a small field"
            },
            {
              "name": "oj-form-control-width-md",
              "kind": "class",
              "displayName": "Medium",
              "description": "Sets the width for a medium field"
            }
          ]
        },
        {
          "name": "text-align",
          "kind": "set",
          "displayName": "Text Alignment",
          "description": "Classes that help align text of the element.",
          "help": "#text-align",
          "styleRelation": "exclusive",
          "styleItems": [
            {
              "name": "oj-form-control-text-align-right",
              "kind": "class",
              "displayName": "Align-Right",
              "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers."
            },
            {
              "name": "oj-form-control-text-align-start",
              "kind": "class",
              "displayName": "Align-Start",
              "description": "Aligns the text to the left in LTR and to the right in RTL."
            },
            {
              "name": "oj-form-control-text-align-end",
              "kind": "class",
              "displayName": "Align-End",
              "description": "Aligns the text to the right in LTR and to the left in RTL."
            }
          ]
        },
        {
          "name": "oj-form-control-full-width",
          "kind": "class",
          "displayName": "Full Width",
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space.",
          "help": "#oj-form-control-full-width"
        }
      ],
      "description": "A text area allows the user to enter a multi-line text value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTextArea.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "labelHint",
            "placeholder",
            "rows",
            "maxRows",
            "disabled",
            "required",
            "readonly"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "value"
          ]
        }
      ],
      "properties": {
        "asyncValidators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use the validators property instead for either regular Validators or AsyncValidators."
            }
          ],
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "#asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "#autocomplete",
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "#autofocus"
        },
        "converter": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a converter with an object literal with converter type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated module you need, like ojvalidation-base or ojvalidation-number module.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredConverter"
              ]
            }
          ],
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "#converter"
        },
        "describedBy": {
          "description": "The form component's oj-label automatically sets described-by to make it accessible. It is not meant to be set by application developer.",
          "type": "string",
          "displayName": "Described By",
          "help": "#describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "#disabled"
        },
        "displayOptions": {
          "description": "Display options for auxiliary content that determines whether or not it should be displayed.",
          "type": "object",
          "displayName": "Display Options",
          "help": "#displayOptions",
          "properties": {
            "converterHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'placeholder'|'notewindow'|'none'>",
                    "'placeholder'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary converter hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "help": "#displayOptions.converterHint"
            },
            "helpInstruction": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.0.0",
                  "description": "If you want none, remove help-instruction attribute."
                }
              ],
              "description": "Display options for auxiliary help instruction text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "#displayOptions.helpInstruction"
            },
            "messages": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'inline'|'notewindow'|'none'>",
                    "'inline'",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary message text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "help": "#displayOptions.messages"
            },
            "validatorHint": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "9.1.0",
                  "description": "These types are no longer supported. They are used for the Alta theme only. The Redwood theme uses 'display'|'none' and the user-assistance-density attribute.",
                  "target": "propertyType",
                  "value": [
                    "Array<'notewindow'|'none'>",
                    "'notewindow'"
                  ]
                }
              ],
              "description": "Display options for auxiliary validator hint text that determines whether it should be displayed.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "help": "#displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "#help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "#help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "#helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "#helpHints.definition"
            },
            "source": {
              "description": "Help source URL associated with the component.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "#helpHints.source"
            }
          }
        },
        "labelEdge": {
          "description": "Defines how the label of a component is created. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Edge",
          "help": "#labelEdge",
          "enumValues": [
            "inside",
            "none",
            "provided"
          ],
          "propertyEditorValues": {
            "inside": {
              "description": "The component creates the label using the label-hint attribute.",
              "displayName": "Inside"
            },
            "none": {
              "description": "The component will not have a label, regardless of whether it's in an oj-form-layout or not.",
              "displayName": "None"
            },
            "provided": {
              "description": "Label is provided by the parent if the parent is an oj-form-layout.",
              "displayName": "Provided"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "#labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "#labelledBy"
        },
        "length": {
          "description": "An object whose properties describe the maximum length attributes.",
          "type": "object",
          "displayName": "Length",
          "help": "#length",
          "properties": {
            "countBy": {
              "description": "Specifies the manner in which the text area characters has to be counted.",
              "type": "string",
              "displayName": "Count By",
              "value": "codePoint",
              "help": "#length.countBy",
              "enumValues": [
                "codePoint",
                "codeUnit"
              ],
              "propertyEditorValues": {
                "codePoint": {
                  "description": "Uses code point to calculate the text length",
                  "displayName": "Code Point"
                },
                "codeUnit": {
                  "description": "Uses code unit to calculate the text length",
                  "displayName": "Code Unit"
                }
              }
            },
            "counter": {
              "description": "The type of counter to display.",
              "type": "string",
              "displayName": "Counter",
              "value": "none",
              "help": "#length.counter",
              "enumValues": [
                "none",
                "remaining"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "The remaining characters count is not displayed.",
                  "displayName": "None"
                },
                "remaining": {
                  "description": "The remaining characters count is displayed.",
                  "displayName": "Remaining"
                }
              }
            },
            "max": {
              "description": "Specifies the maximum number of characters to be entered in the text area.",
              "type": "number|null",
              "displayName": "Max",
              "value": null,
              "help": "#length.max"
            }
          }
        },
        "maxRows": {
          "description": "Specifies the maximum number of visible text lines of the textarea.",
          "type": "number",
          "displayName": "Max Rows",
          "value": 0,
          "help": "#maxRows"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "#messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "#name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "translatable": true,
          "help": "#placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "#rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "#readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "#required"
        },
        "resizeBehavior": {
          "description": "Specifies the resize behavior, based upon native browser support. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Resize Behavior",
          "value": "none",
          "help": "#resizeBehavior",
          "enumValues": [
            "both",
            "horizontal",
            "none",
            "vertical"
          ],
          "propertyEditorValues": {
            "both": {
              "description": "The textarea will be interactively resizable horizontally and vertically.",
              "displayName": "Both"
            },
            "horizontal": {
              "description": "The textarea will be resizable in the horizontal direction only.",
              "displayName": "Horizontal"
            },
            "none": {
              "description": "The textarea will not be interactively resizable.",
              "displayName": "None"
            },
            "vertical": {
              "description": "The textarea will be resizable in the vertical direction only.",
              "displayName": "Vertical"
            }
          }
        },
        "rows": {
          "description": "Specifies the visible number of lines in the text area.",
          "type": "number",
          "displayName": "Rows",
          "help": "#rows"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleMaxLengthExceeded": {
              "description": "Message to announce to AT via aria-live when the length.max is exceeded.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthExceeded"
            },
            "accessibleMaxLengthRemaining": {
              "description": "Message to annnouce to AT via aria-live for the remaining character count.",
              "type": "string",
              "help": "#translations.accessibleMaxLengthRemaining"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components.",
              "type": "object",
              "help": "#translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components.",
                  "type": "string",
                  "help": "#translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option.",
              "type": "object",
              "help": "#translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error.",
                  "type": "string",
                  "help": "#translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageDetail"
                },
                "messageSummary": {
                  "status": [
                    {
                      "type": "deprecated",
                      "since": "14.0.0",
                      "description": "This is deprecated because in the Redwood design system form components do not show validator summaries, so this is no longer needed."
                    }
                  ],
                  "description": "Message text for summarizing a required validation error.",
                  "type": "string",
                  "help": "#translations.required.messageSummary"
                }
              }
            }
          }
        },
        "userAssistanceDensity": {
          "description": "Specifies the density of the form component's user assistance presentation.",
          "type": "string",
          "displayName": "User Assistance Density",
          "value": "reflow",
          "help": "#userAssistanceDensity",
          "enumValues": [
            "compact",
            "efficient",
            "reflow"
          ],
          "propertyEditorValues": {
            "compact": {
              "description": "Messages, help, hints, and required will not be shown inline; they will show in a mode that keeps the screen more compact, like a popup for the messages, and a required icon to indicate Required.",
              "displayName": "Compact"
            },
            "efficient": {
              "description": "Messages, help, hints, and required are all shown inline under the field with reserved space.",
              "displayName": "Efficient"
            },
            "reflow": {
              "description": "Messages, help, hints, and required are all shown inline under the field with no reserved space.",
              "displayName": "Reflow"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Defining a validator with an object literal with validator type and its options (aka JSON format) has been deprecated and does nothing. If needed, you can make the JSON format work again by importing the deprecated ojvalidation module you need, like ojvalidation-base.",
              "target": "propertyType",
              "value": [
                "oj.Validation.RegisteredValidator"
              ]
            }
          ],
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "#validators"
        },
        "value": {
          "description": "The value of the component.",
          "type": "any",
          "displayName": "Value",
          "eventGroup": "common",
          "value": null,
          "writeback": true,
          "help": "#value"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "#reset",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "#showMessages",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "#validate",
          "return": "Promise<string>"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-thematic-map-area": {
      "name": "oj-thematic-map-area",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Thematic Map Area",
      "implements": [
        "ThematicMapAreaElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "description": "The oj-thematic-map-area element is used to declare properties for thematic map areas. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojThematicMapArea.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas. By default, the label is used as the area category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The area color.",
          "type": "string",
          "displayName": "Color",
          "value": null,
          "format": "color",
          "help": "#color"
        },
        "label": {
          "description": "Text used for the area's label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the area label.",
          "type": "object",
          "displayName": "Label Style",
          "value": null,
          "help": "#labelStyle"
        },
        "location": {
          "description": "An identifier corresponding to a mapProvider \"Feature\" geo object that this area is associated with.",
          "type": "string",
          "displayName": "Location",
          "value": "",
          "help": "#location"
        },
        "opacity": {
          "description": "The area opacity.",
          "type": "number",
          "displayName": "Opacity",
          "value": 1,
          "maximum": 1,
          "minimum": 0,
          "help": "#opacity"
        },
        "selectable": {
          "description": "Specifies whether or not the area will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the area's tooltip.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the area.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the area. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        }
      }
    },
    "oj-thematic-map-link": {
      "name": "oj-thematic-map-link",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Thematic Map Link",
      "implements": [
        "ThematicMapLinkElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "styleVariables": [
        {
          "description": "Thematic map link color",
          "name": "oj-thematic-map-link-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "The oj-thematic-map-link element is used to declare properties for thematic map links. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojThematicMapLink.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links. By default, the label is used as the link category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The link color.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "#color"
        },
        "endLocation": {
          "description": "An object used to determine the end point of the link.",
          "type": "object",
          "displayName": "End Location",
          "value": {},
          "help": "#endLocation",
          "properties": {
            "id": {
              "description": "The marker or area id to be used as the end point.",
              "type": "any",
              "displayName": "Id",
              "help": "#endLocation.id"
            },
            "location": {
              "description": "An identifier corresponding to a mapProvider \"Feature\" geo object to be used as the end point.",
              "type": "string",
              "displayName": "Location",
              "help": "#endLocation.location"
            },
            "x": {
              "description": "The x coordinate which can represent latitude of the end point.",
              "type": "number",
              "displayName": "X",
              "help": "#endLocation.x"
            },
            "y": {
              "description": "The y coordinate which can represent longitude of the end point.",
              "type": "number",
              "displayName": "Y",
              "help": "#endLocation.y"
            }
          }
        },
        "selectable": {
          "description": "Specifies whether or not the link will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the link's tooltip.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "startLocation": {
          "description": "An object used to determine the start point of the link.",
          "type": "object",
          "displayName": "Start Location",
          "value": {},
          "help": "#startLocation",
          "properties": {
            "id": {
              "description": "The marker id to be used as the start point.",
              "type": "any",
              "displayName": "Id",
              "help": "#startLocation.id"
            },
            "location": {
              "description": "An identifier corresponding to a mapProvider \"Feature\" geo object to be used as the start point.",
              "type": "string",
              "displayName": "Location",
              "help": "#startLocation.location"
            },
            "x": {
              "description": "The x coordinate which can represent latitude of the start point.",
              "type": "number",
              "displayName": "X",
              "help": "#startLocation.x"
            },
            "y": {
              "description": "The y coordinate which can represent longitude of the start point.",
              "type": "number",
              "displayName": "Y",
              "help": "#startLocation.y"
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the link.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the link. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "width": {
          "description": "The link width in pixels.",
          "type": "number",
          "displayName": "Width",
          "value": 2,
          "units": "pixels",
          "help": "#width"
        }
      }
    },
    "oj-thematic-map-marker": {
      "name": "oj-thematic-map-marker",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Thematic Map Marker",
      "implements": [
        "ThematicMapMarkerElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "styleVariables": [
        {
          "description": "Thematic map marker background color",
          "name": "oj-thematic-map-marker-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Thematic map marker border color",
          "name": "oj-thematic-map-marker-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "The oj-thematic-map-marker element is used to declare properties for thematic map markers. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojThematicMapMarker.html",
      "properties": {
        "borderColor": {
          "description": "The marker border color.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "#borderColor"
        },
        "borderStyle": {
          "description": "The marker border style.",
          "type": "string",
          "displayName": "Border Style",
          "help": "#borderStyle",
          "enumValues": [
            "none",
            "solid"
          ],
          "propertyEditorValues": {
            "none": {
              "displayName": "None"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "borderWidth": {
          "description": "The marker border width in pixels.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "#borderWidth"
        },
        "categories": {
          "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers. By default, the label is used as the marker category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The marker color.",
          "type": "string",
          "displayName": "Color",
          "value": null,
          "format": "color",
          "help": "#color"
        },
        "height": {
          "description": "The marker height in pixels.",
          "type": "number",
          "displayName": "Height",
          "units": "pixels",
          "help": "#height"
        },
        "label": {
          "description": "Text used for the marker's label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelPosition": {
          "description": "Determines the label position relative to the marker.",
          "type": "string",
          "displayName": "Label Position",
          "value": "center",
          "help": "#labelPosition",
          "enumValues": [
            "bottom",
            "center",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "center": {
              "displayName": "Center"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the marker label.",
          "type": "object",
          "displayName": "Label Style",
          "value": null,
          "help": "#labelStyle"
        },
        "location": {
          "description": "An identifier corresponding to a mapProvider \"Feature\" geo object that this marker is associated with.",
          "type": "string",
          "displayName": "Location",
          "value": "",
          "help": "#location"
        },
        "opacity": {
          "description": "The marker opacity.",
          "type": "number",
          "displayName": "Opacity",
          "maximum": 1,
          "minimum": 0,
          "help": "#opacity"
        },
        "rotation": {
          "description": "The angle in degrees to rotate the marker clockwise around the marker center.",
          "type": "number",
          "displayName": "Rotation",
          "value": 0,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "#rotation"
        },
        "selectable": {
          "description": "Specifies whether or not the marker will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shape": {
          "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
          "type": "string",
          "displayName": "Shape",
          "help": "#shape",
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "ellipse": {
              "displayName": "Ellipse"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the marker's tooltip.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "source": {
          "description": "Specifies a URI for the location of the image resource to use for the marker instead of a built-in shape. The shape attribute is ignored if the source image is defined.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "#source"
        },
        "sourceHover": {
          "description": "An optional URI for the location of the hover image resource. If not defined, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "value": "",
          "help": "#sourceHover"
        },
        "sourceHoverSelected": {
          "description": "An optional URI for the location of the selected image resource on hover. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "value": "",
          "help": "#sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "An optional URI for the location of the selected image. If not defined, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "value": "",
          "help": "#sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the marker.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the marker. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "value": {
          "description": "A data value used to calculate the marker dimensions. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Value",
          "help": "#value"
        },
        "width": {
          "description": "The marker width in pixels.",
          "type": "number",
          "displayName": "Width",
          "units": "pixels",
          "help": "#width"
        },
        "x": {
          "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
          "type": "number|null",
          "displayName": "X",
          "value": null,
          "help": "#x"
        },
        "y": {
          "description": "The y coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
          "type": "number|null",
          "displayName": "Y",
          "value": null,
          "help": "#y"
        }
      }
    },
    "oj-thematic-map": {
      "name": "oj-thematic-map",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Thematic Map",
      "implements": [
        "ThematicMapElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-thematic-map",
          "uxSpecs": [
            "data-visualization-thematic-map"
          ]
        }
      },
      "styleVariables": [
        {
          "description": "Thematic map background color",
          "name": "oj-thematic-map-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Thematic map border color",
          "name": "oj-thematic-map-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A thematic map is an interactive data visualization that displays data corresponding to geographic locations or regions.\n             Applications are required to supply a mapProvider for a valid thematic map.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojThematicMap.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "initialZooming",
            "labelDisplay",
            "panning",
            "zooming",
            "maxZoom",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "mapProvider.geo",
            "mapProvider.propertiesKeys",
            "areaData",
            "markerData",
            "linkData",
            "isolatedItem",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "areaData": {
          "description": "Specifies the DataProvider for the areas of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Area Data",
          "value": null,
          "help": "#areaData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "areas": {
          "description": "An array of objects that define area data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Areas",
          "value": null,
          "help": "#areas",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The area color.",
                  "type": "string",
                  "displayName": "Color"
                },
                "id": {
                  "description": "The identifier for this area. The id should be set by the application if the DataProvider is not being used. The row key will be used as id in the case.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "Text used for the area's label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelStyle": {
                  "description": "The CSS style defining the label style for this area. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this area is associated with.",
                  "type": "string",
                  "displayName": "Location"
                },
                "opacity": {
                  "description": "The area opacity.",
                  "type": "number",
                  "displayName": "Opacity"
                },
                "selectable": {
                  "description": "Specifies whether or not the area will be selectable.",
                  "type": "string",
                  "displayName": "Selectable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the area.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the area. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                }
              }
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the areaTemplate, markerTemplate, or linkTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "focusRenderer": {
          "description": "An optional callback function to update the data item in response to changes in keyboard focus state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Focus Renderer",
          "value": null,
          "help": "#focusRenderer"
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items matching categories in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverRenderer": {
          "description": "An optional callback function to update the node in response to changes in hover state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Hover Renderer",
          "value": null,
          "help": "#hoverRenderer"
        },
        "initialZooming": {
          "description": "Specifies whether the map will zoom to fit the data objects on initial render.",
          "type": "string",
          "displayName": "Initial Zooming",
          "value": "none",
          "help": "#initialZooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "isolatedItem": {
          "description": "The id for the isolated area of this area data layer. If set, only the isolated area will be displayed.",
          "type": "any",
          "displayName": "Isolated Item",
          "value": null,
          "help": "#isolatedItem"
        },
        "labelDisplay": {
          "description": "Specifies how labels for this layer should be displayed.",
          "type": "string",
          "displayName": "Label Display",
          "value": "off",
          "help": "#labelDisplay",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Renders the label if it fits within the area bounds.",
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "labelType": {
          "description": "Specifies which type of map labels to display.",
          "type": "string",
          "displayName": "Label Type",
          "value": "short",
          "help": "#labelType",
          "enumValues": [
            "long",
            "short"
          ],
          "propertyEditorValues": {
            "long": {
              "displayName": "Long"
            },
            "short": {
              "displayName": "Short"
            }
          }
        },
        "linkData": {
          "description": "Specifies the DataProvider for the links of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Link Data",
          "value": null,
          "help": "#linkData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "links": {
          "description": "An array of objects that define the map links. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Links",
          "value": null,
          "help": "#links",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The link color.",
                  "type": "string",
                  "displayName": "Color"
                },
                "endLocation": {
                  "description": "An object used to determine the end point of the link.",
                  "type": "object",
                  "displayName": "End Location",
                  "properties": {
                    "id": {
                      "description": "The marker or area id to be used as the end point.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "location": {
                      "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the end point.",
                      "type": "string",
                      "displayName": "Location"
                    },
                    "x": {
                      "description": "The x coordinate which can represent latitude of the end point.",
                      "type": "number",
                      "displayName": "X"
                    },
                    "y": {
                      "description": "The y coordinate which can represent longitude of the end point.",
                      "type": "number",
                      "displayName": "Y"
                    }
                  }
                },
                "id": {
                  "description": "The identifier for this link. The id should be set by the application if the DataProvider is not being used. The row key will be used as id in the case.",
                  "type": "any",
                  "displayName": "Id"
                },
                "selectable": {
                  "description": "Specifies whether or not the link will be selectable.",
                  "type": "string",
                  "displayName": "Selectable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "startLocation": {
                  "description": "An object used to determine the start point of the link.",
                  "type": "object",
                  "displayName": "Start Location",
                  "properties": {
                    "id": {
                      "description": "The marker id to be used as the start point.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "location": {
                      "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the start point.",
                      "type": "string",
                      "displayName": "Location"
                    },
                    "x": {
                      "description": "The x coordinate which can represent latitude of the start point.",
                      "type": "number",
                      "displayName": "X"
                    },
                    "y": {
                      "description": "The y coordinate which can represent longitude of the start point.",
                      "type": "number",
                      "displayName": "Y"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the link.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the link. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "width": {
                  "description": "The link width in pixels.",
                  "type": "number",
                  "displayName": "Width"
                }
              }
            }
          }
        },
        "mapProvider": {
          "description": "An object defining a custom map.",
          "type": "object",
          "displayName": "Map Provider",
          "help": "#mapProvider",
          "properties": {
            "geo": {
              "description": "An object defining a custom area's coordinates and \"properties\" object. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Geo",
              "value": {},
              "help": "#mapProvider.geo"
            },
            "propertiesKeys": {
              "description": "An object specifying \"properties\" object keys to use for custom area id and label mappings.",
              "type": "object",
              "displayName": "Properties Keys",
              "help": "#mapProvider.propertiesKeys",
              "properties": {
                "id": {
                  "description": "The required name of the \"properties\" key to use as the location id that will map a data item to a map area.",
                  "type": "string",
                  "displayName": "Id",
                  "value": "",
                  "required": true,
                  "help": "#mapProvider.propertiesKeys.id"
                },
                "longLabel": {
                  "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"long\".",
                  "type": "string",
                  "displayName": "Long Label",
                  "value": "",
                  "help": "#mapProvider.propertiesKeys.longLabel"
                },
                "shortLabel": {
                  "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"short\".",
                  "type": "string",
                  "displayName": "Short Label",
                  "value": "",
                  "help": "#mapProvider.propertiesKeys.shortLabel"
                }
              }
            }
          }
        },
        "markerData": {
          "description": "Specifies the DataProvider for the markers of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Marker Data",
          "value": null,
          "help": "#markerData",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "markerZoomBehavior": {
          "description": "Specifies marker behavior on zoom.",
          "type": "string",
          "displayName": "Marker Zoom Behavior",
          "value": "fixed",
          "help": "#markerZoomBehavior",
          "enumValues": [
            "fixed",
            "zoom"
          ],
          "propertyEditorValues": {
            "fixed": {
              "displayName": "Fixed"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "markers": {
          "description": "An array of objects that define marker data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Markers",
          "value": null,
          "help": "#markers",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The marker border color.",
                  "type": "string",
                  "displayName": "Border Color"
                },
                "borderStyle": {
                  "description": "The marker border style.",
                  "type": "string",
                  "displayName": "Border Style",
                  "value": "solid",
                  "enumValues": [
                    "none",
                    "solid"
                  ]
                },
                "borderWidth": {
                  "description": "The marker border width in pixels.",
                  "type": "number",
                  "displayName": "Border Width"
                },
                "categories": {
                  "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The marker color.",
                  "type": "string",
                  "displayName": "Color"
                },
                "height": {
                  "description": "The pixel height for this marker. Note that this attribute will be ignored if a value is provided to calculate marker sizes.",
                  "type": "number",
                  "displayName": "Height"
                },
                "id": {
                  "description": "The identifier for this marker. The id should be set by the application if the DataProvider is not being used. The row key will be used as id in the case.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "Text used for the marker's label.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelPosition": {
                  "description": "Determines the label position relative to the marker.",
                  "type": "string",
                  "displayName": "Label Position",
                  "value": "center",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the marker. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this marker is associated with.",
                  "type": "string",
                  "displayName": "Location"
                },
                "opacity": {
                  "description": "The marker opacity.",
                  "type": "number",
                  "displayName": "Opacity"
                },
                "rotation": {
                  "description": "The angle to rotate the marker in clockwise degrees around the marker center.",
                  "type": "number",
                  "displayName": "Rotation"
                },
                "selectable": {
                  "description": "Specifies whether or not the marker will be selectable.",
                  "type": "string",
                  "displayName": "Selectable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shape": {
                  "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                  "type": "string",
                  "displayName": "Shape",
                  "value": "circle",
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "ellipse": {
                      "displayName": "Ellipse"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "source": {
                  "description": "Specifies an URI specifying the location of the image resource to use for the marker instead of a built-in shape. The shape attribute is ignored if the source image is defined.",
                  "type": "string",
                  "displayName": "Source"
                },
                "sourceHover": {
                  "description": "An optional URI specifying the location of the hover image resource. If not defined, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover"
                },
                "sourceHoverSelected": {
                  "description": "An optional URI specifying the location of the selected image resource on hover. If not defined, the sourceSelected image will be used. If sourceSelected is not defined, then the source image will be used.",
                  "type": "string",
                  "displayName": "Source Hover Selected"
                },
                "sourceSelected": {
                  "description": "An optional URI specifying the location of the selected image. If not defined, the source image will be used.",
                  "type": "string",
                  "displayName": "Source Selected"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the marker.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the marker. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "value": {
                  "description": "A data value used to calculate the marker dimensions based on the range of all the data values and the element size. Markers with negative or zero data values will not be rendered. If specified, this value takes precedence over the width and height attributes.",
                  "type": "number",
                  "displayName": "Value"
                },
                "width": {
                  "description": "The pixel width for this marker. Note that this attribute will be ignored if a value is provided to calculate marker.",
                  "type": "number",
                  "displayName": "Width"
                },
                "x": {
                  "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
                  "type": "number",
                  "displayName": "X"
                },
                "y": {
                  "description": "The y coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
                  "type": "number",
                  "displayName": "Y"
                }
              }
            }
          }
        },
        "maxZoom": {
          "description": "Specifies the maximum zoom level for this element. Must be greater than or equal to 1.0. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max Zoom",
          "value": 6,
          "minimum": 1,
          "help": "#maxZoom"
        },
        "panning": {
          "description": "Specifies whether element panning is allowed.",
          "type": "string",
          "displayName": "Panning",
          "value": "none",
          "help": "#panning",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "renderer": {
          "description": "An optional callback function to stamp custom SVG elements for a data layer. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Renderer",
          "value": null,
          "help": "#renderer"
        },
        "selection": {
          "description": "An array of strings containing the ids of the selected data items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "selectionRenderer": {
          "description": "An optional callback function to update the data item in response to changes in selection state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Selection Renderer",
          "value": null,
          "help": "#selectionRenderer"
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this thematic map. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "areaSvgStyle": {
              "description": "The CSS style object defining the style of the area layer areas.",
              "type": "object",
              "displayName": "Area SVG Style",
              "value": {},
              "help": "#styleDefaults.areaSvgStyle"
            },
            "dataAreaDefaults": {
              "description": "An object defining the default styles for data areas.",
              "type": "object",
              "displayName": "Data Area Defaults",
              "value": {},
              "help": "#styleDefaults.dataAreaDefaults",
              "properties": {
                "borderColor": {
                  "description": "The area stroke color for the area data layer.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#styleDefaults.dataAreaDefaults.borderColor"
                },
                "hoverColor": {
                  "description": "The hover data area border color.",
                  "type": "string",
                  "displayName": "Hover Color",
                  "format": "color",
                  "help": "#styleDefaults.dataAreaDefaults.hoverColor"
                },
                "selectedInnerColor": {
                  "description": "The inner selected data area border color.",
                  "type": "string",
                  "displayName": "Selected Inner Color",
                  "format": "color",
                  "help": "#styleDefaults.dataAreaDefaults.selectedInnerColor"
                },
                "selectedOuterColor": {
                  "description": "The outer selected data area border color.",
                  "type": "string",
                  "displayName": "Selected Outer Color",
                  "format": "color",
                  "help": "#styleDefaults.dataAreaDefaults.selectedOuterColor"
                }
              }
            },
            "dataMarkerDefaults": {
              "description": "An object defining the default styles for data markers.",
              "type": "object",
              "displayName": "Data Marker Defaults",
              "help": "#styleDefaults.dataMarkerDefaults",
              "properties": {
                "borderColor": {
                  "description": "The border color.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#styleDefaults.dataMarkerDefaults.borderColor"
                },
                "borderStyle": {
                  "description": "The border style.",
                  "type": "string",
                  "displayName": "Border Style",
                  "value": "solid",
                  "help": "#styleDefaults.dataMarkerDefaults.borderStyle",
                  "enumValues": [
                    "none",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "none": {
                      "displayName": "None"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "borderWidth": {
                  "description": "The border width in pixels.",
                  "type": "number",
                  "displayName": "Border Width",
                  "value": 0.5,
                  "units": "pixels",
                  "help": "#styleDefaults.dataMarkerDefaults.borderWidth"
                },
                "color": {
                  "description": "The fill color of a marker.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.dataMarkerDefaults.color"
                },
                "height": {
                  "description": "The default marker pixel height.",
                  "type": "number",
                  "displayName": "Height",
                  "value": 8,
                  "units": "pixels",
                  "help": "#styleDefaults.dataMarkerDefaults.height"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the marker label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "value": {},
                  "help": "#styleDefaults.dataMarkerDefaults.labelStyle"
                },
                "opacity": {
                  "description": "The default marker opacity.",
                  "type": "number",
                  "displayName": "Opacity",
                  "value": 1,
                  "maximum": 1,
                  "minimum": 0,
                  "help": "#styleDefaults.dataMarkerDefaults.opacity"
                },
                "shape": {
                  "description": "The default marker shape. Can take the name of a built-in shape or the SVG path commands for a custom shape.",
                  "type": "string",
                  "displayName": "Shape",
                  "value": "circle",
                  "help": "#styleDefaults.dataMarkerDefaults.shape",
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "ellipse": {
                      "displayName": "Ellipse"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "width": {
                  "description": "The default marker pixel width.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 8,
                  "units": "pixels",
                  "help": "#styleDefaults.dataMarkerDefaults.width"
                }
              }
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "#styleDefaults.hoverBehaviorDelay"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the area layer labels.",
              "type": "object",
              "displayName": "Label Style",
              "value": {},
              "help": "#styleDefaults.labelStyle"
            },
            "linkDefaults": {
              "description": "An object defining the default styles for data links.",
              "type": "object",
              "displayName": "Link Defaults",
              "help": "#styleDefaults.linkDefaults",
              "properties": {
                "color": {
                  "description": "The stroke color for links.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.linkDefaults.color"
                },
                "width": {
                  "description": "The stroke width for links in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 2,
                  "units": "pixels",
                  "help": "#styleDefaults.linkDefaults.width"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "tooltipDisplay": {
          "description": "Specifies the tooltip behavior of the thematic map.",
          "type": "string",
          "displayName": "Tooltip Display",
          "value": "auto",
          "help": "#tooltipDisplay",
          "enumValues": [
            "auto",
            "labelAndShortDesc",
            "none",
            "shortDesc"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "labelAndShortDesc": {
              "displayName": "Label And Short Desc"
            },
            "none": {
              "displayName": "None"
            },
            "shortDesc": {
              "displayName": "Short Desc"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "areasRegion": {
              "description": "Used to describe the areas map layer for accessibility.",
              "type": "string",
              "help": "#translations.areasRegion"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "linksRegion": {
              "description": "Used to describe the links map layer for accessibility.",
              "type": "string",
              "help": "#translations.linksRegion"
            },
            "markersRegion": {
              "description": "Used to describe the markers map layer for accessibility.",
              "type": "string",
              "help": "#translations.markersRegion"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        },
        "zooming": {
          "description": "Specifies whether element zooming is allowed.",
          "type": "string",
          "displayName": "Zooming",
          "value": "none",
          "help": "#zooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getArea": {
          "description": "Returns an object for automation testing verification of the specified area.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getArea",
          "params": [
            {
              "name": "index",
              "description": "The index of the area in the areas Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getLink": {
          "description": "Returns an object for automation testing verification of the specified link.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getLink",
          "params": [
            {
              "name": "index",
              "description": "The index of the link in the links Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getMarker": {
          "description": "Returns an object for automation testing verification of the specified marker.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getMarker",
          "params": [
            {
              "name": "index",
              "description": "The index of the marker in the markers Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "areaTemplate": {
          "description": "The areaTemplate slot is used to specify the template for creating areas of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#areaTemplate",
          "preferredContent": [
            "ThematicMapAreaElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current area",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current area",
              "type": "number"
            },
            "key": {
              "description": "The key of the current area",
              "type": "any"
            }
          }
        },
        "markerTemplate": {
          "description": "The markerTemplate slot is used to specify the template for creating markers of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#markerTemplate",
          "preferredContent": [
            "ThematicMapMarkerElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current marker",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current marker",
              "type": "number"
            },
            "key": {
              "description": "The key of the current marker",
              "type": "any"
            }
          }
        },
        "markerContentTemplate": {
          "description": "The markerContentTemplate slot is used to specify custom marker content. The slot content must be a single <template> element.",
          "maxItems": 1,
          "help": "#markerContentTemplate",
          "data": {
            "color": {
              "description": "The color of the data item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The thematic map element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the rendered item.",
              "type": "object"
            },
            "id": {
              "description": "The id of the data item.",
              "type": "any"
            },
            "itemData": {
              "description": "The row data object for the rendered item. This will only be set if an DataProvider is being used.",
              "type": "object|null"
            },
            "label": {
              "description": "The label of the data item.",
              "type": "string"
            },
            "location": {
              "description": "The location of the data item which can be null if x/y are set instead.",
              "type": "string|null"
            },
            "parentElement": {
              "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "previousState": {
              "description": "An object that reflects the previous state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the data item was previously hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the data item was previously selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the data item was previously selected.",
                  "type": "boolean"
                }
              }
            },
            "renderDefaultFocus": {
              "description": "Function for rendering default focus effect for the data item",
              "type": "function"
            },
            "renderDefaultHover": {
              "description": "Function for rendering default hover effect for the data item",
              "type": "function"
            },
            "renderDefaultSelection": {
              "description": "Function for rendering default selection effect for the data item",
              "type": "function"
            },
            "root": {
              "description": "Null on initial rendering or the current data item SVG element.",
              "type": "Element|null"
            },
            "state": {
              "description": "An object that reflects the current state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the data item is currently hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the data item is currently selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the data item is currently selected.",
                  "type": "boolean"
                }
              }
            },
            "x": {
              "description": "The x coordinate of the data item which can be null if location is set instead.",
              "type": "number|null"
            },
            "y": {
              "description": "The y coordinate of the data item which can be null if location is set instead.",
              "type": "number|null"
            }
          }
        },
        "linkTemplate": {
          "description": "The linkTemplate slot is used to specify the template for creating links of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#linkTemplate",
          "preferredContent": [
            "ThematicMapLinkElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current link",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current link",
              "type": "number"
            },
            "key": {
              "description": "The key of the current link",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "componentElement": {
              "description": "The thematic map element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered item or null if the hovered item is not associated with any data.",
              "type": "object|null"
            },
            "id": {
              "description": "The id of the hovered item or null if the hovered item if not associated with any data.",
              "type": "any|null"
            },
            "itemData": {
              "description": "The row data object for the hovered item. This will only be set if an DataProvider is being used.",
              "type": "object|null"
            },
            "label": {
              "description": "The data label of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "location": {
              "description": "The location id of the hovered item which can be null if x/y are set instead.",
              "type": "string|null"
            },
            "locationName": {
              "description": "The location name of the hovered item if location id is set.",
              "type": "string|null"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "tooltip": {
              "description": "The default tooltip string constructed by the element if any.",
              "type": "string"
            },
            "x": {
              "description": "The x coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            },
            "y": {
              "description": "The y coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            }
          }
        }
      }
    },
    "oj-time-axis": {
      "name": "oj-time-axis",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Time Axis",
      "implements": [
        "TimeAxisElement"
      ],
      "type": "core",
      "since": "2.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeaxis",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-time-axis",
          "uxSpecs": [
            "data-visualization-time-axis"
          ]
        }
      },
      "status": [
        {
          "type": "deprecated",
          "since": "12.0.0",
          "description": "Use the Gantt or Timeline components instead."
        }
      ],
      "description": "A time axis displays a range of dates based on specified start and end dates and a time scale.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTimeAxis.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "start",
            "end",
            "scale",
            "style"
          ]
        }
      ],
      "properties": {
        "converter": {
          "description": "An object that converts the labels of the time axis for all 'scale' values'. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "help": "#converter",
          "properties": {
            "days": {
              "description": "A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Days"
            },
            "default": {
              "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Default"
            },
            "hours": {
              "description": "A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Hours"
            },
            "minutes": {
              "description": "A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Minutes"
            },
            "months": {
              "description": "A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Months"
            },
            "quarters": {
              "description": "A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Quarters"
            },
            "seconds": {
              "description": "A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Seconds"
            },
            "weeks": {
              "description": "A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Weeks"
            },
            "years": {
              "description": "A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
              "type": "object",
              "displayName": "Years"
            }
          }
        },
        "end": {
          "description": "The end time of the time axis. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#end"
        },
        "scale": {
          "description": "The time scale used for the time axis.",
          "type": "string|DvtTimeComponentScale",
          "displayName": "Scale",
          "value": null,
          "required": true,
          "help": "#scale",
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "start": {
          "description": "The start time of the time axis. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#start"
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-timeline-item": {
      "name": "oj-timeline-item",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Timeline Item",
      "implements": [
        "TimelineItemElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "7.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline"
        }
      },
      "description": "The oj-timeline-item element is used to declare properties for timeline items. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTimelineItem.html",
      "properties": {
        "background": {
          "description": "The background color of the item bubble. If the item is of type \"duration-event\", then a color stripe will also be rendered in the item bubble. The exact background and stripe color values come from the CSS and vary based on theme. For each item, there is an accessibility requirement for use cases where a color difference is used to convey information. The application is responsible for making sure that the information conveyed is also available in visible text.",
          "type": "string",
          "displayName": "Background",
          "help": "#background",
          "enumValues": [
            "blue",
            "green",
            "orange",
            "purple",
            "red",
            "teal"
          ],
          "propertyEditorValues": {
            "blue": {
              "description": "Blue background (and blue color stripe for \"duration-event\" type item).",
              "displayName": "Blue"
            },
            "green": {
              "description": "Green background (and green color stripe for \"duration-event\" type item).",
              "displayName": "Green"
            },
            "orange": {
              "description": "Orange background (and orange color stripe for \"duration-event\" type item).",
              "displayName": "Orange"
            },
            "purple": {
              "description": "Purple background (and purple color stripe for \"duration-event\" type item).",
              "displayName": "Purple"
            },
            "red": {
              "description": "Red background (and red color stripe for \"duration-event\" type item).",
              "displayName": "Red"
            },
            "teal": {
              "description": "Teal background (and teal color stripe for \"duration-event\" type item).",
              "displayName": "Teal"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "description": {
          "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
          "type": "string",
          "displayName": "Description",
          "value": "",
          "help": "#description"
        },
        "durationFillColor": {
          "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
          "type": "string",
          "displayName": "Duration Fill Color",
          "value": null,
          "help": "#durationFillColor"
        },
        "end": {
          "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "#end"
        },
        "itemType": {
          "description": "The item type for the bubble. If not specified, defaults to auto behavior (event item-type if end date not specified, duration-bar if end date specified).",
          "type": "string",
          "displayName": "Item Type",
          "value": "auto",
          "help": "#itemType",
          "enumValues": [
            "auto",
            "duration-bar",
            "duration-event",
            "event"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "event item-type if end date not specified, duration-bar if end date specified.",
              "displayName": "Auto"
            },
            "duration-bar": {
              "description": "item bubble with a bar on the time-axis that matches the duration of the event using the start/end dates",
              "displayName": "Duration-bar"
            },
            "duration-event": {
              "description": "item bubble with width equal to the duration and edges of the event matching the start/end date (only available on horizontal timeline)",
              "displayName": "Duration-event"
            },
            "event": {
              "description": "item bubble using only the start date",
              "displayName": "Event"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "label": {
          "description": "The label text displayed on the timeline item. If not specified, no label will be shown.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "seriesId": {
          "description": "The id for the series the item belongs to. If no id is specified, the item will be added to the default series.",
          "type": "string",
          "displayName": "Series Id",
          "help": "#seriesId"
        },
        "shortDesc": {
          "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": null,
          "help": "#shortDesc"
        },
        "start": {
          "description": "The start time of this timeline item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "#start"
        },
        "svgStyle": {
          "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "help": "#svgStyle"
        },
        "thumbnail": {
          "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Thumbnail",
          "value": "",
          "help": "#thumbnail"
        }
      }
    },
    "oj-timeline-series": {
      "name": "oj-timeline-series",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Timeline Series",
      "implements": [
        "TimelineSeriesElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "7.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline"
        }
      },
      "description": "The oj-timeline-series element is used to declare properties for timeline series. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTimelineSeries.html",
      "properties": {
        "emptyText": {
          "description": "The text of an empty timeline series.",
          "type": "string",
          "displayName": "Empty Text",
          "help": "#emptyText"
        },
        "itemLayout": {
          "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
          "type": "string",
          "displayName": "Item Layout",
          "value": "auto",
          "help": "#itemLayout",
          "enumValues": [
            "auto",
            "bottomToTop",
            "topToBottom"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "bottomToTop": {
              "displayName": "Bottom To Top"
            },
            "topToBottom": {
              "displayName": "Top To Bottom"
            }
          }
        },
        "label": {
          "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "svgStyle": {
          "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        }
      }
    },
    "oj-timeline": {
      "name": "oj-timeline",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Timeline",
      "implements": [
        "TimelineElement"
      ],
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-timeline"
        }
      },
      "description": "A timeline is an interactive data visualization that displays a series of events in chronological order.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTimeline.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "start",
            "end",
            "orientation",
            "majorAxis.scale",
            "minorAxis.scale",
            "minorAxis.zoomOrder",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "data": {
          "description": "Specifies the data provider for the timeline. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dnd": {
          "description": "Enables drag and drop functionality.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "move": {
              "description": "Defines a subset of high level configurations for moving elements to another location within the timeline.",
              "type": "object",
              "displayName": "Move",
              "help": "#dnd.move",
              "properties": {
                "items": {
                  "description": "Enable or disable moving items to a different location within the same timeline series.",
                  "type": "string",
                  "displayName": "Items",
                  "value": "disabled",
                  "help": "#dnd.move.items",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Disable moving items",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enable moving items",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "end": {
          "description": "The end time of the timeline. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#end"
        },
        "itemDefaults": {
          "description": "Specifies default properties for items in the Timeline.",
          "type": "object",
          "displayName": "Item Defaults",
          "help": "#itemDefaults",
          "properties": {
            "feelers": {
              "description": "Hide or show item feelers",
              "type": "string",
              "displayName": "Feelers",
              "value": "off",
              "help": "#itemDefaults.feelers",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "description": "Hide feelers",
                  "displayName": "Off"
                },
                "on": {
                  "description": "Show feelers",
                  "displayName": "On"
                }
              }
            },
            "resizable": {
              "description": "Enable or disable resizing of items",
              "type": "string",
              "displayName": "Resizable",
              "value": "disabled",
              "help": "#itemDefaults.resizable",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "description": "Disable resize items",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enable resize items",
                  "displayName": "Enabled"
                }
              }
            }
          }
        },
        "majorAxis": {
          "description": "An object defining the optional timeline major axis.",
          "type": "object",
          "displayName": "Major Axis",
          "help": "#majorAxis",
          "properties": {
            "converter": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "11.0.0",
                  "description": "this value will be removed in the future",
                  "target": "propertyType",
                  "value": [
                    "oj.Converter<string>"
                  ]
                }
              ],
              "description": "An object that converts the labels of the major axis for all 'scale' values'. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "help": "#majorAxis.converter",
              "properties": {
                "days": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Days"
                },
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Default"
                },
                "hours": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Hours"
                },
                "minutes": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Minutes"
                },
                "months": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Months"
                },
                "quarters": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Quarters"
                },
                "seconds": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Seconds"
                },
                "weeks": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Weeks"
                },
                "years": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Years"
                }
              }
            },
            "scale": {
              "description": "Specifies the time scale used for the major axis.",
              "type": "string|DvtTimeComponentScale",
              "displayName": "Scale",
              "value": null,
              "help": "#majorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the major axis.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#majorAxis.svgStyle"
            }
          }
        },
        "minorAxis": {
          "description": "An object defining the timeline minor axis.",
          "type": "object",
          "displayName": "Minor Axis",
          "help": "#minorAxis",
          "properties": {
            "converter": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "11.0.0",
                  "description": "this value will be removed in the future",
                  "target": "propertyType",
                  "value": [
                    "oj.Converter<string>"
                  ]
                }
              ],
              "description": "An object that converts the labels of the minor axis for all 'scale' values. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "help": "#minorAxis.converter",
              "properties": {
                "days": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'days' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Days"
                },
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Default"
                },
                "hours": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'hours' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Hours"
                },
                "minutes": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'minutes' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Minutes"
                },
                "months": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'months' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Months"
                },
                "quarters": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'quarters' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Quarters"
                },
                "seconds": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'seconds' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Seconds"
                },
                "weeks": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'weeks' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Weeks"
                },
                "years": {
                  "description": "A converter (an instance that duck types Converter) used to format the 'years' scale. If not specified, the default converter will be used for this scale. See also DateTimeConverter.",
                  "type": "object",
                  "displayName": "Years"
                }
              }
            },
            "scale": {
              "description": "Specifies the time scale used for the minor axis.",
              "type": "string|DvtTimeComponentScale",
              "displayName": "Scale",
              "value": null,
              "required": true,
              "help": "#minorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the minor axis.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#minorAxis.svgStyle"
            },
            "zoomOrder": {
              "description": "An array of scales used for zooming. See the Help documentation for more information.",
              "type": "Array<(string|DvtTimeComponentScale)>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "#minorAxis.zoomOrder"
            }
          }
        },
        "orientation": {
          "description": "The orientation of the element.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "#orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "overview": {
          "description": "An object defining the optional timeline overview.",
          "type": "object",
          "displayName": "Overview",
          "help": "#overview",
          "properties": {
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "#overview.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the overview.",
              "type": "object",
              "displayName": "SVG Style",
              "value": {},
              "help": "#overview.svgStyle"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the timeline. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "#referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "description": "The label value of this reference object. If not specified, no reference object label will be shown.",
                  "type": "string",
                  "displayName": "Label"
                },
                "value": {
                  "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on the required string formats.",
                  "type": "string",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "selection": {
          "description": "An array of strings containing the ids of the initially selected items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "series": {
          "description": "An array of objects defining each timeline series. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise",
          "displayName": "Series",
          "value": null,
          "help": "#series",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "emptyText": {
                  "description": "The text of an empty timeline series.",
                  "type": "string",
                  "displayName": "Empty Text"
                },
                "id": {
                  "description": "The identifier for the timeline series.",
                  "type": "string",
                  "displayName": "Id"
                },
                "itemLayout": {
                  "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
                  "type": "string",
                  "displayName": "Item Layout",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "bottomToTop",
                    "topToBottom"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "bottomToTop": {
                      "displayName": "Bottom To Top"
                    },
                    "topToBottom": {
                      "displayName": "Top To Bottom"
                    }
                  }
                },
                "items": {
                  "description": "An array of items. If not specified, no data will be shown in this series.",
                  "type": "Array<Object>",
                  "displayName": "Items",
                  "properties": {
                    "background": {
                      "description": "The background color of the item bubble. If the item is of type \"duration-event\", then a color stripe will also be rendered in the item bubble. The exact background and stripe color values come from the CSS and vary based on theme. For each item, there is an accessibility requirement for use cases where a color difference is used to convey information. The application is responsible for making sure that the information conveyed is also available in visible text.",
                      "type": "string",
                      "displayName": "Background",
                      "enumValues": [
                        "blue",
                        "green",
                        "orange",
                        "purple",
                        "red",
                        "teal"
                      ],
                      "propertyEditorValues": {
                        "blue": {
                          "description": "Blue background (and blue color stripe for \"duration-event\" type item).",
                          "displayName": "Blue"
                        },
                        "green": {
                          "description": "Green background (and green color stripe for \"duration-event\" type item).",
                          "displayName": "Green"
                        },
                        "orange": {
                          "description": "Orange background (and orange color stripe for \"duration-event\" type item).",
                          "displayName": "Orange"
                        },
                        "purple": {
                          "description": "Purple background (and purple color stripe for \"duration-event\" type item).",
                          "displayName": "Purple"
                        },
                        "red": {
                          "description": "Red background (and red color stripe for \"duration-event\" type item).",
                          "displayName": "Red"
                        },
                        "teal": {
                          "description": "Teal background (and teal color stripe for \"duration-event\" type item).",
                          "displayName": "Teal"
                        }
                      },
                      "extension": {
                        "themes": {
                          "unsupportedThemes": [
                            "Alta"
                          ]
                        }
                      }
                    },
                    "description": {
                      "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                      "type": "string",
                      "displayName": "Description",
                      "value": ""
                    },
                    "durationFillColor": {
                      "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                      "type": "string",
                      "displayName": "Duration Fill Color",
                      "value": null
                    },
                    "end": {
                      "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "End",
                      "value": "",
                      "format": "date-time"
                    },
                    "id": {
                      "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                      "type": "any",
                      "displayName": "Id"
                    },
                    "itemType": {
                      "description": "The item type for the bubble. If not specified, defaults to auto behavior (event item-type if end date not specified, duration-bar if end date specified).",
                      "type": "string",
                      "displayName": "Item Type",
                      "value": "auto",
                      "enumValues": [
                        "auto",
                        "duration-bar",
                        "duration-event",
                        "event"
                      ],
                      "propertyEditorValues": {
                        "auto": {
                          "description": "event item-type if end date not specified, duration-bar if end date specified.",
                          "displayName": "Auto"
                        },
                        "duration-bar": {
                          "description": "item bubble with a bar on the time-axis that matches the duration of the event using the start/end dates",
                          "displayName": "Duration-bar"
                        },
                        "duration-event": {
                          "description": "item bubble with width equal to the duration and edges of the event matching the start/end date (only available on horizontal timeline)",
                          "displayName": "Duration-event"
                        },
                        "event": {
                          "description": "item bubble using only the start date",
                          "displayName": "Event"
                        }
                      },
                      "extension": {
                        "themes": {
                          "unsupportedThemes": [
                            "Alta"
                          ]
                        }
                      }
                    },
                    "shortDesc": {
                      "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string|function",
                      "displayName": "Short Desc",
                      "value": null
                    },
                    "start": {
                      "description": "The start time of this timeline item. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Start",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
                      "type": "object",
                      "displayName": "SVG Style"
                    },
                    "thumbnail": {
                      "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Thumbnail",
                      "value": ""
                    },
                    "title": {
                      "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                      "type": "string",
                      "displayName": "Title"
                    }
                  }
                },
                "label": {
                  "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
                  "type": "string",
                  "displayName": "Label",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style",
                  "value": {}
                }
              }
            }
          }
        },
        "start": {
          "description": "The start time of the timeline. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "required": true,
          "format": "date-time",
          "help": "#start"
        },
        "styleDefaults": {
          "description": "An object defining the default styling for this timeline.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "#styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "#styleDefaults.animationDuration"
            },
            "borderColor": {
              "description": "The border color of the timeline.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "#styleDefaults.borderColor"
            },
            "item": {
              "description": "An object defining the default styling for this timeline's items.",
              "type": "object",
              "displayName": "Item",
              "value": {},
              "help": "#styleDefaults.item",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the timeline items.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "#styleDefaults.item.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the timeline items.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#styleDefaults.item.borderColor"
                },
                "descriptionStyle": {
                  "description": "The CSS style object defining the style of the timeline item description text.",
                  "type": "object",
                  "displayName": "Description Style",
                  "help": "#styleDefaults.item.descriptionStyle"
                },
                "hoverBackgroundColor": {
                  "description": "The background color of the highlighted timeline items.",
                  "type": "string",
                  "displayName": "Hover Background Color",
                  "format": "color",
                  "help": "#styleDefaults.item.hoverBackgroundColor"
                },
                "hoverBorderColor": {
                  "description": "The border color of the highlighted timeline items.",
                  "type": "string",
                  "displayName": "Hover Border Color",
                  "format": "color",
                  "help": "#styleDefaults.item.hoverBorderColor"
                },
                "selectedBackgroundColor": {
                  "description": "The background color of the selected timeline items.",
                  "type": "string",
                  "displayName": "Selected Background Color",
                  "format": "color",
                  "help": "#styleDefaults.item.selectedBackgroundColor"
                },
                "selectedBorderColor": {
                  "description": "The border color of the selected timeline items.",
                  "type": "string",
                  "displayName": "Selected Border Color",
                  "format": "color",
                  "help": "#styleDefaults.item.selectedBorderColor"
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the timeline item title text.",
                  "type": "object",
                  "displayName": "Title Style",
                  "help": "#styleDefaults.item.titleStyle"
                }
              }
            },
            "majorAxis": {
              "description": "An object defining the default styling for this timeline's major axis.",
              "type": "object",
              "displayName": "Major Axis",
              "value": {},
              "help": "#styleDefaults.majorAxis",
              "properties": {
                "labelStyle": {
                  "description": "The CSS style object defining the style of the major axis label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.majorAxis.labelStyle"
                },
                "separatorColor": {
                  "description": "The color of the major axis separators.",
                  "type": "string",
                  "displayName": "Separator Color",
                  "format": "color",
                  "help": "#styleDefaults.majorAxis.separatorColor"
                }
              }
            },
            "minorAxis": {
              "description": "An object defining the default styling for this timeline's minor axis.",
              "type": "object",
              "displayName": "Minor Axis",
              "value": {},
              "help": "#styleDefaults.minorAxis",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the minor axis.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "#styleDefaults.minorAxis.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the minor axis.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#styleDefaults.minorAxis.borderColor"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the minor axis label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.minorAxis.labelStyle"
                },
                "separatorColor": {
                  "description": "The color of the minor axis separators.",
                  "type": "string",
                  "displayName": "Separator Color",
                  "format": "color",
                  "help": "#styleDefaults.minorAxis.separatorColor"
                }
              }
            },
            "overview": {
              "description": "An object defining the default styling for this timeline's overview.",
              "type": "object",
              "displayName": "Overview",
              "help": "#styleDefaults.overview",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the timeline overview.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "#styleDefaults.overview.backgroundColor"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the timeline overview label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.overview.labelStyle"
                },
                "window": {
                  "description": "An object defining the default styling for the timeline overview window.",
                  "type": "object",
                  "displayName": "Window",
                  "value": {},
                  "help": "#styleDefaults.overview.window",
                  "properties": {
                    "backgroundColor": {
                      "description": "The background color of the timeline overview window.",
                      "type": "string",
                      "displayName": "Background Color",
                      "format": "color",
                      "help": "#styleDefaults.overview.window.backgroundColor"
                    },
                    "borderColor": {
                      "description": "The border color of the timeline overview window.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "#styleDefaults.overview.window.borderColor"
                    }
                  }
                }
              }
            },
            "referenceObject": {
              "description": "An object defining the default styling for this timeline's reference objects.",
              "type": "object",
              "displayName": "Reference Object",
              "value": {},
              "help": "#styleDefaults.referenceObject",
              "properties": {
                "color": {
                  "description": "The color of the reference objects.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "#styleDefaults.referenceObject.color"
                }
              }
            },
            "series": {
              "description": "An object defining the default styling for this timeline's series.",
              "type": "object",
              "displayName": "Series",
              "value": {},
              "help": "#styleDefaults.series",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the series.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "#styleDefaults.series.backgroundColor"
                },
                "colors": {
                  "description": "The array defining the default color ramp for the series items.",
                  "type": "Array<string>",
                  "displayName": "Colors",
                  "help": "#styleDefaults.series.colors"
                },
                "emptyTextStyle": {
                  "description": "The CSS style object defining the style of the series empty text.",
                  "type": "object",
                  "displayName": "Empty Text Style",
                  "help": "#styleDefaults.series.emptyTextStyle"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the series label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#styleDefaults.series.labelStyle"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "value": {
            "renderer": null
          },
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for the timeline. The function takes a context argument, provided by the timeline. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "accessibleItemDesc": {
              "description": "Provides properties to customize the screen reader text describing an item's description text.",
              "type": "string",
              "help": "#translations.accessibleItemDesc"
            },
            "accessibleItemEnd": {
              "description": "Provides properties to customize the screen reader text describing an item's end time.",
              "type": "string",
              "help": "#translations.accessibleItemEnd"
            },
            "accessibleItemStart": {
              "description": "Provides properties to customize the screen reader text describing an item's start time.",
              "type": "string",
              "help": "#translations.accessibleItemStart"
            },
            "accessibleItemTitle": {
              "description": "Provides properties to customize the screen reader text describing an item's title text.",
              "type": "string",
              "help": "#translations.accessibleItemTitle"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "itemMoveCancelled": {
              "description": "Used to indicate item move is cancelled for accessibility.",
              "type": "string",
              "help": "#translations.itemMoveCancelled"
            },
            "itemMoveFinalized": {
              "description": "Used to indicate item move is finalized for accessibility.",
              "type": "string",
              "help": "#translations.itemMoveFinalized"
            },
            "itemMoveInitiated": {
              "description": "Used to indicate item move is initiated for accessibility.",
              "type": "string",
              "help": "#translations.itemMoveInitiated"
            },
            "itemMoveInitiatedInstruction": {
              "description": "Used to indicate item move instructions for accessibility.",
              "type": "string",
              "help": "#translations.itemMoveInitiatedInstruction"
            },
            "itemMoveSelectionInfo": {
              "description": "Used to indicate whether other items are also selected during move.",
              "type": "string",
              "help": "#translations.itemMoveSelectionInfo"
            },
            "itemResizeCancelled": {
              "description": "Used to indicate item resize is cancelled for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeCancelled"
            },
            "itemResizeEndHandle": {
              "description": "Used to indicate item end resize handle for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeEndHandle"
            },
            "itemResizeEndInitiated": {
              "description": "Used to indicate item resize end is initiated for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeEndInitiated"
            },
            "itemResizeFinalized": {
              "description": "Used to indicate item resize is finalized for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeFinalized"
            },
            "itemResizeInitiatedInstruction": {
              "description": "Used to indicate item resize instructions for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeInitiatedInstruction"
            },
            "itemResizeSelectionInfo": {
              "description": "Used to indicate whether other items are also selected during item resize.",
              "type": "string",
              "help": "#translations.itemResizeSelectionInfo"
            },
            "itemResizeStartHandle": {
              "description": "Used to indicate item start resize handle for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeStartHandle"
            },
            "itemResizeStartInitiated": {
              "description": "Used to indicate item resize start is initiated for accessibility.",
              "type": "string",
              "help": "#translations.itemResizeStartInitiated"
            },
            "labelAccNavNextPage": {
              "description": "Used for the discrete navigation mode next arrow aria-label.",
              "type": "string",
              "help": "#translations.labelAccNavNextPage"
            },
            "labelAccNavPreviousPage": {
              "description": "Used for the discrete navigation mode previous arrow aria-label.",
              "type": "string",
              "help": "#translations.labelAccNavPreviousPage"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the default tooltip label for instance item information.",
              "type": "string",
              "help": "#translations.labelDate"
            },
            "labelDescription": {
              "description": "Used for the default tooltip label for item description information.",
              "type": "string",
              "help": "#translations.labelDescription"
            },
            "labelEnd": {
              "description": "Used for the default tooltip label for end time information.",
              "type": "string",
              "help": "#translations.labelEnd"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelMoveBy": {
              "description": "Used for the default tooltip label for item move scale change.",
              "type": "string",
              "help": "#translations.labelMoveBy"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelResizeBy": {
              "description": "Used for the default tooltip label for item resize scale change.",
              "type": "string",
              "help": "#translations.labelResizeBy"
            },
            "labelSeries": {
              "description": "Used for accessibility.",
              "type": "string",
              "help": "#translations.labelSeries"
            },
            "labelStart": {
              "description": "Used for the default tooltip label for start time information.",
              "type": "string",
              "help": "#translations.labelStart"
            },
            "labelTitle": {
              "description": "Used for the default tooltip label for item title information.",
              "type": "string",
              "help": "#translations.labelTitle"
            },
            "navArrowDisabledState": {
              "description": "Used for the discrete navigation mode arrow ariaLabel text when disabled.",
              "type": "string",
              "help": "#translations.navArrowDisabledState"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "tipArrowNextPage": {
              "description": "Used for the discrete navigation mode next arrow alt text.",
              "type": "string",
              "help": "#translations.tipArrowNextPage"
            },
            "tipArrowPreviousPage": {
              "description": "Used for the discrete navigation mode previous arrow alt text.",
              "type": "string",
              "help": "#translations.tipArrowPreviousPage"
            },
            "tooltipZoomIn": {
              "description": "Used for the zoom in tooltip.",
              "type": "string",
              "help": "#translations.tooltipZoomIn"
            },
            "tooltipZoomOut": {
              "description": "Used for the zoom out tooltip.",
              "type": "string",
              "help": "#translations.tooltipZoomOut"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to item properties.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "#valueFormats",
          "properties": {
            "date": {
              "description": "Specifies tooltip behavior for the date value of an instance item.",
              "type": "object",
              "displayName": "Date",
              "help": "#valueFormats.date",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.date.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.date.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.date.tooltipLabel"
                }
              }
            },
            "description": {
              "description": "Specifies tooltip behavior for the description value.",
              "type": "object",
              "displayName": "Description",
              "help": "#valueFormats.description",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the description value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "#valueFormats.description.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the description value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.description.tooltipLabel"
                }
              }
            },
            "end": {
              "description": "Specifies tooltip behavior for the end value.",
              "type": "object",
              "displayName": "End",
              "help": "#valueFormats.end",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.end.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.end.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.end.tooltipLabel"
                }
              }
            },
            "series": {
              "description": "Specifies tooltip behavior for the series value.",
              "type": "object",
              "displayName": "Series",
              "help": "#valueFormats.series",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the series value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "#valueFormats.series.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the series value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.series.tooltipLabel"
                }
              }
            },
            "start": {
              "description": "Specifies tooltip behavior for the start value.",
              "type": "object",
              "displayName": "Start",
              "help": "#valueFormats.start",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "#valueFormats.start.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "#valueFormats.start.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.start.tooltipLabel"
                }
              }
            },
            "title": {
              "description": "Specifies tooltip behavior for the title value.",
              "type": "object",
              "displayName": "Title",
              "help": "#valueFormats.title",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the title value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "#valueFormats.title.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the title value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "#valueFormats.title.tooltipLabel"
                }
              }
            }
          }
        },
        "viewportEnd": {
          "description": "The end time of the timeline's viewport. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport End",
          "value": "",
          "format": "date-time",
          "help": "#viewportEnd"
        },
        "viewportNavigationMode": {
          "description": "The viewport navigation mode of the timeline.",
          "type": "string",
          "displayName": "Viewport Navigation Mode",
          "value": "continuous",
          "help": "#viewportNavigationMode",
          "enumValues": [
            "continuous",
            "discrete"
          ],
          "propertyEditorValues": {
            "continuous": {
              "description": "In continuous mode, users can pan horizontally and vertically, and zoom in and out throughout the entire timeline.",
              "displayName": "Continuous"
            },
            "discrete": {
              "description": "In discrete mode only vertical panning is supported. Zooming is not supported. The viewport will use the viewport-start and the viewport-end to set the viewport duration width. Discrete mode will show \"preview wings\" which will extend slightly beyond the start and end of your actual viewport-start and viewport-end dates. The user can navigate the timeline via paging arrows, which may be disabled if the timeline does not have a full viewport worth of time data to display. To get the best usage, the timeline start and end should be set with a small buffer before and after their actual values (e.g. Dec 15, 2012 - Jan 15, 2014) The viewport-start and viewport-end should be carefully configured to start and end within the time period of usage. The timeline will pick the closest axis label when navigating through with the navigation arrows. Note: discrete mode is only supported in redwood. In vertical timeline orientation, the viewport navigation mode uses continuous behavior.",
              "displayName": "Discrete"
            }
          },
          "extension": {
            "themes": {
              "unsupportedThemes": [
                "Alta"
              ]
            }
          }
        },
        "viewportStart": {
          "description": "The start time of the timeline's viewport. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport Start",
          "value": "",
          "format": "date-time",
          "help": "#viewportStart"
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojMove": {
          "description": "Triggered after events are moved to a different location within the Timeline via a drag and drop operation or an equivalent keyboard action. See the Help documentation for more information.",
          "bubbles": true,
          "help": "#event:move",
          "detail": {
            "itemContexts": {
              "description": "An array of dataContexts of the moved event. The first dataContext of the array corresponds to the source event where the move was initiated (e.g. the event directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source event.",
                      "type": "object"
                    },
                    "seriesData": {
                      "description": "The data for the series the source event belongs to.",
                      "type": "object"
                    },
                    "itemData": {
                      "description": "The data provider data object for the source event. This will only be set if a DataProvider is being used.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source event.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": {
              "description": "The value at the target position the source event is moved to. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the event, if the source event were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the event, if the source event were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            }
          }
        },
        "ojResize": {
          "description": "Triggered after events are resized.",
          "bubbles": true,
          "help": "#event:resize",
          "detail": {
            "itemContexts": {
              "description": "An array of dataContexts of the resized events. The first dataContext of the array corresponds to the source event where the resize was initiated (e.g. the event directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source event.",
                      "type": "object"
                    },
                    "seriesData": {
                      "description": "The data for the row the source event belongs to.",
                      "type": "object"
                    },
                    "itemData": {
                      "description": "The data provider row data object for the source event. This will only be set if a DataProvider is being used.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source event.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "typeDetail": {
              "description": "The type of resize, either 'start' or 'end'.",
              "type": "string"
            },
            "value": {
              "description": "The value at the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the event (always chronologically before, or equivalent to, the end value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the event (always chronologically after, or equivalent to, the start value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation. If the viewport changes the minor-axis scale into a custom timescale instance of DvtTimeComponentScale, then the minorAxisScale will be the \"name\" field value of the instance.",
          "bubbles": true,
          "help": "#event:viewportChange",
          "detail": {
            "viewportStart": {
              "description": "the start of the new viewport on a timeline",
              "type": "string"
            },
            "viewportEnd": {
              "description": "the end of the new viewport on a timeline",
              "type": "string"
            },
            "minorAxisScale": {
              "description": "the time scale of the minor axis",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the timeline. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "preferredContent": [
            "TimelineItemElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-timeline> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item",
              "type": "any"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the timeline. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#seriesTemplate",
          "preferredContent": [
            "TimelineSeriesElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-timeline> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The series index",
              "type": "number"
            },
            "id": {
              "description": "The series id",
              "type": "any"
            },
            "items": {
              "description": "The array of objects which are timeline items that belong to this series. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered item.",
              "type": "oj.ojTimeline.SeriesItem",
              "properties": {
                "background": {
                  "description": "The background color of the item bubble. If the item is of type \"duration-event\", then a color stripe will also be rendered in the item bubble. The exact background and stripe color values come from the CSS and vary based on theme. For each item, there is an accessibility requirement for use cases where a color difference is used to convey information. The application is responsible for making sure that the information conveyed is also available in visible text.",
                  "type": "string",
                  "enumValues": [
                    "blue",
                    "green",
                    "orange",
                    "purple",
                    "red",
                    "teal"
                  ],
                  "propertyEditorValues": {
                    "blue": {
                      "description": "Blue background (and blue color stripe for \"duration-event\" type item).",
                      "displayName": "Blue"
                    },
                    "green": {
                      "description": "Green background (and green color stripe for \"duration-event\" type item).",
                      "displayName": "Green"
                    },
                    "orange": {
                      "description": "Orange background (and orange color stripe for \"duration-event\" type item).",
                      "displayName": "Orange"
                    },
                    "purple": {
                      "description": "Purple background (and purple color stripe for \"duration-event\" type item).",
                      "displayName": "Purple"
                    },
                    "red": {
                      "description": "Red background (and red color stripe for \"duration-event\" type item).",
                      "displayName": "Red"
                    },
                    "teal": {
                      "description": "Teal background (and teal color stripe for \"duration-event\" type item).",
                      "displayName": "Teal"
                    }
                  },
                  "extension": {
                    "themes": {
                      "unsupportedThemes": [
                        "Alta"
                      ]
                    }
                  }
                },
                "description": {
                  "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                  "type": "string",
                  "value": ""
                },
                "durationFillColor": {
                  "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                  "type": "string",
                  "value": null
                },
                "end": {
                  "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "id": {
                  "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                  "type": "any"
                },
                "itemType": {
                  "description": "The item type for the bubble. If not specified, defaults to auto behavior (event item-type if end date not specified, duration-bar if end date specified).",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "duration-bar",
                    "duration-event",
                    "event"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "event item-type if end date not specified, duration-bar if end date specified.",
                      "displayName": "Auto"
                    },
                    "duration-bar": {
                      "description": "item bubble with a bar on the time-axis that matches the duration of the event using the start/end dates",
                      "displayName": "Duration-bar"
                    },
                    "duration-event": {
                      "description": "item bubble with width equal to the duration and edges of the event matching the start/end date (only available on horizontal timeline)",
                      "displayName": "Duration-event"
                    },
                    "event": {
                      "description": "item bubble using only the start date",
                      "displayName": "Event"
                    }
                  },
                  "extension": {
                    "themes": {
                      "unsupportedThemes": [
                        "Alta"
                      ]
                    }
                  }
                },
                "shortDesc": {
                  "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                  "type": "string|function",
                  "value": null
                },
                "start": {
                  "description": "The start time of this timeline item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "svgStyle": {
                  "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
                  "type": "object"
                },
                "thumbnail": {
                  "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                  "type": "string",
                  "value": ""
                },
                "title": {
                  "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                  "type": "string"
                }
              }
            },
            "seriesData": {
              "description": "The data for the series the hovered item belongs to.",
              "type": "oj.ojTimeline.Series",
              "properties": {
                "emptyText": {
                  "description": "The text of an empty timeline series.",
                  "type": "string"
                },
                "id": {
                  "description": "The identifier for the timeline series.",
                  "type": "string"
                },
                "itemLayout": {
                  "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "bottomToTop",
                    "topToBottom"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "bottomToTop": {
                      "displayName": "Bottom To Top"
                    },
                    "topToBottom": {
                      "displayName": "Top To Bottom"
                    }
                  }
                },
                "items": {
                  "description": "An array of items. If not specified, no data will be shown in this series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "background": {
                          "description": "The background color of the item bubble. If the item is of type \"duration-event\", then a color stripe will also be rendered in the item bubble. The exact background and stripe color values come from the CSS and vary based on theme. For each item, there is an accessibility requirement for use cases where a color difference is used to convey information. The application is responsible for making sure that the information conveyed is also available in visible text.",
                          "type": "string",
                          "enumValues": [
                            "blue",
                            "green",
                            "orange",
                            "purple",
                            "red",
                            "teal"
                          ],
                          "propertyEditorValues": {
                            "blue": {
                              "description": "Blue background (and blue color stripe for \"duration-event\" type item).",
                              "displayName": "Blue"
                            },
                            "green": {
                              "description": "Green background (and green color stripe for \"duration-event\" type item).",
                              "displayName": "Green"
                            },
                            "orange": {
                              "description": "Orange background (and orange color stripe for \"duration-event\" type item).",
                              "displayName": "Orange"
                            },
                            "purple": {
                              "description": "Purple background (and purple color stripe for \"duration-event\" type item).",
                              "displayName": "Purple"
                            },
                            "red": {
                              "description": "Red background (and red color stripe for \"duration-event\" type item).",
                              "displayName": "Red"
                            },
                            "teal": {
                              "description": "Teal background (and teal color stripe for \"duration-event\" type item).",
                              "displayName": "Teal"
                            }
                          },
                          "extension": {
                            "themes": {
                              "unsupportedThemes": [
                                "Alta"
                              ]
                            }
                          }
                        },
                        "description": {
                          "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                          "type": "string",
                          "value": ""
                        },
                        "durationFillColor": {
                          "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                          "type": "string",
                          "value": null
                        },
                        "end": {
                          "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "id": {
                          "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                          "type": "any"
                        },
                        "itemType": {
                          "description": "The item type for the bubble. If not specified, defaults to auto behavior (event item-type if end date not specified, duration-bar if end date specified).",
                          "type": "string",
                          "value": "auto",
                          "enumValues": [
                            "auto",
                            "duration-bar",
                            "duration-event",
                            "event"
                          ],
                          "propertyEditorValues": {
                            "auto": {
                              "description": "event item-type if end date not specified, duration-bar if end date specified.",
                              "displayName": "Auto"
                            },
                            "duration-bar": {
                              "description": "item bubble with a bar on the time-axis that matches the duration of the event using the start/end dates",
                              "displayName": "Duration-bar"
                            },
                            "duration-event": {
                              "description": "item bubble with width equal to the duration and edges of the event matching the start/end date (only available on horizontal timeline)",
                              "displayName": "Duration-event"
                            },
                            "event": {
                              "description": "item bubble using only the start date",
                              "displayName": "Event"
                            }
                          },
                          "extension": {
                            "themes": {
                              "unsupportedThemes": [
                                "Alta"
                              ]
                            }
                          }
                        },
                        "shortDesc": {
                          "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string|function",
                          "value": null
                        },
                        "start": {
                          "description": "The start time of this timeline item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
                          "type": "object"
                        },
                        "thumbnail": {
                          "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                          "type": "string",
                          "value": ""
                        },
                        "title": {
                          "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "label": {
                  "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
                  "type": "string",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "value": {}
                }
              }
            },
            "itemData": {
              "description": "The data provider row data object for the hovered item. This will only be set if an DataProvider for data is being used.",
              "type": "object|null"
            },
            "componentElement": {
              "description": "The timeline element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            }
          }
        },
        "itemBubbleContentTemplate": {
          "description": "The itemBubbleContentTemplate slot is used to specify custom item bubble content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemBubbleContentTemplate"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-toolbar": {
      "name": "oj-toolbar",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Toolbar",
      "implements": [
        "ToolbarElement"
      ],
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtoolbar",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-toolbar-bottom-border"
              ],
              "description": "Applies a bottom border to the toolbar, or to the oj-toolbars element, in themes not having this border by default."
            },
            {
              "styleGroup": [
                "oj-toolbar-no-chrome"
              ],
              "description": "Removes chrome (background and border) from the toolbar(s), in themes having this chrome by default."
            },
            {
              "styleGroup": [
                "oj-toolbar-separator"
              ],
              "description": "Separators should be placed around any buttonsets in the toolbar, and anywhere else in the toolbar that a separator is desirable."
            },
            {
              "styleGroup": [
                "oj-toolbar-top-border"
              ],
              "description": "Applies a top border to the toolbar, or to the oj-toolbars element, in themes not having this border by default."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-toolbar",
          "uxSpecs": [
            "toolbar"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-toolbar-bottom-border",
          "kind": "class",
          "displayName": "Bottom Border",
          "description": "Applies a bottom border to the toolbar, or to the oj-toolbars element, in themes not having this border by default.",
          "help": "#oj-toolbar-bottom-border"
        },
        {
          "name": "oj-toolbar-no-chrome",
          "kind": "class",
          "displayName": "No Chrome",
          "description": "Removes chrome (background and border) from the toolbar(s), in themes having this chrome by default.",
          "help": "#oj-toolbar-no-chrome"
        },
        {
          "name": "oj-toolbar-separator",
          "kind": "class",
          "displayName": "Separator",
          "description": "Separators should be placed around any buttonsets in the toolbar, and anywhere else in the toolbar that a separator is desirable.",
          "styleSelector": "oj-toolbar span",
          "help": "#oj-toolbar-separator"
        },
        {
          "name": "oj-toolbar-top-border",
          "kind": "class",
          "displayName": "Top Border",
          "description": "Applies a top border to the toolbar, or to the oj-toolbars element, in themes not having this border by default.",
          "help": "#oj-toolbar-top-border"
        }
      ],
      "styleVariables": [
        {
          "description": "Horizontal margin around a button in a toolbar",
          "name": "oj-toolbar-button-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Horizontal margin around a borderless button in a toolbar",
          "name": "oj-toolbar-borderless-button-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Horizontal margin around a separator in a toolbar",
          "name": "oj-toolbar-separator-margin",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A toolbar displays a strip of control elements such as buttons and menu buttons, often grouped by separators.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojToolbar.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "chroming"
          ]
        }
      ],
      "properties": {
        "chroming": {
          "description": "Indicates in what states the toolbar's buttons and buttonsets has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "#chroming",
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use solid instead.",
              "target": "propertyValue",
              "value": [
                "full"
              ]
            },
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "This value will be removed in the future. Please use borderless instead.",
              "target": "propertyValue",
              "value": [
                "half"
              ]
            }
          ],
          "enumValues": [
            "borderless",
            "full",
            "half",
            "outlined",
            "solid"
          ],
          "propertyEditorValues": {
            "borderless": {
              "description": "Borderless buttons are the least prominent variation and are useful for supplemental actions that require minimal emphasis.",
              "displayName": "Borderless"
            },
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states.",
              "displayName": "Half"
            },
            "outlined": {
              "description": "Outlined buttons are salient, but lighter weight than solid buttons. Outlined buttons are useful for secondary actions.",
              "displayName": "Outlined"
            },
            "solid": {
              "description": "Solid buttons stand out, and direct the user's attention to the most important actions in the UI.",
              "displayName": "Solid"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations"
        }
      },
      "methods": {
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the toolbar.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-toolbar> element accepts oj-button, oj-buttonset-many, oj-buttonset-one, oj-menu-button and non-focusable content such as separator icon elements as children.",
          "displayName": "default",
          "help": "#Default",
          "preferredContent": [
            "ButtonElement",
            "ButtonsetManyElement",
            "ButtonsetOneElement",
            "MenuButtonElement"
          ]
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-train": {
      "name": "oj-train",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Train",
      "implements": [
        "TrainElement"
      ],
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtrain",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-train-stretch"
              ],
              "description": "Optional class that may be added to the train div which will stretch the train to cover the full width of the container specified."
            }
          ],
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-train-control",
          "uxSpecs": [
            "train"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-train-stretch",
          "kind": "class",
          "displayName": "Stretch",
          "description": "Optional class that may be added to the train div which will stretch the train to cover the full width of the container specified.",
          "help": "#oj-train-stretch"
        }
      ],
      "styleVariables": [
        {
          "description": "Train step width",
          "name": "oj-train-step-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train step border radius",
          "name": "oj-train-step-border-radius",
          "formats": [
            "length",
            "percentage"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train padding",
          "name": "oj-train-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train label font size",
          "name": "oj-train-label-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train label font weight",
          "name": "oj-train-label-font-weight",
          "formats": [
            "font_weight"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train label padding top",
          "name": "oj-train-label-padding-top",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train button diameter",
          "name": "oj-train-button-diameter",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train button font size",
          "name": "oj-train-button-font-size",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train connector height",
          "name": "oj-train-connector-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Train connector padding",
          "name": "oj-train-connector-padding",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Default train button background color",
          "name": "oj-train-button-bg-color",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set2"
        },
        {
          "description": "Default train button border color",
          "name": "oj-train-button-border-color",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set2"
        },
        {
          "description": "Default train button text color",
          "name": "oj-train-button-text-color",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set2"
        },
        {
          "description": "Default label color",
          "name": "oj-train-label-color",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set2"
        },
        {
          "description": "Default train connector color",
          "name": "oj-train-connector-color",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set2"
        },
        {
          "description": "Train button background color when visited",
          "name": "oj-train-button-bg-color-visited",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set3"
        },
        {
          "description": "Train button border color when visited",
          "name": "oj-train-button-border-color-visited",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set3"
        },
        {
          "description": "Train button text color when visited",
          "name": "oj-train-button-text-color-visited",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set3"
        },
        {
          "description": "Train label color when visited",
          "name": "oj-train-label-color-visited",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set3"
        },
        {
          "description": "Train button background color when hovered",
          "name": "oj-train-button-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set4"
        },
        {
          "description": "Train button border color when hovered",
          "name": "oj-train-button-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set4"
        },
        {
          "description": "Train button text color when hovered",
          "name": "oj-train-button-text-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set4"
        },
        {
          "description": "Train step background color when hovered",
          "name": "oj-train-step-bg-color-hover",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set4"
        },
        {
          "description": "Train button background color when active",
          "name": "oj-train-button-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set5"
        },
        {
          "description": "Train button border color when active",
          "name": "oj-train-button-border-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set5"
        },
        {
          "description": "Train button text color when active",
          "name": "oj-train-button-text-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set5"
        },
        {
          "description": "Train label font weight when active",
          "name": "oj-train-label-font-weight-active",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-train-css-set5"
        },
        {
          "description": "Train step background color when active",
          "name": "oj-train-step-bg-color-active",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set5"
        },
        {
          "description": "Train button background color when selected",
          "name": "oj-train-button-bg-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train button border color when selected",
          "name": "oj-train-button-border-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train button text color when selected",
          "name": "oj-train-button-text-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train label font weight when selected",
          "name": "oj-train-label-font-weight-selected",
          "formats": [
            "font_weight"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train label color when selected",
          "name": "oj-train-label-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train connector color when selected",
          "name": "oj-train-connector-color-selected",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train connector padding when selected",
          "name": "oj-train-connector-padding-selected",
          "formats": [
            "length"
          ],
          "help": "#oj-train-css-set6"
        },
        {
          "description": "Train button background color when disabled",
          "name": "oj-train-button-bg-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set7"
        },
        {
          "description": "Train button border color when disabled",
          "name": "oj-train-button-border-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set7"
        },
        {
          "description": "Train button text color when disabled",
          "name": "oj-train-button-text-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set7"
        },
        {
          "description": "Train button opacity when disabled",
          "name": "oj-train-button-opacity-disabled",
          "formats": [
            "number",
            "percentage"
          ],
          "help": "#oj-train-css-set7"
        },
        {
          "description": "Train label color when disabled",
          "name": "oj-train-label-color-disabled",
          "formats": [
            "color"
          ],
          "help": "#oj-train-css-set7"
        }
      ],
      "description": "A train allows a user to navigate between different steps of a process.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTrain.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectedStep",
            "steps"
          ]
        }
      ],
      "properties": {
        "selectedStep": {
          "description": "Specifies the id of the current selected step.",
          "type": "string",
          "displayName": "Selected Step",
          "writeback": true,
          "help": "#selectedStep"
        },
        "steps": {
          "description": "The array of step objects.",
          "type": "Array<Object>",
          "displayName": "Steps",
          "required": true,
          "help": "#steps",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean",
                  "displayName": "Disabled"
                },
                "id": {
                  "description": "The id of the step",
                  "type": "string",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "displayName": "Label",
                  "translatable": true
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "string|null",
                  "displayName": "Message Type",
                  "enumValues": [
                    "confirmation",
                    "error",
                    "fatal",
                    "info",
                    "warning"
                  ]
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean",
                  "displayName": "Visited"
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "stepCurrent": {
              "description": "Description for the current train step status.",
              "type": "string",
              "help": "#translations.stepCurrent"
            },
            "stepDisabled": {
              "description": "Description for the disabled train step status.",
              "type": "string",
              "help": "#translations.stepDisabled"
            },
            "stepInfo": {
              "description": "General description for a train step. The text may contain tokens '{index}' and '{count}', which will be replaced by the corresponding train step values.",
              "type": "string",
              "help": "#translations.stepInfo"
            },
            "stepMessageConfirmation": {
              "description": "Description for the train step message type Confirmation.",
              "type": "string",
              "help": "#translations.stepMessageConfirmation"
            },
            "stepMessageError": {
              "description": "Description for the train step message type Error.",
              "type": "string",
              "help": "#translations.stepMessageError"
            },
            "stepMessageInfo": {
              "description": "Description for the train step message type Info.",
              "type": "string",
              "help": "#translations.stepMessageInfo"
            },
            "stepMessageType": {
              "description": "Description for the train step message type. The actual value is passed in the '{messageType}' token.",
              "type": "string",
              "help": "#translations.stepMessageType"
            },
            "stepMessageWarning": {
              "description": "Description for the train step message type Warning.",
              "type": "string",
              "help": "#translations.stepMessageWarning"
            },
            "stepNotVisited": {
              "description": "Description for the non-visited train step status.",
              "type": "string",
              "help": "#translations.stepNotVisited"
            },
            "stepStatus": {
              "description": "Description for the train step status. The actual status value is passed in the '{status}' token.",
              "type": "string",
              "help": "#translations.stepStatus"
            },
            "stepVisited": {
              "description": "Description for the visited train step status.",
              "type": "string",
              "help": "#translations.stepVisited"
            }
          }
        }
      },
      "methods": {
        "getNextSelectableStep": {
          "description": "Returns the id of the next selectable step based on the current selected step.",
          "help": "#getNextSelectableStep",
          "return": "string|null"
        },
        "getPreviousSelectableStep": {
          "description": "Returns the id of the previous selectable step based on the current selected step.",
          "help": "#getPreviousSelectableStep",
          "return": "string|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "getStep": {
          "description": "Returns the specified step.",
          "help": "#getStep",
          "params": [
            {
              "name": "id",
              "description": "The id of the step.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the train.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "updateStep": {
          "description": "Update the specified step with a new set of properties.",
          "help": "#updateStep",
          "params": [
            {
              "name": "id",
              "description": "The id of the step to update",
              "type": "string"
            },
            {
              "name": "stepProperties",
              "description": "The set of step properties to update. Will overwrite any previously set values.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeDeselect": {
          "description": "Triggered immediately before a step is deselected.",
          "cancelable": true,
          "help": "#event:beforeDeselect",
          "detail": {
            "fromStep": {
              "description": "The step that is about to be deselected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            },
            "toStep": {
              "description": "The step that is about to be selected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Triggered immediately before a step is selected.",
          "cancelable": true,
          "help": "#event:beforeSelect",
          "detail": {
            "fromStep": {
              "description": "The step that is about to be deselected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            },
            "toStep": {
              "description": "The step that is about to be selected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            }
          }
        },
        "ojDeselect": {
          "description": "Triggered after a step has been deselected.",
          "help": "#event:deselect",
          "detail": {
            "fromStep": {
              "description": "The step that is deselected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            },
            "toStep": {
              "description": "The step that is selected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after a step has been selected.",
          "help": "#event:select",
          "detail": {
            "fromStep": {
              "description": "The step that is deselected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            },
            "toStep": {
              "description": "The step that is selected.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "The label of the step",
                  "type": "string",
                  "translatable": true
                },
                "disabled": {
                  "description": "Specifies whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "Specifies whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "Specifies the type of message icon displayed on the step. A null value removes the message icon.",
                  "type": "\"info\"|\"error\"|\"fatal\"|\"warning\"|\"confirmation\"|null"
                }
              }
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "status": [
            {
              "type": "deprecated",
              "since": "13.0.0",
              "description": "This web component no longer supports launching a context menu."
            }
          ],
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        }
      }
    },
    "oj-tree-view": {
      "name": "oj-tree-view",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Tree View",
      "implements": [
        "TreeViewElement"
      ],
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreeview",
          "styleClasses": [
            {
              "styleGroup": [
                "oj-treeview-item-content-icon"
              ],
              "description": "Use this class on any additional icons included in treeview's items to assist with vertical alignment and size."
            },
            {
              "styleGroup": [
                "oj-treeview-item-icon"
              ],
              "description": "Use this class on the span providing the item icon in the static markup or the item renderer or template slot."
            },
            {
              "styleGroup": [
                "oj-treeview-item-text"
              ],
              "description": "Use this class on the span providing the item text in the static markup or the item renderer or template slot."
            }
          ],
          "defaultColumns": "6",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-tree-view",
          "uxSpecs": [
            "tree-view"
          ]
        }
      },
      "styleClasses": [
        {
          "name": "oj-treeview-item-content-icon",
          "kind": "class",
          "displayName": "Treeview item content icon",
          "description": "Use this class on any additional icons included in treeview's items to assist with vertical alignment and size.",
          "styleSelector": "oj-tree-view *",
          "help": "#oj-treeview-item-content-icon"
        },
        {
          "name": "oj-treeview-item-icon",
          "kind": "class",
          "displayName": "Treeview item icon",
          "description": "Use this class on the span providing the item icon in the static markup or the item renderer or template slot.",
          "styleSelector": "oj-tree-view span",
          "help": "#oj-treeview-item-icon"
        },
        {
          "name": "oj-treeview-item-text",
          "kind": "class",
          "displayName": "Treeview item text",
          "description": "Use this class on the span providing the item text in the static markup or the item renderer or template slot.",
          "styleSelector": "oj-tree-view span",
          "help": "#oj-treeview-item-text"
        }
      ],
      "styleVariables": [
        {
          "description": "Tree view row height",
          "name": "oj-tree-view-row-height",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tree view text color",
          "name": "oj-tree-view-text-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Tree view indent width",
          "name": "oj-tree-view-indent-width",
          "formats": [
            "length"
          ],
          "help": "#css-variables"
        }
      ],
      "description": "A tree view displays hierarchical relationships between items.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTreeView.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "selectionMode"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "expanded",
            "selection"
          ]
        }
      ],
      "properties": {
        "currentItem": {
          "description": "Read-only property used for retrieving the key of the item that currently has focus.",
          "type": "any",
          "displayName": "Current Item",
          "writeback": true,
          "readOnly": true,
          "help": "#currentItem"
        },
        "data": {
          "description": "Specifies the data for the tree. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "dnd": {
          "description": "Customizes the drag and drop functionality. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "#dnd",
          "properties": {
            "drag": {
              "description": "Customizes the drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "value": null,
              "help": "#dnd.drag",
              "properties": {
                "items": {
                  "description": "If this object is specified, TreeView will initiate drag operation when the user drags on an item.",
                  "type": "object",
                  "displayName": "Items",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "Customizes the drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "value": null,
              "help": "#dnd.drop",
              "properties": {
                "items": {
                  "description": "An object that specifies callback functions to handle dropping items",
                  "type": "object",
                  "displayName": "Items",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this component can accept.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop"
                    }
                  }
                }
              }
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "writeback": true,
          "help": "#expanded"
        },
        "item": {
          "description": "Customizes the functionality of each item in the tree.",
          "type": "object",
          "displayName": "Item",
          "help": "#item",
          "properties": {
            "focusable": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "13.0.0",
                  "description": "Not accessible by screen reader."
                }
              ],
              "description": "Specifies whether the item can receive keyboard focus. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Focusable",
              "value": null,
              "help": "#item.focusable"
            },
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Selectable",
              "value": null,
              "help": "#item.selectable"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.",
          "type": "Object<number>|null",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "maxCount": {
              "description": "The maximum number of items to display before fetching more data items will be stopped.",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "minimum": 0,
              "help": "#scrollPolicyOptions.maxCount"
            }
          }
        },
        "selected": {
          "description": "Specifies the keys of the current selected items. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Selected",
          "writeback": true,
          "help": "#selected"
        },
        "selection": {
          "status": [
            {
              "type": "deprecated",
              "since": "8.0.0",
              "description": "Use selected attribute instead."
            }
          ],
          "description": "Specifies the current selections in the tree. An empty array indicates nothing is selected.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "#selectionMode",
          "enumValues": [
            "leafOnly",
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "leafOnly": {
              "description": "Multiple items can be selected but children items control the parent's selection state.",
              "displayName": "Leaf Only"
            },
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "receivedDataAria": {
              "description": "Aria Label for when parent node's data has been received.",
              "type": "string",
              "help": "#translations.receivedDataAria"
            },
            "retrievingDataAria": {
              "description": "Aria Label for when parent node's data is being retrieved.",
              "type": "string",
              "help": "#translations.retrievingDataAria"
            },
            "treeViewSelectorAria": {
              "description": "Aria Label for each treeview row selector",
              "type": "string",
              "help": "#translations.treeViewSelectorAria"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when the default animation of a particular action has ended.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation.",
              "type": "'expand'|'collapse'"
            },
            "element": {
              "description": "The target of animation.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when the default animation of a particular action is about to start.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.1.0",
              "description": "This web component no longer supports this event."
            }
          ],
          "help": "#event:animateStart",
          "detail": {
            "action": {
              "description": "The action that triggered the animation.",
              "type": "'expand'|'collapse'"
            },
            "element": {
              "description": "The target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault() to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered before an item is collapsed.",
          "cancelable": true,
          "help": "#event:beforeCollapse",
          "detail": {
            "key": {
              "description": "The key of the item to be collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The item to be collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Triggered before the current item is changed.",
          "cancelable": true,
          "help": "#event:beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "The key of the previous item.",
              "type": "any"
            },
            "previousItem": {
              "description": "The previous item.",
              "type": "Element"
            },
            "key": {
              "description": "The key of the new current item.",
              "type": "any"
            },
            "item": {
              "description": "The new current item.",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered before an item is expanded.",
          "cancelable": true,
          "help": "#event:beforeExpand",
          "detail": {
            "key": {
              "description": "The key of the item to be expanded.",
              "type": "any"
            },
            "item": {
              "description": "The item to be expanded.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after an item has been collapsed.",
          "help": "#event:collapse",
          "detail": {
            "key": {
              "description": "The key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after an item has been expanded.",
          "help": "#event:expand",
          "detail": {
            "key": {
              "description": "The key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The item that was just expanded.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the tree. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-tree-view> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered.",
              "type": "any"
            },
            "depth": {
              "description": "The depth of the current item being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node.",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item. The parent key is null for root nodes.",
              "type": "any"
            },
            "metadata": {
              "description": "The metadata of the item.",
              "type": "ItemMetadata<K>"
            }
          }
        }
      }
    },
    "oj-treemap-node": {
      "name": "oj-treemap-node",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Treemap Node",
      "implements": [
        "TreemapNodeElement"
      ],
      "type": "core",
      "subcomponentType": "data",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreemap"
        }
      },
      "styleVariables": [
        {
          "description": "Treemap node header background color",
          "name": "oj-treemap-node-header-bg-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Treemap node header border color",
          "name": "oj-treemap-node-header-border-color",
          "formats": [
            "color"
          ],
          "help": "#css-variables"
        },
        {
          "description": "Treemap node header background color when selected",
          "name": "oj-treemap-node-header-bg-color-selected",
          "formats": [
            "color"
          ],
          "help": "#.oj-tree-map-node-css-set2"
        },
        {
          "description": "Treemap node header border color when hovered",
          "name": "oj-treemap-node-header-border-color-hover",
          "formats": [
            "color"
          ],
          "help": "#.oj-tree-map-node-css-set3"
        }
      ],
      "description": "The oj-treemap-node element is used to declare properties for treemap nodes. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTreemapNode.html",
      "properties": {
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. See the Help documentation for more information.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "#categories"
        },
        "color": {
          "description": "The fill color of the node.",
          "type": "string",
          "displayName": "Color",
          "value": "#000000",
          "format": "color",
          "help": "#color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled for the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "#drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groupLabelDisplay": {
          "description": "The label display behavior for group nodes.",
          "type": "string",
          "displayName": "Group Label Display",
          "help": "#groupLabelDisplay",
          "enumValues": [
            "header",
            "node",
            "off"
          ],
          "propertyEditorValues": {
            "header": {
              "displayName": "Header"
            },
            "node": {
              "displayName": "Node"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "header": {
          "description": "An object defining the properties for the node header.",
          "type": "object",
          "displayName": "Header",
          "help": "#header",
          "properties": {
            "isolate": {
              "description": "Specifies whether isolate behavior is enabled on the node.",
              "type": "string",
              "displayName": "Isolate",
              "help": "#header.isolate",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment of the header title.",
              "type": "string",
              "displayName": "Label Halign",
              "help": "#header.labelHalign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the header title. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
              "type": "object",
              "displayName": "Label Style",
              "help": "#header.labelStyle"
            },
            "useNodeColor": {
              "description": "Specifies whether the node color should be displayed in the header.",
              "type": "string",
              "displayName": "Use Node Color",
              "help": "#header.useNodeColor",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "label": {
          "description": "The label for this node.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "#label"
        },
        "labelDisplay": {
          "description": "The label display behavior for leaf nodes.",
          "type": "string",
          "displayName": "Label Display",
          "help": "#labelDisplay",
          "enumValues": [
            "node",
            "off"
          ],
          "propertyEditorValues": {
            "node": {
              "displayName": "Node"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "labelHalign": {
          "description": "The horizontal alignment for labels displayed within the node.",
          "type": "string",
          "displayName": "Label Halign",
          "help": "#labelHalign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "#labelStyle"
        },
        "labelValign": {
          "description": "The vertical alignment for labels displayed within the node.",
          "type": "string",
          "displayName": "Label Valign",
          "help": "#labelValign",
          "enumValues": [
            "bottom",
            "center",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "center": {
              "displayName": "Center"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "pattern": {
          "description": "The pattern used to fill the node.",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "#pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "none": {
              "displayName": "None"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "selectable": {
          "description": "Specifies whether the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "#selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this node. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string|function",
          "displayName": "Short Desc",
          "value": "",
          "help": "#shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "SVG Class Name",
          "value": "",
          "help": "#svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the node. See the Help documentation for more information.",
          "type": "object",
          "displayName": "SVG Style",
          "value": {},
          "help": "#svgStyle"
        },
        "value": {
          "description": "The value of the node, which determines the relative size of the node.",
          "type": "number",
          "displayName": "Value",
          "help": "#value"
        }
      }
    },
    "oj-treemap": {
      "name": "oj-treemap",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Treemap",
      "implements": [
        "TreemapElement"
      ],
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreemap",
          "defaultColumns": "12",
          "minColumns": "6"
        },
        "oracle": {
          "icon": "oj-ux-ico-treemap",
          "uxSpecs": [
            "data-visualization-tree-map"
          ]
        }
      },
      "description": "A tree map is an interactive data visualization in which hierarchical data is represented across two dimensions by the size and color of nested rectangular nodes.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojTreemap.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "colorLabel",
            "sizeLabel",
            "nodeSeparators",
            "groupGaps",
            "nodeDefaults.groupLabelDisplay",
            "nodeDefaults.labelDisplay",
            "nodeDefaults.labelHalign",
            "nodeDefaults.labelValign",
            "layout",
            "sorting",
            "animationOnDataChange",
            "animationOnDisplay",
            "style"
          ]
        },
        {
          "propertyGroup": "data",
          "items": [
            "data",
            "selection"
          ]
        }
      ],
      "properties": {
        "animationDuration": {
          "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, the value specifies the duration of each stage.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "#animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "#animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "#animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationUpdateColor": {
          "description": "Specifies the color displayed during a data change animation when a node is updated.",
          "type": "string",
          "displayName": "Animation Update Color",
          "value": "",
          "format": "color",
          "help": "#animationUpdateColor"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "#as"
        },
        "colorLabel": {
          "description": "Specifies the label displayed in the legend describing the color metric of the treemap.",
          "type": "string",
          "displayName": "Color Label",
          "value": "",
          "translatable": true,
          "help": "#colorLabel"
        },
        "data": {
          "description": "Specifies the DataProvider for the treemap. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "13.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          }
        },
        "displayLevels": {
          "description": "The number of levels of nodes to display. By default all nodes are displayed.",
          "type": "number",
          "displayName": "Display Levels",
          "value": 1.7976931348623157e+308,
          "help": "#displayLevels"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire ojBeforeDrill and ojDrill events on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "#drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groupGaps": {
          "description": "Specifies whether gaps are displayed between groups. Gaps can be useful for drawing attention to the differences between groups.",
          "type": "string",
          "displayName": "Group Gaps",
          "value": "outer",
          "help": "#groupGaps",
          "enumValues": [
            "all",
            "none",
            "outer"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "none": {
              "displayName": "None"
            },
            "outer": {
              "displayName": "Outer"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "#hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "#highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightMode": {
          "description": "Specifies whether the highlight-mode should be by category or descendants.",
          "type": "string",
          "displayName": "Highlight Mode",
          "value": "categories",
          "help": "#highlightMode",
          "enumValues": [
            "categories",
            "descendants"
          ],
          "propertyEditorValues": {
            "categories": {
              "displayName": "Categories"
            },
            "descendants": {
              "displayName": "Descendants"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "#highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over the nodes.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "#hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting nodes.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "#hoverBehaviorDelay"
        },
        "isolatedNode": {
          "description": "The id of the initially isolated node.",
          "type": "any",
          "displayName": "Isolated Node",
          "value": "",
          "writeback": true,
          "help": "#isolatedNode"
        },
        "layout": {
          "description": "Specifies the layout of the treemap. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Layout",
          "value": "squarified",
          "help": "#layout",
          "enumValues": [
            "sliceAndDiceHorizontal",
            "sliceAndDiceVertical",
            "squarified"
          ],
          "propertyEditorValues": {
            "sliceAndDiceHorizontal": {
              "displayName": "Slice And Dice Horizontal"
            },
            "sliceAndDiceVertical": {
              "displayName": "Slice And Dice Vertical"
            },
            "squarified": {
              "displayName": "Squarified"
            }
          }
        },
        "nodeContent": {
          "description": "An object defining custom node content for the treemap. Only leaf nodes with no child nodes will have the custom content rendered.",
          "type": "object",
          "displayName": "Node Content",
          "help": "#nodeContent",
          "properties": {
            "renderer": {
              "description": "A function that returns custom node content. The function takes a context argument, provided by the treemap. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#nodeContent.renderer"
            }
          }
        },
        "nodeDefaults": {
          "description": "An object defining default properties for the nodes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Node Defaults",
          "help": "#nodeDefaults",
          "properties": {
            "groupLabelDisplay": {
              "description": "The label display behavior for group nodes.",
              "type": "string",
              "displayName": "Group Label Display",
              "value": "header",
              "help": "#nodeDefaults.groupLabelDisplay",
              "enumValues": [
                "header",
                "node",
                "off"
              ],
              "propertyEditorValues": {
                "header": {
                  "displayName": "Header"
                },
                "node": {
                  "displayName": "Node"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "header": {
              "description": "An object defining default properties for the node header. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Header",
              "help": "#nodeDefaults.header",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the node headers.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the node headers.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.borderColor"
                },
                "hoverBackgroundColor": {
                  "description": "The background color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Background Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.hoverBackgroundColor"
                },
                "hoverInnerColor": {
                  "description": "The inner color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Inner Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.hoverInnerColor"
                },
                "hoverOuterColor": {
                  "description": "The outer color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Outer Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.hoverOuterColor"
                },
                "isolate": {
                  "description": "Specifies whether isolate behavior is enabled on the node.",
                  "type": "string",
                  "displayName": "Isolate",
                  "value": "on",
                  "help": "#nodeDefaults.header.isolate",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "labelHalign": {
                  "description": "The horizontal alignment of the header title.",
                  "type": "string",
                  "displayName": "Label Halign",
                  "value": "start",
                  "help": "#nodeDefaults.header.labelHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style string defining the style of the header title.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "#nodeDefaults.header.labelStyle"
                },
                "selectedBackgroundColor": {
                  "description": "The background color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Background Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.selectedBackgroundColor"
                },
                "selectedInnerColor": {
                  "description": "The inner color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Inner Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.selectedInnerColor"
                },
                "selectedOuterColor": {
                  "description": "The outer color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Outer Color",
                  "format": "color",
                  "help": "#nodeDefaults.header.selectedOuterColor"
                },
                "useNodeColor": {
                  "description": "Specifies whether the node color should be displayed in the header.",
                  "type": "string",
                  "displayName": "Use Node Color",
                  "value": "off",
                  "help": "#nodeDefaults.header.useNodeColor",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "hoverColor": {
              "description": "The color of the node hover feedback.",
              "type": "string",
              "displayName": "Hover Color",
              "format": "color",
              "help": "#nodeDefaults.hoverColor"
            },
            "labelDisplay": {
              "description": "The label display behavior for leaf nodes.",
              "type": "string",
              "displayName": "Label Display",
              "value": "node",
              "help": "#nodeDefaults.labelDisplay",
              "enumValues": [
                "node",
                "off"
              ],
              "propertyEditorValues": {
                "node": {
                  "displayName": "Node"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment for labels displayed within the node.",
              "type": "string",
              "displayName": "Label Halign",
              "value": "center",
              "help": "#nodeDefaults.labelHalign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "labelMinLength": {
              "description": "The minimum number of visible characters needed to render a truncated label. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Label Min Length",
              "value": 1,
              "units": "pixels",
              "help": "#nodeDefaults.labelMinLength"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Label Style",
              "help": "#nodeDefaults.labelStyle"
            },
            "labelValign": {
              "description": "The vertical alignment for labels displayed within the node.",
              "type": "string",
              "displayName": "Label Valign",
              "value": "center",
              "help": "#nodeDefaults.labelValign",
              "enumValues": [
                "bottom",
                "center",
                "top"
              ],
              "propertyEditorValues": {
                "bottom": {
                  "displayName": "Bottom"
                },
                "center": {
                  "displayName": "Center"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "selectedInnerColor": {
              "description": "The inner color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Inner Color",
              "format": "color",
              "help": "#nodeDefaults.selectedInnerColor"
            },
            "selectedOuterColor": {
              "description": "The outer color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Outer Color",
              "format": "color",
              "help": "#nodeDefaults.selectedOuterColor"
            }
          }
        },
        "nodeSeparators": {
          "description": "Specifies the visual effect for separating the nodes from each other. This allows for adjacent nodes of the same color to be distinguished.",
          "type": "string",
          "displayName": "Node Separators",
          "value": "gaps",
          "help": "#nodeSeparators",
          "enumValues": [
            "bevels",
            "gaps"
          ],
          "propertyEditorValues": {
            "bevels": {
              "displayName": "Bevels"
            },
            "gaps": {
              "displayName": "Gaps"
            }
          }
        },
        "nodes": {
          "description": "An array of objects defining the data for the nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "#nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used.",
                  "type": "Array<string>",
                  "displayName": "Categories"
                },
                "color": {
                  "description": "The fill color of the node.",
                  "type": "string",
                  "displayName": "Color"
                },
                "drilling": {
                  "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "displayName": "Drilling",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "groupLabelDisplay": {
                  "description": "The label display behavior for group nodes.",
                  "type": "string",
                  "displayName": "Group Label Display"
                },
                "header": {
                  "description": "An object defining the properties for the node header.",
                  "type": "object",
                  "displayName": "Header",
                  "properties": {
                    "isolate": {
                      "description": "Specifies whether isolate behavior is enabled on the node.",
                      "type": "string",
                      "displayName": "Isolate",
                      "value": "on",
                      "enumValues": [
                        "off",
                        "on"
                      ]
                    },
                    "labelHalign": {
                      "description": "The horizontal alignment of the header title.",
                      "type": "string",
                      "displayName": "Label Halign",
                      "value": "start",
                      "enumValues": [
                        "center",
                        "end",
                        "start"
                      ]
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the header title. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                      "type": "object",
                      "displayName": "Label Style"
                    },
                    "useNodeColor": {
                      "description": "Specifies whether the node color should be displayed in the header.",
                      "type": "string",
                      "displayName": "Use Node Color",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ]
                    }
                  }
                },
                "id": {
                  "description": "The id of the node. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "any",
                  "displayName": "Id"
                },
                "label": {
                  "description": "The label for this node.",
                  "type": "string",
                  "displayName": "Label"
                },
                "labelDisplay": {
                  "description": "The label display behavior for leaf nodes.",
                  "type": "string",
                  "displayName": "Label Display",
                  "value": "node",
                  "enumValues": [
                    "node",
                    "off"
                  ]
                },
                "labelHalign": {
                  "description": "The horizontal alignment for labels displayed within the node.",
                  "type": "string",
                  "displayName": "Label Halign",
                  "value": "center",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the label. The following style properties are supported: color, cursor, fontFamily, fontSize, fontStyle, fontWeight, textDecoration.",
                  "type": "object",
                  "displayName": "Label Style"
                },
                "labelValign": {
                  "description": "The vertical alignment for labels displayed within the node.",
                  "type": "string",
                  "displayName": "Label Valign",
                  "value": "center",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ]
                },
                "nodes": {
                  "description": "An array of objects with properties for the child nodes.",
                  "type": "Array<Object>",
                  "displayName": "Nodes"
                },
                "pattern": {
                  "description": "The pattern used to fill the node.",
                  "type": "string",
                  "displayName": "Pattern",
                  "value": "none",
                  "enumValues": [
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "none",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "selectable": {
                  "description": "Specifies whether or not the node will be selectable.",
                  "type": "string",
                  "displayName": "Selectable",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this element. Will be lazily created if a function is used. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string|function",
                  "displayName": "Short Desc"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "string",
                  "displayName": "SVG Class Name"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute. Only SVG CSS style properties are supported.",
                  "type": "object",
                  "displayName": "SVG Style"
                },
                "value": {
                  "description": "The value of the node, which determines the relative size of the node.",
                  "type": "number",
                  "displayName": "Value"
                }
              }
            }
          }
        },
        "rootNode": {
          "description": "The id of the root node. When specified, only the root node and children of the root will be displayed.",
          "type": "any",
          "displayName": "Root Node",
          "value": "",
          "help": "#rootNode"
        },
        "selection": {
          "description": "An array containing the ids of the initially selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "eventGroup": "common",
          "value": [],
          "writeback": true,
          "help": "#selection"
        },
        "selectionMode": {
          "description": "Specifies the selection behavior on the treemap. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "#selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only a single item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "sizeLabel": {
          "description": "Specifies the label used in the legend describing the size metric of the treemap.",
          "type": "string",
          "displayName": "Size Label",
          "value": "",
          "translatable": true,
          "help": "#sizeLabel"
        },
        "sorting": {
          "description": "Specifies whether the nodes are sorted by size. Nodes with the same parent are sorted in order of descending size.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "#sorting",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "#tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the treemap. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "#tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "#touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "#trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "#translations",
          "properties": {
            "accessibleContainsControls": {
              "description": "Used to describe a container that contains controls.",
              "type": "string",
              "help": "#translations.accessibleContainsControls"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility.",
              "type": "string",
              "help": "#translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value.",
              "type": "string",
              "help": "#translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices.",
              "type": "string",
              "help": "#translations.labelClearSelection"
            },
            "labelColor": {
              "description": "Used for the color label.",
              "type": "string",
              "help": "#translations.labelColor"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total.",
              "type": "string",
              "help": "#translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility.",
              "type": "string",
              "help": "#translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data.",
              "type": "string",
              "help": "#translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data.",
              "type": "string",
              "help": "#translations.labelNoData"
            },
            "labelSize": {
              "description": "Used for the size label.",
              "type": "string",
              "help": "#translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility.",
              "type": "string",
              "help": "#translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility.",
              "type": "string",
              "help": "#translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility.",
              "type": "string",
              "help": "#translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility.",
              "type": "string",
              "help": "#translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility.",
              "type": "string",
              "help": "#translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility.",
              "type": "string",
              "help": "#translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility.",
              "type": "string",
              "help": "#translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility.",
              "type": "string",
              "help": "#translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility.",
              "type": "string",
              "help": "#translations.stateVisible"
            },
            "tooltipIsolate": {
              "description": "Used for the isolate tooltip.",
              "type": "string",
              "help": "#translations.tooltipIsolate"
            },
            "tooltipRestore": {
              "description": "Used for the restore tooltip.",
              "type": "string",
              "help": "#translations.tooltipRestore"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "#getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getNode": {
          "description": "Returns information for automation testing verification of a specified node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "#getNode",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired node",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "#refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeDrill": {
          "description": "Triggered immediately before any node in the treemap is drilled into.",
          "help": "#event:beforeDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "#event:drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "#contextMenu",
          "preferredContent": [
            "MenuElement"
          ]
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating nodes of the treemap. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeTemplate",
          "preferredContent": [
            "TreemapNodeElement"
          ],
          "data": {
            "componentElement": {
              "description": "The <oj-treemap> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "nodeContentTemplate": {
          "description": "The nodeContentTemplate slot is used to specify custom node content for leaf nodes of a treemap. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#nodeContentTemplate",
          "data": {
            "bounds": {
              "description": "Object containing information on the node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the node area.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The id of the node.",
              "type": "any"
            },
            "data": {
              "description": "The data object of the node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The treemap element.",
              "type": "Element"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "#tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "value": {
              "description": "The value of the hovered node.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "data": {
              "description": "The data object of the hovered node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the hovered node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The treemap element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-validation-group": {
      "name": "oj-validation-group",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "displayName": "Validation Group",
      "implements": [
        "ValidationGroupElement"
      ],
      "type": "core",
      "since": "4.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojvalidationgroup",
          "defaultColumns": "12",
          "minColumns": "2"
        },
        "oracle": {
          "icon": "oj-ux-ico-validation"
        }
      },
      "description": "A validation group tracks and summarizes the current validity state of a group of components.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojValidationGroup.html",
      "propertyLayout": [
        {
          "propertyGroup": "common",
          "items": [
            "valid"
          ]
        }
      ],
      "properties": {
        "valid": {
          "description": "Read-only property used for retrieving the current validity state of the group of components being tracked. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "#valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        }
      },
      "methods": {
        "focusOn": {
          "description": "Sets the focus on one of the enabled components that is being tracked. See the Help documentation for more information.",
          "help": "#focusOn",
          "params": [
            {
              "name": "key",
              "description": "\"@firstInvalidShown\" will focus on first invalidShown enabled component in DOM order, if any. When no parameter is passed in, the method will focus on first enabled component regardless of the valid state, if any. An enabled component is one that is not disabled or readonly.",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them on each enabled component. An enabled component is one that is not disabled or readonly. As a result, the valid property may be updated; e.g., if the valid state was \"invalidHidden\" before showMessages(), the valid state will become \"invalidShown\" after showMessages().",
          "help": "#showMessages",
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-validation-group> accepts any DOM elements in its Default slot but only tracks the validity state of any JET custom element descendents that contain the valid property.",
          "displayName": "default",
          "help": "#Default"
        }
      }
    },
    "oj-waterfall-layout": {
      "name": "oj-waterfall-layout",
      "version": "14.1.0",
      "jetVersion": "14.1.0",
      "type": "core",
      "implements": [
        "WaterfallLayoutElement"
      ],
      "description": "A waterfall layout displays heterogeneous data as a grid of cards.",
      "displayName": "Waterfall Layout",
      "extension": {
        "vbdt": {
          "module": "ojs/ojwaterfalllayout"
        },
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        },
        "oracle": {
          "icon": "oj-ux-ico-waterfall-layout",
          "uxSpecs": [
            "waterfall-layout"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/oj.ojWaterfallLayout.html",
      "since": "9.0.0",
      "properties": {
        "data": {
          "type": "object",
          "description": "Specifies the data for the component. See the Help documentation for more information.",
          "displayName": "Data",
          "help": "#data",
          "extension": {
            "webelement": {
              "exceptionStatus": [
                {
                  "type": "unsupported",
                  "since": "11.0.0",
                  "description": "Data sets from a DataProvider cannot be sent to WebDriverJS; use ViewModels or page variables instead."
                }
              ]
            }
          },
          "value": null
        },
        "scrollPolicy": {
          "type": "string",
          "description": "Specifies how data are fetched as user scrolls towards the bottom of the grid.",
          "displayName": "Scroll Policy",
          "help": "#scrollPolicy",
          "propertyEditorValues": {
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data is fetched when the user scrolls towards the bottom of the grid.",
              "displayName": "Load More On Scroll"
            }
          },
          "enumValues": [
            "loadAll",
            "loadMoreOnScroll"
          ],
          "value": "loadMoreOnScroll"
        },
        "scrollPolicyOptions": {
          "type": "object",
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.",
          "displayName": "Scroll Policy Options",
          "help": "#scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "type": "number",
              "description": "The number of items to fetch in each block.",
              "displayName": "Fetch Size",
              "help": "#scrollPolicyOptions.fetchSize",
              "value": 25
            },
            "maxCount": {
              "type": "number",
              "description": "The maximum total number of items to fetch.",
              "displayName": "Max Count",
              "help": "#scrollPolicyOptions.maxCount",
              "value": 500
            },
            "scroller": {
              "type": "string|Element",
              "description": "The element or a CSS selector string to an element which WaterfallLayout uses to determine the scroll position as well as the maximum scroll position.",
              "displayName": "Scroller",
              "help": "#scrollPolicyOptions.scroller",
              "value": null
            }
          }
        },
        "scrollPosition": {
          "type": "object",
          "description": "Specifies the current scroll position of the WaterfallLayout. See the Help documentation for more information.",
          "displayName": "Scroll Position",
          "help": "#scrollPosition",
          "properties": {
            "y": {
              "type": "number",
              "description": "The vertical position in pixels.",
              "value": 0
            },
            "key": {
              "type": "any",
              "description": "The key of the item. If DataProvider is used for data and the key does not exist in the DataProvider or if the item has not been fetched yet, then the value is ignored."
            },
            "offsetY": {
              "type": "number",
              "description": "The vertical offset in pixels relative to the item identified by key."
            }
          },
          "writeback": true
        }
      },
      "slots": {
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the component. See the Help documentation for more information.",
          "help": "#itemTemplate",
          "maxItems": 1,
          "data": {
            "data": {
              "type": "any",
              "description": "The data for the current item being rendered"
            },
            "index": {
              "type": "number",
              "description": "The zero-based index of the current item during initial rendering. Note the index is not updated in response to item additions and removals."
            },
            "key": {
              "type": "any",
              "description": "The key of the current item being rendered"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "#setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "#getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "#setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    }
  },
  "styleClasses": [
    {
      "name": "oj-animation-backface",
      "kind": "class",
      "displayName": "Animation Backface",
      "description": "Apply to the child element representing the back face of a card element that can be flipped. See the Help documentation for more information.",
      "styleSelector": "*",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Animation.html#oj-animation-backface"
    },
    {
      "name": "oj-hybrid",
      "kind": "class",
      "displayName": "Hybrid App",
      "description": "Class placed on the body tag to indicate this is a hybrid mobile application. See the Help documentation for more information.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid"
    },
    {
      "name": "oj-hybrid-applayout-bar-title",
      "kind": "class",
      "displayName": "Hybrid App Layout Bar Title",
      "description": "Classes used on a bar title element to align and style the text of a hybrid mobile application page title.",
      "styleSelector": ".oj-hybrid-applayout-header div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-bar-title"
    },
    {
      "name": "oj-hybrid-applayout-content",
      "kind": "class",
      "displayName": "Hybrid App Layout Content",
      "description": "Class used on the page content element to ensure proper layout within the application layout.",
      "styleSelector": ".oj-applayout-content div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-content"
    },
    {
      "name": "oj-hybrid-applayout-footer",
      "kind": "class",
      "displayName": "Hybrid App Layout Footer",
      "description": "Class used on a footer element to style a hybrid mobile application header with styles like a background-color or border.",
      "styleSelector": ".oj-applayout-fixed-bottom > footer",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-footer"
    },
    {
      "name": "oj-hybrid-applayout-header",
      "kind": "class",
      "displayName": "Hybrid App Layout Header",
      "description": "Class used on a header element to style a hybrid mobile application header with styles like a background-color or border.",
      "styleSelector": ".oj-hybrid-applayout-fixed-top header",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-header"
    },
    {
      "name": "oj-hybrid-applayout-header-icon-back",
      "kind": "class",
      "displayName": "Hybrid App Layout Header Icon Back",
      "description": "Class used for the header back arrow icon.",
      "styleSelector": "oj-hybrid-applayout-header span, oj-hybrid-applayout-header-no-border span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-header-icon-back"
    },
    {
      "name": "oj-hybrid-applayout-header-no-border",
      "kind": "class",
      "displayName": "Hybrid App Layout Header No Border",
      "description": "Class used on a header element to style a borderless application header with styles like a background-color. See the Help documentation for more information.",
      "styleSelector": ".oj-hybrid-applayout-fixed-top header",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-header-no-border"
    },
    {
      "name": "oj-hybrid-applayout-header-title",
      "kind": "class",
      "displayName": "Hybrid App Layout Bar and Header Title",
      "description": "Classes used on a header title element to align and style the text of a hybrid mobile application page title.",
      "styleSelector": ".oj-hybrid-applayout-bar-title *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-header-title"
    },
    {
      "name": "oj-hybrid-applayout-navbar-app",
      "kind": "class",
      "displayName": "Hybrid App Layout NavBar App",
      "description": "Place around an ojNavigationList element to style a hybrid mobile application navigation bar that is always placed at the bottom of the page. See the Help documentation for more information.",
      "styleSelector": ".oj-applayout-fixed-bottom div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-navbar-app"
    },
    {
      "name": "oj-hybrid-applayout-navbar-page",
      "kind": "class",
      "displayName": "Hybrid App Layout NavBar Page",
      "description": "Place around an ojNavigationList element to style a hybrid mobile application navigation bar that is always placed at the top of the page. See the Help documentation for more information.",
      "styleSelector": ".oj-applayout-fixed-top div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-navbar-page"
    },
    {
      "name": "oj-hybrid-applayout-offcanvas",
      "kind": "class",
      "displayName": "Hybrid App Layout Off-Canvas",
      "description": "Class used to suppress context menus and popups, triggered for copy and paste or links. See the Help documentation for more information.",
      "styleSelector": ".oj-offcanvas-outer-wrapper.oj-offcanvas-page > div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-offcanvas"
    },
    {
      "name": "oj-hybrid-applayout-page",
      "kind": "class",
      "displayName": "Hybrid App Layout Page",
      "description": "Class used to setup the page layout which may include a header, main content area, or footer/navigation bar.",
      "styleSelector": ".oj-offcanvas-page div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-page"
    },
    {
      "name": "oj-hybrid-applayout-toolbar-stretch",
      "kind": "class",
      "displayName": "Hybrid App Layout Toolbar Stretch",
      "description": "Place on an element containing JET buttons to theme buttons that will stretch to the full width and height of its container. This pattern is most commonly seen in a hybrid mobile application footer toolbar.",
      "styleSelector": ".oj-hybrid-applayout-footer *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-applayout-toolbar-stretch"
    },
    {
      "name": "oj-hybrid-show-context-menu",
      "kind": "class",
      "displayName": "Hybrid App",
      "description": "Class placed on the body tag to indicate that context menu should be displayed and not suppressed. See the Help documentation for more information.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-show-context-menu"
    },
    {
      "name": "oj-hybrid-statusbar-spacer",
      "kind": "class",
      "displayName": "Hybrid App Statusbar Spacer",
      "description": "Class placed on the body tag for hybrid mobile applications to correctly pad and space the application header and title for overlaid statusbars. See the Help documentation for more information.",
      "styleSelector": ".oj-hybrid",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobile.html#oj-hybrid-statusbar-spacer"
    },
    {
      "name": "oj-hybrid-padding-[edge]",
      "kind": "template",
      "displayName": "Hybrid Mobile App Padding Specified Edges",
      "description": "Place on an element to add padding with different edges.",
      "styleSelector": ".oj-hybrid-applayout-content",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobilePadding.html#oj-hybrid-padding-[edge]",
      "tokens": [
        {
          "name": "[edge]",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-hybrid-padding",
      "kind": "class",
      "displayName": "Hybrid Mobile App Padding All Edges",
      "description": "Place on an element to add padding to all sides.",
      "styleSelector": ".oj-hybrid-applayout-content",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobilePadding.html#oj-hybrid-padding"
    },
    {
      "name": "oj-platform-android",
      "kind": "class",
      "displayName": "Hybrid Mobile App Platform Android",
      "description": "A markup style class indicating that the hybrid app is being run on the Android platform.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobilePlatformMarkup.html#oj-platform-android"
    },
    {
      "name": "oj-platform-cordova",
      "kind": "class",
      "displayName": "Hybrid Mobile App Platform Cordova",
      "description": "A markup style class indicating that the hybrid app is being run in the Cordova environment (on a mobile device or emulator).",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobilePlatformMarkup.html#oj-platform-cordova"
    },
    {
      "name": "oj-platform-ios",
      "kind": "class",
      "displayName": "Hybrid Mobile App Platform iOS",
      "description": "A markup style class indicating that the hybrid app is being run on the ios platform.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellHybridMobilePlatformMarkup.html#oj-platform-ios"
    },
    {
      "name": "appcontent",
      "kind": "set",
      "displayName": "Application Content",
      "description": "Marker classes to help prevent shifting content in hybrid mobile applications. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellPositioning.html#appcontent",
      "styleRelation": "inclusive",
      "styleItems": [
        {
          "name": "oj-applayout-content",
          "kind": "class",
          "displayName": "App Layout Content"
        },
        {
          "name": "oj-complete",
          "kind": "class",
          "displayName": "App Layout Complete"
        }
      ]
    },
    {
      "name": "oj-applayout-fixed-bottom",
      "kind": "class",
      "displayName": "Application Layout Fixed Bottom",
      "description": "Place on a div to create a fixed bottom region that does not scroll when the page content scrolls. A fixed bottom region for an application shell can contain elements like a footer or navigation bar.",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellPositioning.html#oj-applayout-fixed-bottom"
    },
    {
      "name": "oj-applayout-fixed-top",
      "kind": "class",
      "displayName": "Application Layout Fixed Top",
      "description": "Place on a div to create a fixed top region that does not scroll when the page content scrolls. A fixed top region for an application shell can contain elements like a header or navigation bar.",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellPositioning.html#oj-applayout-fixed-top"
    },
    {
      "name": "oj-web-applayout-body",
      "kind": "class",
      "displayName": "Application Shell Web",
      "description": "Place on the body tag when using oj-web-applayout-* classes.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-body"
    },
    {
      "name": "oj-web-applayout-content",
      "kind": "class",
      "displayName": "App Layout Content",
      "description": "Class used on the page content element to ensure proper layout within the application layout. This class expects the use of oj-flex and oj-flex-items-pad within the contents.",
      "styleSelector": ".oj-web-applayout-page div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-content"
    },
    {
      "name": "oj-web-applayout-content-nopad",
      "kind": "class",
      "displayName": "App Layout Content No Padding",
      "description": "Class used on the page content element to ensure proper layout within the application layout. This class has no padding, and therefore needs to be combined with appropriate padding classes.",
      "styleSelector": ".oj-web-applayout-page *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-content-nopad"
    },
    {
      "name": "oj-web-applayout-footer",
      "kind": "class",
      "displayName": "App Layout Content Footer",
      "description": "Class used on a footer element to style a web application footer with styles like a background-color or border.",
      "styleSelector": ".oj-web-applayout-page footer",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-footer"
    },
    {
      "name": "oj-web-applayout-footer-item",
      "kind": "class",
      "displayName": "AppLayout Content Footer Item",
      "description": "Class used on a footer child element to responsively align its content based on screen size.",
      "styleSelector": ".oj-web-applayout-footer > *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-footer-item"
    },
    {
      "name": "oj-web-applayout-header",
      "kind": "class",
      "displayName": "App Layout Header",
      "description": "Class used on a header element to style a web application header with styles like a background-color or height.",
      "styleSelector": "header",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-header"
    },
    {
      "name": "oj-web-applayout-header-title",
      "kind": "class",
      "displayName": "App Layout Header Title",
      "description": "Class used on a header title element to style the font properties of a web application page title.",
      "styleSelector": ".oj-web-applayout-header *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-header-title"
    },
    {
      "name": "oj-web-applayout-max-width",
      "kind": "class",
      "displayName": "App Layout Content Max Width",
      "description": "Place on elements to restrict their max-width to the maixmum application page width.",
      "styleSelector": ".oj-web-applayout-body *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-max-width"
    },
    {
      "name": "oj-web-applayout-navbar",
      "kind": "class",
      "displayName": "App Layout Content NavBar",
      "description": "Place around the JET navigation list element to style a web application navigation bar.",
      "styleSelector": ".oj-web-applayout-header *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-navbar"
    },
    {
      "name": "oj-web-applayout-offcanvas",
      "kind": "class",
      "displayName": "App Layout Off-Canvas",
      "description": "Class for application layouts requiring a navigation drawer using Off-Canvas. See the Help documentation for more information.",
      "styleSelector": ".oj-web-applayout-body *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-offcanvas"
    },
    {
      "name": "oj-web-applayout-offcanvas-icon",
      "kind": "class",
      "displayName": "App Layout Off-Canvas Icon",
      "description": "Class for application layouts requiring a navigation drawer with a toggle button using Off-Canvas. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-offcanvas-icon"
    },
    {
      "name": "oj-web-applayout-page",
      "kind": "class",
      "displayName": "App Layout Page",
      "description": "Class used to setup the page layout which may include a header, main content area, or footer.",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWeb.html#oj-web-applayout-page"
    },
    {
      "name": "oj-[size](-[only|down])-web-padding(-edge)",
      "kind": "template",
      "displayName": "AppShell Web Padding by screen size",
      "description": "Place on an element to add responsive padding. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWebPadding.html#oj-[size](-[only|down])-web-padding(-edge)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-[only|down])",
          "description": "Applied to only specified screen size or down for screen size and below.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            },
            {
              "name": "-down",
              "displayName": "down",
              "description": "Applied to all less than specified screen size."
            }
          ]
        },
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-web-padding",
      "kind": "class",
      "displayName": "AppShell Web Padding",
      "description": "Place on an element to add web padding to all sides at all display widths.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/AppShellWebPadding.html#oj-web-padding"
    },
    {
      "name": "oj-bg-[background-color]",
      "kind": "template",
      "displayName": "Background Color",
      "description": "Sets the background color.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/BackgroundColor.html#oj-bg-[background-color]",
      "tokens": [
        {
          "name": "[background-color]",
          "description": "Background Colors",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "body",
              "displayName": "Body",
              "description": "background color in variable --oj-body-bg-color"
            },
            {
              "name": "neutral-0",
              "displayName": "Neutral 0",
              "description": "Neutral 0 background color"
            },
            {
              "name": "neutral-10",
              "displayName": "Neutral 10",
              "description": "Neutral 10 background color"
            },
            {
              "name": "neutral-20",
              "displayName": "Neutral 20",
              "description": "Neutral 20 background color"
            },
            {
              "name": "neutral-30",
              "displayName": "Neutral 30",
              "description": "Neutral 30 background color"
            },
            {
              "name": "neutral-170",
              "displayName": "Neutral 170",
              "description": "Neutral 170 background color"
            },
            {
              "name": "neutral-180",
              "displayName": "Neutral 180",
              "description": "Neutral 180 background color"
            },
            {
              "name": "neutral-190",
              "displayName": "Neutral 190",
              "description": "Neutral 190 background color"
            },
            {
              "name": "neutral-200",
              "displayName": "Neutral 200",
              "description": "Neutral 200 background color"
            },
            {
              "name": "brand-10",
              "displayName": "Brand 10",
              "description": "Brand 10 background color"
            },
            {
              "name": "brand-20",
              "displayName": "Brand 20",
              "description": "Brand 20 background color"
            },
            {
              "name": "brand-30",
              "displayName": "Brand 30",
              "description": "Brand 30 background color"
            },
            {
              "name": "danger-10",
              "displayName": "Danger 10",
              "description": "Danger 10 background color"
            },
            {
              "name": "danger-20",
              "displayName": "Danger 20",
              "description": "Danger 20 background color"
            },
            {
              "name": "danger-30",
              "displayName": "Danger 30",
              "description": "Danger 30 background color"
            },
            {
              "name": "warning-10",
              "displayName": "Warning 10",
              "description": "Warning 10 background color"
            },
            {
              "name": "warning-20",
              "displayName": "Warning 20",
              "description": "Warning 20 background color"
            },
            {
              "name": "warning-30",
              "displayName": "Warning 30",
              "description": "Warning 30 background color"
            },
            {
              "name": "success-10",
              "displayName": "Success 10",
              "description": "Success 10 background color"
            },
            {
              "name": "success-20",
              "displayName": "Success 20",
              "description": "Success 20 background color"
            },
            {
              "name": "success-30",
              "displayName": "Success 30",
              "description": "Success 30 background color"
            },
            {
              "name": "info-10",
              "displayName": "Info 10",
              "description": "Info 10 background color"
            },
            {
              "name": "info-20",
              "displayName": "Info 20",
              "description": "Info 20 background color"
            },
            {
              "name": "info-30",
              "displayName": "Info 30",
              "description": "Info 30 background color"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-badge-[badge-color]",
      "kind": "template",
      "displayName": "Badge Color",
      "description": "Sets the badge color.",
      "styleSelector": ".oj-badge",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-badge-[badge-color]",
      "tokens": [
        {
          "name": "[badge-color]",
          "description": "Badge Color",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "danger",
              "displayName": "Danger",
              "description": "emphasized, failure, negative, or destructive states"
            },
            {
              "name": "success",
              "displayName": "Success",
              "description": "valid, positive, or completed states"
            },
            {
              "name": "warning",
              "displayName": "Warning",
              "description": "impeded progress states"
            },
            {
              "name": "info",
              "displayName": "Info",
              "description": "normal progress states"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-badge",
      "kind": "class",
      "displayName": "Badge",
      "description": "A Badge is a label which holds a small amount of information. It consists of a span with the appropriate text inside, with class=\"oj-badge\".",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "badge"
          ]
        }
      },
      "styleSelector": "span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-badge"
    },
    {
      "name": "oj-badge-end",
      "kind": "class",
      "displayName": "End Badge",
      "description": "End badges are used at the edge of a component like card to highlight an item's status.",
      "styleSelector": "span.oj-badge",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-badge-end"
    },
    {
      "name": "oj-badge-sm",
      "kind": "class",
      "displayName": "Small Badge",
      "description": "Create a small badge.",
      "styleSelector": ".oj-badge",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-badge-sm"
    },
    {
      "name": "oj-badge-subtle",
      "kind": "class",
      "displayName": "Subtle Badge Color",
      "description": "Sets the badge color to be subtle.",
      "styleSelector": "span.oj-badge",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-badge-subtle"
    },
    {
      "name": "oj-icon-[icon-size]",
      "kind": "template",
      "displayName": "Icon Size",
      "description": "Sets the size of the circular icon. Default size is medium. Place on the same span that contains oj-icon-circle.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use .oj-icon-circle-[icon-size] instead of .oj-icon-[icon-size]."
        }
      ],
      "styleSelector": ".oj-icon-circle",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-[icon-size]",
      "tokens": [
        {
          "name": "[icon-size]",
          "description": "Icon Size",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "xxs",
              "displayName": "Extra Extra Small",
              "description": "Icon size Extra Extra Small"
            },
            {
              "name": "xs",
              "displayName": "Extra Small",
              "description": "Icon size Extra Small"
            },
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Icon size Small"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Icon size Medium"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Icon size Large"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Icon size Extra Large"
            },
            {
              "name": "xxl",
              "displayName": "XX-Large",
              "description": "Icon size Extra Extra Large"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-icon-circle-[circle-color]",
      "kind": "template",
      "displayName": "Icon Circle Color",
      "description": "Sets the color of the icon circle. If you leave the color class off the color is neutral.",
      "status": [
        {
          "type": "deprecated",
          "since": "11.0.0",
          "description": "Circular Icon has been deprecated. Please use iconClass and shape properties of oj-avatar instead."
        }
      ],
      "styleSelector": ".oj-icon-circle",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-circle-[circle-color]",
      "tokens": [
        {
          "name": "[circle-color]",
          "description": "Icon Circle Colors",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "orange",
              "displayName": "Orange",
              "description": "Orange background"
            },
            {
              "name": "green",
              "displayName": "Green",
              "description": "Green background"
            },
            {
              "name": "teal",
              "displayName": "Teal",
              "description": "Teal background"
            },
            {
              "name": "blue",
              "displayName": "Blue",
              "description": "Blue background"
            },
            {
              "name": "slate",
              "displayName": "Slate",
              "description": "Slate background"
            },
            {
              "name": "mauve",
              "displayName": "Mauve",
              "description": "Mauve background",
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors."
                }
              ]
            },
            {
              "name": "pink",
              "displayName": "Pink",
              "description": "Pink background"
            },
            {
              "name": "purple",
              "displayName": "Purple",
              "description": "Purple background"
            },
            {
              "name": "lilac",
              "displayName": "Lilac",
              "description": "Lilac background"
            },
            {
              "name": "gray",
              "displayName": "Gray",
              "description": "Gray background"
            },
            {
              "name": "red",
              "displayName": "Red",
              "description": "Red background",
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors."
                }
              ]
            },
            {
              "name": "forest",
              "displayName": "Forest",
              "description": "Forest background",
              "status": [
                {
                  "type": "deprecated",
                  "since": "10.0.0",
                  "description": "This value will be removed in the future. Please use other colors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "oj-icon-circle-[icon-size]",
      "kind": "template",
      "displayName": "Icon Circle Size",
      "description": "Sets the size of the circular icon. Default size is medium. Place on the same span that contains oj-icon-circle.",
      "status": [
        {
          "type": "deprecated",
          "since": "11.0.0",
          "description": "Circular Icon has been deprecated. Please use iconClass and shape properties of oj-avatar instead."
        }
      ],
      "styleSelector": ".oj-icon-circle",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-circle-[icon-size]",
      "tokens": [
        {
          "name": "[icon-size]",
          "description": "Icon Size",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "xxs",
              "displayName": "Extra Extra Small",
              "description": "Icon size Extra Extra Small"
            },
            {
              "name": "xs",
              "displayName": "Extra Small",
              "description": "Icon size Extra Small"
            },
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Icon size Small"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Icon size Medium"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Icon size Large"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Icon size Extra Large"
            },
            {
              "name": "xxl",
              "displayName": "XX-Large",
              "description": "Icon size Extra Extra Large"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-icon-circle",
      "kind": "class",
      "displayName": "Circular Icon",
      "description": "Place on an outer span tag to create a circular icon. By default, there is no border. Set the image content as a child of the span. Supported image types include icon fonts and SVG images.",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "icon-circle"
          ]
        }
      },
      "status": [
        {
          "type": "deprecated",
          "since": "11.0.0",
          "description": "Circular Icon has been deprecated. Please use iconClass and shape properties of oj-avatar instead."
        }
      ],
      "styleSelector": "span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-circle"
    },
    {
      "name": "oj-icon-circle-border",
      "kind": "class",
      "displayName": "Circular Icon Border",
      "description": "Add this class to the same outer span as oj-icon-circle to show a border around the icon.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Outer borders on circular icons are no longer recommended."
        }
      ],
      "styleSelector": ".oj-icon-circle",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-circle-border"
    },
    {
      "name": "oj-icon-circle-inner",
      "kind": "class",
      "displayName": "Inner Circular Icon",
      "description": "Place on a span that is a child of oj-icon-circle.",
      "status": [
        {
          "type": "deprecated",
          "since": "11.0.0",
          "description": "Circular Icon has been deprecated. Please use iconClass and shape properties of oj-avatar instead."
        }
      ],
      "styleSelector": ".oj-icon-circle > span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CircularIcon.html#oj-icon-circle-inner"
    },
    {
      "name": "oj-color-invert",
      "kind": "class",
      "displayName": "Color Invert",
      "description": "Class enabling colors which supports dark background.",
      "extension": {
        "themes": {
          "unsupportedThemes": [
            "Alta"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ContrastingBackgroundColor.html#oj-color-invert"
    },
    {
      "name": "oj-contrast-marker",
      "kind": "class",
      "displayName": "Contrast Marker",
      "description": "Class enabling contrasting backgroud colors. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ContrastingBackgroundColor.html#oj-contrast-marker"
    },
    {
      "name": "oj-border(-side)",
      "kind": "template",
      "displayName": "Border",
      "description": "Add a border to the element. If the side is unspecified, then a border is added to all sides.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use panel or divider classes instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Divider.html#oj-border(-side)",
      "tokens": [
        {
          "name": "(-side)",
          "description": "Edge Values",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start (left side in ltr mode, right side in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end (right side in ltr mode, left side in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-divider-[side]",
      "kind": "template",
      "displayName": "Divider",
      "description": "Add a Divider.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Divider.html#oj-divider-[side]",
      "tokens": [
        {
          "name": "[side]",
          "description": "Edge Values",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-divider-margin",
      "kind": "class",
      "displayName": "Divider Margin",
      "description": "Place on an element to add margin",
      "styleSelector": ".oj-divider-top, .oj-divider-bottom, .oj-divider-start, .oj-divider-end",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Divider.html#oj-divider-margin"
    },
    {
      "name": "oj-divider-padding",
      "kind": "class",
      "displayName": "Divider Padding",
      "description": "Place on an element to add padding",
      "styleSelector": ".oj-divider-top, .oj-divider-bottom, .oj-divider-start, .oj-divider-end",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Divider.html#oj-divider-padding"
    },
    {
      "name": "flex-bar",
      "kind": "set",
      "displayName": "Flex Bar Layout",
      "description": "The flex bar layout supports a start/end section sized to its content and a middle section that stretches.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexBar.html#flex-bar",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-flex-bar",
          "kind": "class",
          "displayName": "oj-flex-bar",
          "description": "FlexBar",
          "styleSelector": "div"
        },
        {
          "name": "oj-flex-bar-start",
          "kind": "class",
          "displayName": "oj-flex-bar-start",
          "description": "FlexBar Start Section",
          "styleSelector": ".oj-flex-bar > div"
        },
        {
          "name": "oj-flex-bar-middle",
          "kind": "class",
          "displayName": "oj-flex-bar-middle",
          "description": "FlexBar Middle Section",
          "styleSelector": ".oj-flex-bar > div"
        },
        {
          "name": "oj-flex-bar-end",
          "kind": "class",
          "displayName": "oj-flex-bar-end",
          "description": "FlexBar End Section",
          "styleSelector": ".oj-flex-bar > div"
        }
      ]
    },
    {
      "name": "oj-flex-bar-center-absolute",
      "kind": "class",
      "displayName": "FlexBar Center Absolute",
      "description": "Class used to absolutely center the middle section in a FlexBar. See the Help documentation for more information.",
      "styleSelector": ".oj-flex-bar > div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexBar.html#oj-flex-bar-center-absolute"
    },
    {
      "name": "oj-[size](-only)-align-items(-flexalign)",
      "kind": "template",
      "displayName": "Flex Item Align Items",
      "description": "Responsive classes to set the align-items property. In Redwood these classes use the !important rule.",
      "styleSelector": ".oj-flex, .oj-flex-bar-start, .oj-flex-bar-middle, .oj-flex-bar-end",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-align-items(-flexalign)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        },
        {
          "name": "(-flexalign)",
          "description": "Values for align-items property.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-flex-start",
              "displayName": "Flex Start",
              "description": "Flex items are packed toward the start of the line."
            },
            {
              "name": "-flex-end",
              "displayName": "Flex End",
              "description": "Flex items are packed toward the end of the line."
            },
            {
              "name": "-center",
              "displayName": "Center",
              "description": "Flex items are packed toward the center of the line."
            },
            {
              "name": "-baseline",
              "displayName": "Baseline",
              "description": "All participating flex items on the line are aligned such that their baselines align"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-align-self(-flexalignself)",
      "kind": "template",
      "displayName": "Flex Item Align Self",
      "description": "Responsive classes to set the align-self property. In Redwood these classes use the !important rule.",
      "styleSelector": ".oj-flex-item",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-align-self(-flexalignself)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        },
        {
          "name": "(-flexalignself)",
          "description": "Values for align-self property.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-flex-start",
              "displayName": "Flex Start",
              "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
            },
            {
              "name": "-flex-end",
              "displayName": "Flex End",
              "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
            },
            {
              "name": "-center",
              "displayName": "Center",
              "description": "The flex item’s margin box is centered in the cross axis within the line."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-flex-[flex]",
      "kind": "template",
      "displayName": "Flex Item Flex",
      "description": "Overrides the element's flex property to 0, 1 or 'initial'. 'initial' is one of the common flex values). See note about a known webkit bug.",
      "styleSelector": ".oj-flex-item",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-flex-[flex]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        },
        {
          "name": "[flex]",
          "description": "Overrides the element's flex property to 0, 1 or 'initial'.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "Flex 0",
              "description": "Sizes the item according to the width/height properties, but makes the flex item fully inflexible."
            },
            {
              "name": "1",
              "displayName": "Flex 1",
              "description": "Sizes the item based on the width/height properties, but makes them fully flexible"
            },
            {
              "name": "initial",
              "displayName": "initial",
              "description": "This is the initial value. Sizes the item based on the width/height properties and will size the flex item based on its contents."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-flex-direction-column",
      "kind": "template",
      "displayName": "Flex Direction",
      "description": "Responsive classes to set the flex-direction property. In Redwood these classes use the !important rule.",
      "styleSelector": ".oj-flex",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-flex-direction-column",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-flex-items-[flex]",
      "kind": "template",
      "displayName": "Flex",
      "description": "Overrides the children's flex property to 1 or 'initial'. 'initial' is one of the common flex values",
      "styleSelector": ".oj-flex",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-flex-items-[flex]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        },
        {
          "name": "[flex]",
          "description": "Overrides the element's flex property to 0, 1 or 'initial'.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "Flex 0",
              "description": "Sizes the item according to the width/height properties, but makes the flex item fully inflexible."
            },
            {
              "name": "1",
              "displayName": "Flex 1",
              "description": "Sizes the item based on the width/height properties, but makes them fully flexible"
            },
            {
              "name": "initial",
              "displayName": "initial",
              "description": "This is the initial value. Sizes the item based on the width/height properties and will size the flex item based on its contents."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-flex-wrap-nowrap",
      "kind": "template",
      "displayName": "Flex Item Wrap",
      "description": "Responsive classes to set the flex-wrap property.",
      "styleSelector": ".oj-flex",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-flex-wrap-nowrap",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size](-only)-justify-content(-flexjustify)",
      "kind": "template",
      "displayName": "Flex Justify Content",
      "description": "Responsive classes to set the justify-content property.In Redwood these classes use the !important rule.",
      "styleSelector": ".oj-flex, .oj-flex-bar-start, .oj-flex-bar-middle, .oj-flex-bar-end",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size](-only)-justify-content(-flexjustify)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "(-only)",
          "description": "Applies to only specified screen size.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-only",
              "displayName": "only",
              "description": "Applied to only specified screen size."
            }
          ]
        },
        {
          "name": "(-flexjustify)",
          "description": "Values for justify-content property.",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-flex-start",
              "displayName": "Flex Start",
              "description": "Items are at the start."
            },
            {
              "name": "-flex-end",
              "displayName": "Flex End",
              "description": "Items are at the end."
            },
            {
              "name": "-center",
              "displayName": "Center",
              "description": "Items are centered."
            },
            {
              "name": "-space-between",
              "displayName": "Space Between",
              "description": "Space is distributed between items."
            },
            {
              "name": "-space-around",
              "displayName": "Space Around",
              "description": "Space is distributed around items."
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-order-[0-5]",
      "kind": "template",
      "displayName": "Flex Item Order",
      "description": "Responsive classes to set the order property. See the Help documentation for more information.",
      "styleSelector": ".oj-flex-item",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-[size]-order-[0-5]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[0-5]",
          "description": "Controls the order in which flex items appear within the flex container",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "0",
              "description": "0th place"
            },
            {
              "name": "1",
              "displayName": "1",
              "description": "1st place"
            },
            {
              "name": "2",
              "displayName": "2",
              "description": "2nd place"
            },
            {
              "name": "3",
              "displayName": "3",
              "description": "3rd place"
            },
            {
              "name": "4",
              "displayName": "4",
              "description": "4th place"
            },
            {
              "name": "5",
              "displayName": "5",
              "description": "5th place"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-flex",
      "kind": "class",
      "displayName": "FlexBox Layout Class",
      "description": "The class oj-flex can be used for a flexbox based layout.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-flex"
    },
    {
      "name": "oj-flex-item",
      "kind": "class",
      "displayName": "Flex Item",
      "description": "The class oj-flex-item, child of oj-flex.",
      "styleSelector": ".oj-flex > *",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-flex-item"
    },
    {
      "name": "oj-flex-items-pad",
      "kind": "class",
      "displayName": "Flex Item Pad",
      "description": "Place the pad class on a container or its parent to add child padding.",
      "status": [
        {
          "type": "deprecated",
          "since": "8.0.0",
          "description": "Use appropriate padding classes instead."
        }
      ],
      "styleSelector": ".oj-flex",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FlexLayout.html#oj-flex-items-pad"
    },
    {
      "name": "form-control",
      "kind": "set",
      "displayName": "Form Control Type",
      "description": "Specify whether or not a contained form component should inherit the container's styles, such as height, border, color and background-color. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FormControls.html#form-control",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-form-control-default",
          "kind": "class",
          "displayName": "Form Control Default",
          "description": "Use this class to prevent a contained form control from inheriting the container's styles.",
          "styleSelector": "div"
        },
        {
          "name": "oj-form-control-inherit",
          "kind": "class",
          "displayName": "Form Control Inherit",
          "description": "Use this class to specify that a contained form control should inherit the container's styles.",
          "styleSelector": "div"
        }
      ]
    },
    {
      "name": "oj-form-control",
      "kind": "class",
      "displayName": "Form Control Class",
      "description": "Class automatically generated by editable value components, but may be specified for html elements that desire to be styled like a component.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This Class is automatically generated by editable value components. Although it will still be used internally, we are deprecating this for external use."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/FormControls.html#oj-form-control"
    },
    {
      "name": "oj-[size]-form-across",
      "kind": "template",
      "displayName": "Form laid across",
      "description": "This class can be placed on a form for components to be laid across.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component component instead, with direction='row'."
        }
      ],
      "styleSelector": "oj-form",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-[size]-form-across",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-label-inline",
      "kind": "template",
      "displayName": "Inline Label",
      "description": "This class can be placed on an element for inline label.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead. To accomplish individual label alignment within an oj-form-layout component, you would use an oj-label-value child element and set the desired label-edge on the oj-label-value component."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-[size]-label-inline",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-label-nowrap",
      "kind": "template",
      "displayName": "Non wrapping Label",
      "description": "This class can be placed on a label element for nowrap label.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-[size]-label-nowrap",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-labels-inline",
      "kind": "template",
      "displayName": "Inline Labels",
      "description": "This class can be placed on an element for inline labels.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-[size]-labels-inline",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-labels-nowrap",
      "kind": "template",
      "displayName": "Non wrapping Labels",
      "description": "This class can be placed on a labels element for nowrap labels.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead, with label-wrapping='truncate'."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-[size]-labels-nowrap",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-form",
      "kind": "class",
      "displayName": "Form",
      "description": "This class was originally added for CSS based form layout.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form"
    },
    {
      "name": "oj-form-cols-labels-inline",
      "kind": "class",
      "displayName": "Forms with inline column labels",
      "description": "This class was originally added for form layout column labels to be inline.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead, with label-edge='start'."
        }
      ],
      "styleSelector": "oj-form",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form-cols-labels-inline"
    },
    {
      "name": "oj-form-cols-max2",
      "kind": "class",
      "displayName": "Max Columns Forms",
      "description": "This class was originally added for form layout max columns.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead, with the max-columns attribute set to the maximum number of columns desired."
        }
      ],
      "styleSelector": "oj-form",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form-cols-max2"
    },
    {
      "name": "oj-form-control-group",
      "kind": "class",
      "displayName": "Form Control Group",
      "description": "This class was originally added for CSS based form layout to group components.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout to group components. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form-control-group"
    },
    {
      "name": "oj-form-layout",
      "kind": "class",
      "displayName": "Form Layout",
      "description": "A form layout manages the layout of labels and fields in a form. This class was originally added for CSS based form layout.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form-layout"
    },
    {
      "name": "oj-form-no-dividers",
      "kind": "class",
      "displayName": "Form with no dividers",
      "description": "This class was originally added for CSS based form layout with no dividers.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "This class was originally added for CSS based form layout with no dividers. Use the oj-form-layout component instead."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Forms.html#oj-form-no-dividers"
    },
    {
      "name": "oj-header-border",
      "kind": "class",
      "displayName": "Heading border",
      "description": "Create a heading tag (h1 to h6) and add class=\"oj-header-border\".",
      "styleSelector": "h1, h2, h3, h4, h5, h6",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Heading.html#oj-header-border"
    },
    {
      "name": "box-sizing",
      "kind": "set",
      "displayName": "Box Sizing",
      "description": "Classes to set box-sizing to either border-box or content-box. These classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#box-sizing",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-border-box",
          "kind": "class",
          "displayName": "Border Box",
          "description": "Sets box-sizing: border-box"
        },
        {
          "name": "oj-helper-content-box",
          "kind": "class",
          "displayName": "Content Box",
          "description": "Sets box-sizing: content-box"
        }
      ]
    },
    {
      "name": "display",
      "kind": "set",
      "displayName": "Display",
      "description": "Helper classes to set display to none or inline-block. Uses !important rule. Use the oj-helper-hidden class instead of setting the global attribute hidden as the hidden attribute may get overridden by component style definitions.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#display",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-hidden",
          "kind": "class",
          "displayName": "Hidden",
          "description": "Sets display to none."
        },
        {
          "name": "oj-helper-inline-block",
          "kind": "class",
          "displayName": "Hidden",
          "description": "Sets display to inline-block."
        }
      ]
    },
    {
      "name": "font-variant-numeric",
      "kind": "set",
      "displayName": "Font Variant Numeric",
      "description": "Classes to set font-variant-numeric values. On fonts that support tabular-nums the numbers are all the same size, allowing them to be easily lined up in columns. These classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#font-variant-numeric",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-tabular-nums",
          "kind": "class",
          "displayName": "Tabular Nums",
          "description": "Sets font-variant-numeric: tabular-nums"
        },
        {
          "name": "oj-helper-proportional-nums",
          "kind": "class",
          "displayName": "Proportional Nums",
          "description": "Sets font-variant-numeric: proportional-nums"
        }
      ]
    },
    {
      "name": "justify-content",
      "kind": "set",
      "displayName": "Justify Content",
      "description": "Classes that help justify the content of the element. These classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#justify-content",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-justify-content-flex-start",
          "kind": "class",
          "displayName": "Justify Content Flex Start",
          "description": "Aligns flex content with the start of the line."
        },
        {
          "name": "oj-helper-justify-content-flex-end",
          "kind": "class",
          "displayName": "Justify Content Flex End",
          "description": "Aligns flex content with the end of the line."
        },
        {
          "name": "oj-helper-justify-content-center",
          "kind": "class",
          "displayName": "Justify Content Flex Center",
          "description": "Aligns flex content with the center of the line."
        },
        {
          "name": "oj-helper-justify-content-space-between",
          "kind": "class",
          "displayName": "Justify Content Space Between",
          "description": "Justifies flex content with even distribution."
        },
        {
          "name": "oj-helper-justify-content-space-around",
          "kind": "class",
          "displayName": "Justify Content Space Around",
          "description": "Justifies flex content with equal space around them."
        },
        {
          "name": "oj-helper-justify-content-right",
          "kind": "class",
          "displayName": "Justify Content Right",
          "description": "Aligns flex content to the right."
        },
        {
          "name": "oj-helper-justify-content-left",
          "kind": "class",
          "displayName": "Justify Content Left",
          "description": "Aligns flex content to the left."
        }
      ]
    },
    {
      "name": "margin-auto",
      "kind": "set",
      "displayName": "Margin auto",
      "description": "Classes to set margin to auto. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#margin-auto",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-margin-auto",
          "kind": "class",
          "displayName": "Margin auto",
          "description": "Sets the left and right margin to auto"
        },
        {
          "name": "oj-helper-margin-start-auto",
          "kind": "class",
          "displayName": "Start margin auto",
          "description": "Sets the start margin to auto (right margin when dir='rtl' on the hmtl element, otherwise left margin)"
        },
        {
          "name": "oj-helper-margin-end-auto",
          "kind": "class",
          "displayName": "End margin auto",
          "description": "Sets the end margin to auto (left margin when dir='rtl' on the hmtl element, otherwise right margin)"
        }
      ]
    },
    {
      "name": "text-align",
      "kind": "set",
      "displayName": "Text Alignment",
      "description": "Classes that help align text of the element. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#text-align",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-text-align-start",
          "kind": "class",
          "displayName": "Text Align Start",
          "description": "Aligns text to the right when dir='rtl' on the hmtl element, otherwise aligns text to the left."
        },
        {
          "name": "oj-helper-text-align-end",
          "kind": "class",
          "displayName": "Text Align End",
          "description": "Aligns text to the left when dir='rtl' on the hmtl element, otherwise aligns text to the right."
        },
        {
          "name": "oj-helper-text-align-left",
          "kind": "class",
          "displayName": "Text Align Left",
          "description": "Aligns text to the left. Uses !important rule."
        },
        {
          "name": "oj-helper-text-align-right",
          "kind": "class",
          "displayName": "Text Align Right",
          "description": "Aligns text to the right. Uses !important rule."
        },
        {
          "name": "oj-helper-text-align-center",
          "kind": "class",
          "displayName": "Text Align Center",
          "description": "Aligns text to the center. Uses !important rule."
        }
      ]
    },
    {
      "name": "white-space",
      "kind": "set",
      "displayName": "white-space",
      "description": "Classes to set white-space. These classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#white-space",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-helper-white-space-normal",
          "kind": "class",
          "displayName": "whitespace normal",
          "description": "Sets white-space: normal"
        },
        {
          "name": "oj-helper-white-space-nowrap",
          "kind": "class",
          "displayName": "whitespace nowrap",
          "description": "Sets white-space: nowrap"
        },
        {
          "name": "oj-helper-white-space-pre",
          "kind": "class",
          "displayName": "whitespace pre",
          "description": "Sets white-space: pre"
        },
        {
          "name": "oj-helper-white-space-pre-wrap",
          "kind": "class",
          "displayName": "whitespace pre-wrap",
          "description": "Sets white-space: pre-wrap"
        },
        {
          "name": "oj-helper-white-space-pre-line",
          "kind": "class",
          "displayName": "whitespace pre-line",
          "description": "Sets white-space: pre-line"
        }
      ]
    },
    {
      "name": "oj-helper-clearfix",
      "kind": "class",
      "displayName": "Helper Clearfix",
      "description": "Clears floats before the close of the element.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-clearfix"
    },
    {
      "name": "oj-helper-flex",
      "kind": "class",
      "displayName": "oj-helper-flex",
      "description": "This class was originally added when prefixing was needed for cross browser support, it is being deprecated because prefixing is no longer needed. It has always been documented that you must also set the standard syntax display: flex with a class or style because once all jet supported browsers support the standard syntax this class will be removed.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "Prefixing is no longer needed."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-flex"
    },
    {
      "name": "oj-helper-hidden-accessible",
      "kind": "class",
      "displayName": "Helper Hidden Accessible",
      "description": "Class to help hide text from sighted users but not from screen readers. See the Help documentation for more information.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-hidden-accessible"
    },
    {
      "name": "oj-helper-hyphens-auto",
      "kind": "class",
      "displayName": "oj-helper-hyphens-auto",
      "description": "Sets hypens: auto (Note that there are browser support limitations). This class uses the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-hyphens-auto"
    },
    {
      "name": "oj-helper-inline-flex",
      "kind": "class",
      "displayName": "oj-helper-inline-flex",
      "description": "This class was originally added when prefixing was needed for cross browser support, it is being deprecated because prefixing is no longer needed. It has always been documented that you must also set the standard syntax display: inline-flex with a class or style because once all jet supported browsers support the standard syntax this class will be removed.",
      "status": [
        {
          "type": "deprecated",
          "since": "7.0.1",
          "description": "Prefixing is no longer needed."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-inline-flex"
    },
    {
      "name": "oj-helper-overflow-wrap-anywhere",
      "kind": "class",
      "displayName": "oj-helper-overflow-wrap-anywhere",
      "description": "Sets overflow-wrap: anywhere, on browsers that don't support 'anywhere' uses 'break-word' instead. This class uses the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Helpers.html#oj-helper-overflow-wrap-anywhere"
    },
    {
      "name": "oj-fwk-icon-[fwk-icon]",
      "kind": "template",
      "displayName": "Framework Icon",
      "description": "Framework icons are deprecated.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Internal Oracle teams should replace with Redwood icons, external teams may want to use apex (https://apex.oracle.com/fontapex/) or font awesome (https://fontawesome.com/icons)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-fwk-icon-[fwk-icon]",
      "tokens": [
        {
          "name": "[fwk-icon]",
          "description": "Framework Icon",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "arrow-e",
              "displayName": "arrow-e",
              "description": "arrow-e"
            },
            {
              "name": "arrow-n",
              "displayName": "arrow-n",
              "description": "arrow-n"
            },
            {
              "name": "arrow-ne",
              "displayName": "arrow-ne",
              "description": "arrow-ne"
            },
            {
              "name": "arrow-nw",
              "displayName": "arrow-nw",
              "description": "arrow-nw"
            },
            {
              "name": "arrow-s",
              "displayName": "arrow-s",
              "description": "arrow-s"
            },
            {
              "name": "arrow-se",
              "displayName": "arrow-se",
              "description": "arrow-se"
            },
            {
              "name": "arrow-sw",
              "displayName": "arrow-sw",
              "description": "arrow-sw"
            },
            {
              "name": "arrow-w",
              "displayName": "arrow-w",
              "description": "arrow-w"
            },
            {
              "name": "arrow02-e",
              "displayName": "arrow02-e",
              "description": "arrow02-e"
            },
            {
              "name": "arrow02-n",
              "displayName": "arrow02-n",
              "description": "arrow02-n"
            },
            {
              "name": "arrow02-ne",
              "displayName": "arrow02-ne",
              "description": "arrow02-ne"
            },
            {
              "name": "arrow02-nw",
              "displayName": "arrow02-nw",
              "description": "arrow02-nw"
            },
            {
              "name": "arrow02-s",
              "displayName": "arrow02-s",
              "description": "arrow02-s"
            },
            {
              "name": "arrow02-se",
              "displayName": "arrow02-se",
              "description": "arrow02-se"
            },
            {
              "name": "arrow02-sw",
              "displayName": "arrow02-sw",
              "description": "arrow02-sw"
            },
            {
              "name": "arrow02-w",
              "displayName": "arrow02-w",
              "description": "arrow02-w"
            },
            {
              "name": "arrow03-e",
              "displayName": "arrow03-e",
              "description": "arrow03-e"
            },
            {
              "name": "arrow03-n",
              "displayName": "arrow03-n",
              "description": "arrow03-n"
            },
            {
              "name": "arrow03-ne",
              "displayName": "arrow03-ne",
              "description": "arrow03-ne"
            },
            {
              "name": "arrow03-nw",
              "displayName": "arrow03-nw",
              "description": "arrow03-nw"
            },
            {
              "name": "arrow03-s",
              "displayName": "arrow03-s",
              "description": "arrow03-s"
            },
            {
              "name": "arrow03-se",
              "displayName": "arrow03-se",
              "description": "arrow03-se"
            },
            {
              "name": "arrow03-sw",
              "displayName": "arrow03-sw",
              "description": "arrow03-sw"
            },
            {
              "name": "arrow03-w",
              "displayName": "arrow03-w",
              "description": "arrow03-w"
            },
            {
              "name": "arrowtail-e",
              "displayName": "arrowtail-e",
              "description": "arrowtail-e"
            },
            {
              "name": "arrowtail-n",
              "displayName": "arrowtail-n",
              "description": "arrowtail-n"
            },
            {
              "name": "arrowtail-s",
              "displayName": "arrowtail-s",
              "description": "arrowtail-s"
            },
            {
              "name": "arrowtail-w",
              "displayName": "arrowtail-w",
              "description": "arrowtail-w"
            },
            {
              "name": "back",
              "displayName": "back",
              "description": "back"
            },
            {
              "name": "next",
              "displayName": "next",
              "description": "next"
            },
            {
              "name": "calendar-clock",
              "displayName": "calendar-clock",
              "description": "calendar-clock"
            },
            {
              "name": "calendar",
              "displayName": "calendar",
              "description": "calendar"
            },
            {
              "name": "clock",
              "displayName": "clock",
              "description": "clock"
            },
            {
              "name": "caret-e",
              "displayName": "caret-e",
              "description": "caret-e"
            },
            {
              "name": "caret-n",
              "displayName": "caret-n",
              "description": "caret-n"
            },
            {
              "name": "caret-s",
              "displayName": "caret-s",
              "description": "caret-s"
            },
            {
              "name": "caret-w",
              "displayName": "caret-w",
              "description": "caret-w"
            },
            {
              "name": "caret02-e",
              "displayName": "caret02-e",
              "description": "caret02-e"
            },
            {
              "name": "caret02-n",
              "displayName": "caret02-n",
              "description": "caret02-n"
            },
            {
              "name": "caret02-s",
              "displayName": "caret02-s",
              "description": "caret02-s"
            },
            {
              "name": "caret02-w",
              "displayName": "caret02-w",
              "description": "caret02-w"
            },
            {
              "name": "caret02end-e",
              "displayName": "caret02end-e",
              "description": "caret02end-e"
            },
            {
              "name": "caret02end-n",
              "displayName": "caret02end-n",
              "description": "caret02end-n"
            },
            {
              "name": "caret02end-s",
              "displayName": "caret02end-s",
              "description": "caret02end-s"
            },
            {
              "name": "caret02end-w",
              "displayName": "caret02end-w",
              "description": "caret02end-w"
            },
            {
              "name": "caret03-e",
              "displayName": "caret03-e",
              "description": "caret03-e"
            },
            {
              "name": "caret03-n",
              "displayName": "caret03-n",
              "description": "caret03-n"
            },
            {
              "name": "caret03-s",
              "displayName": "caret03-s",
              "description": "caret03-s"
            },
            {
              "name": "caret03-w",
              "displayName": "caret03-w",
              "description": "caret03-w"
            },
            {
              "name": "checkbox-off",
              "displayName": "checkbox-off",
              "description": "checkbox-off"
            },
            {
              "name": "checkbox-on",
              "displayName": "checkbox-on",
              "description": "checkbox-on"
            },
            {
              "name": "checkmark",
              "displayName": "checkmark",
              "description": "checkmark"
            },
            {
              "name": "corner-drag",
              "displayName": "corner-drag",
              "description": "corner-drag"
            },
            {
              "name": "cross",
              "displayName": "cross",
              "description": "cross"
            },
            {
              "name": "cross02",
              "displayName": "cross02",
              "description": "cross02"
            },
            {
              "name": "cross03",
              "displayName": "cross03",
              "description": "cross03"
            },
            {
              "name": "dots-horizontal",
              "displayName": "dots-horizontal",
              "description": "dots-horizontal"
            },
            {
              "name": "dots-vertical",
              "displayName": "dots-vertical",
              "description": "dots-vertical"
            },
            {
              "name": "drag-horizontal",
              "displayName": "drag-horizontal",
              "description": "drag-horizontal"
            },
            {
              "name": "drag-vertical",
              "displayName": "drag-vertical",
              "description": "drag-vertical"
            },
            {
              "name": "drag",
              "displayName": "drag",
              "description": "drag"
            },
            {
              "name": "folderhierarchy",
              "displayName": "folderhierarchy",
              "description": "folderhierarchy"
            },
            {
              "name": "grid",
              "displayName": "grid",
              "description": "grid"
            },
            {
              "name": "hamburger",
              "displayName": "hamburger",
              "description": "hamburger"
            },
            {
              "name": "help",
              "displayName": "help",
              "description": "help"
            },
            {
              "name": "info",
              "displayName": "info",
              "description": "info"
            },
            {
              "name": "list",
              "displayName": "list",
              "description": "list"
            },
            {
              "name": "magnifier",
              "displayName": "magnifier",
              "description": "magnifier"
            },
            {
              "name": "marquee",
              "displayName": "marquee",
              "description": "marquee"
            },
            {
              "name": "maximize",
              "displayName": "maximize",
              "description": "maximize"
            },
            {
              "name": "message-confirmation",
              "displayName": "message-confirmation",
              "description": "message-confirmation"
            },
            {
              "name": "message-error",
              "displayName": "message-error",
              "description": "message-error"
            },
            {
              "name": "message-info",
              "displayName": "message-info",
              "description": "message-info"
            },
            {
              "name": "message-warning",
              "displayName": "message-warning",
              "description": "message-warning"
            },
            {
              "name": "minimize",
              "displayName": "minimize",
              "description": "minimize"
            },
            {
              "name": "minus",
              "displayName": "minus",
              "description": "minus"
            },
            {
              "name": "node-collapse",
              "displayName": "node-collapse",
              "description": "node-collapse"
            },
            {
              "name": "node-expand",
              "displayName": "node-expand",
              "description": "node-expand"
            },
            {
              "name": "pan",
              "displayName": "pan",
              "description": "pan"
            },
            {
              "name": "plus",
              "displayName": "plus",
              "description": "plus"
            },
            {
              "name": "radiobutton-off",
              "displayName": "radiobutton-off",
              "description": "radiobutton-off"
            },
            {
              "name": "radiobutton-on",
              "displayName": "radiobutton-on",
              "description": "radiobutton-on"
            },
            {
              "name": "sort",
              "displayName": "sort",
              "description": "sort"
            },
            {
              "name": "sortrelevancehigh",
              "displayName": "sortrelevancehigh",
              "description": "sortrelevancehigh"
            },
            {
              "name": "tree-document",
              "displayName": "tree-document",
              "description": "tree-document"
            },
            {
              "name": "tree-folder-collapsed",
              "displayName": "tree-folder-collapsed",
              "description": "tree-folder-collapsed"
            },
            {
              "name": "tree-folder-open",
              "displayName": "tree-folder-open",
              "description": "tree-folder-open"
            },
            {
              "name": "tristate-partial",
              "displayName": "tristate-partial",
              "description": "tristate-partial"
            },
            {
              "name": "users",
              "displayName": "users",
              "description": "users"
            },
            {
              "name": "warning",
              "displayName": "warning",
              "description": "warning"
            },
            {
              "name": "zoom-in",
              "displayName": "zoom-in",
              "description": "zoom-in"
            },
            {
              "name": "zoom-out",
              "displayName": "zoom-out",
              "description": "zoom-out"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-icon-color-[icon-color]",
      "kind": "template",
      "displayName": "Icon Colors",
      "description": "Sets the color for icon font icons. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-icon-color-[icon-color]",
      "tokens": [
        {
          "name": "[icon-color]",
          "description": "Icon Colors",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "primary",
              "displayName": "Primary icon color",
              "description": "Primary icon color"
            },
            {
              "name": "secondary",
              "displayName": "Secondary icon color",
              "description": "Secondary icon color"
            },
            {
              "name": "disabled",
              "displayName": "Disabled icon color",
              "description": "Disabled icon color"
            },
            {
              "name": "danger",
              "displayName": "Danger icon color",
              "description": "Danger icon color"
            },
            {
              "name": "warning",
              "displayName": "Warning icon color",
              "description": "Warning icon color"
            },
            {
              "name": "success",
              "displayName": "Success icon color",
              "description": "Success icon color"
            },
            {
              "name": "info",
              "displayName": "Success icon color",
              "description": "Success icon color"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-clickable-icon",
      "kind": "class",
      "displayName": "Clickable Icon",
      "description": "JET clickable icon based upon style context variables. See the Help documentation for more information.",
      "styleSelector": "span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-clickable-icon"
    },
    {
      "name": "oj-clickable-icon-nocontext",
      "kind": "class",
      "displayName": "Clickable Icon No Context",
      "description": "JET clickable icon that ignores style context variables. See the Help documentation for more information.",
      "styleSelector": "span",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-clickable-icon-nocontext"
    },
    {
      "name": "oj-fwk-icon",
      "kind": "class",
      "displayName": "Framework Icon",
      "description": "Framework icons are deprecated.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Internal Oracle teams should replace with Redwood icons, external teams may want to use apex (https://apex.oracle.com/fontapex/) or font awesome (https://fontawesome.com/icons)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-fwk-icon"
    },
    {
      "name": "oj-icon",
      "kind": "class",
      "displayName": "High contrast icon helper class",
      "description": "High contrast icon helper class",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Icons.html#oj-icon"
    },
    {
      "name": "oj-label-for-non-control",
      "kind": "class",
      "displayName": "oj-label Styling for non-JET Form Controls",
      "description": "Place on a label element along with oj-label-nocomp when you want to style it like a JET oj-label but the label isn't associated with a JET form control, such as when you have a label for some plain text.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "This class is not supported in the Redwood nor the Alta theme, and will be removed from the JET API in a future release. Use a JET oj-label component with its label-id attribute instead."
        }
      ],
      "styleSelector": ".oj-label-nocomp",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Labels.html#oj-label-for-non-control"
    },
    {
      "name": "oj-label-inline",
      "kind": "class",
      "displayName": "Inline Label",
      "description": "Place on a label element along with oj-label-nocomp to inline the label with the sibling DOM element when you don't want to use the responsive design classes (e.g., oj-md-labels-inline).",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "This class is not supported in the Redwood theme, and will be removed from the JET API in a future release. Use a JET oj-label-value with label-edge='start' instead."
        }
      ],
      "styleSelector": ".oj-label-nocomp",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Labels.html#oj-label-inline"
    },
    {
      "name": "oj-label-inline-top",
      "kind": "class",
      "displayName": "Inline Label Zero Margin Top",
      "description": "Place on a label element along with oj-label-nocomp and oj-label-inline selectors to inline the label with the sibling DOM element and have zero margin-top.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "This class is not supported in the Redwood theme, and will be removed from the JET API in a future release. Use a JET oj-label-value with label-edge='start' instead."
        }
      ],
      "styleSelector": ".oj-label-nocomp.oj-label-inline",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Labels.html#oj-label-inline-top"
    },
    {
      "name": "oj-label-nocomp",
      "kind": "class",
      "displayName": "oj-label Styling for non-JET Components",
      "description": "Place on a label element when it isn't a JET component but you want it to be styled like a JET oj-label.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "This class is not supported in the Redwood theme, and will be removed from the JET API in a future release. Use a JET oj-label component with its label-id attribute instead."
        }
      ],
      "styleSelector": "label",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Labels.html#oj-label-nocomp"
    },
    {
      "name": "oj-label-nowrap",
      "kind": "class",
      "displayName": "No Wrap Label",
      "description": "Place on a label element along with oj-label-nocomp to have it not wrap when you don't want to use the responsive design classes (e.g., oj-md-labels-nowrap or oj-md-label-nowrap).",
      "styleSelector": ".oj-label-nocomp",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Labels.html#oj-label-nowrap"
    },
    {
      "name": "oj-link-[link-color]",
      "kind": "template",
      "displayName": "Link Color",
      "description": "Sets the link color.",
      "styleSelector": "a",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Link.html#oj-link-[link-color]",
      "tokens": [
        {
          "name": "[link-color]",
          "description": "Link Color",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "subtle-primary",
              "displayName": "Subtle primary",
              "description": "a link that should be a subtle color"
            },
            {
              "name": "subtle-secondary",
              "displayName": "Subtle Secondary",
              "description": "a link that should be a secondary subtle color"
            },
            {
              "name": "disabled",
              "displayName": "Disabled",
              "description": "a link that is disabled"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-link-[link-usage]",
      "kind": "template",
      "displayName": "Link Usage",
      "description": "Sets the link usage.",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "link"
          ]
        }
      },
      "styleSelector": "a",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Link.html#oj-link-[link-usage]",
      "tokens": [
        {
          "name": "[link-usage]",
          "description": "Link Usage",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "standalone",
              "displayName": "Standalone",
              "description": "Set when a link is stand alone, meaning not embedded within other text"
            },
            {
              "name": "embedded",
              "displayName": "Embedded",
              "description": "Set when a link is embedded within other text, for example in a paragraph"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-disabled",
      "kind": "class",
      "displayName": "Disabled Link",
      "description": "Place on a link to show it as disabled",
      "styleSelector": "a",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Link.html#oj-disabled"
    },
    {
      "name": "oj-inputpassword-nocomp",
      "kind": "class",
      "displayName": "Input Password No Comp",
      "description": "This class was originally added to support styling a native DOM element and have it styled like a JET component.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "No longer supported – application developers should use the corresponding JET component."
        }
      ],
      "styleSelector": "input",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoCompHelpers.html#oj-inputpassword-nocomp"
    },
    {
      "name": "oj-inputtext-nocomp",
      "kind": "class",
      "displayName": "Input Text No Comp",
      "description": "This class was originally added to support styling a native DOM element and have it styled like a JET component.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "No longer supported – application developers should use the corresponding JET component."
        }
      ],
      "styleSelector": "input",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoCompHelpers.html#oj-inputtext-nocomp"
    },
    {
      "name": "oj-textarea-nocomp",
      "kind": "class",
      "displayName": "Input Text Area No Comp",
      "description": "This class was originally added to support styling a native DOM element and have it styled like a JET component.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "No longer supported – application developers should use the corresponding JET component."
        }
      ],
      "styleSelector": "textarea",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoCompHelpers.html#oj-textarea-nocomp"
    },
    {
      "name": "oj-body",
      "kind": "class",
      "displayName": "noTag body",
      "description": "When tags are not themed by default, you can create a body tag and add class=\"oj-body\"",
      "styleSelector": "body",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-body"
    },
    {
      "name": "oj-header",
      "kind": "class",
      "displayName": "noTag Heading",
      "description": "When tags are not themed by default, you can Create a heading tag (h1 to h6) and add class=\"oj-header\".",
      "styleSelector": "h1, h2, h3, h4, h5, h6",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-header"
    },
    {
      "name": "oj-hr",
      "kind": "class",
      "displayName": "noTag Horizontal Line",
      "description": "When tags are not themed by default, you can create a hr tag and add class=\"oj-hr\"",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-hr"
    },
    {
      "name": "oj-link",
      "kind": "class",
      "displayName": "noTag Link",
      "description": "When tags are not themed by default, you can Create a link tag and add class=\"oj-link\"",
      "styleSelector": "a",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-link"
    },
    {
      "name": "oj-ol",
      "kind": "class",
      "displayName": "noTag ordered List",
      "description": "When tags are not themed by default, you can create a ol tag and add class=\"oj-ol\"",
      "styleSelector": "ol",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-ol"
    },
    {
      "name": "oj-p",
      "kind": "class",
      "displayName": "noTag paragraph",
      "description": "When tags are not themed by default, you can create a Paragraph tag and add class=\"oj-p\"",
      "styleSelector": "p",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-p"
    },
    {
      "name": "oj-ul",
      "kind": "class",
      "displayName": "noTag unordered List",
      "description": "When tags are not themed by default, you can create a ul tag and add class=\"oj-ul\"",
      "styleSelector": "ul",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/NoTag.html#oj-ul"
    },
    {
      "name": "offcanvas-edge",
      "kind": "set",
      "displayName": "Off-canvas Edge",
      "description": "Specifies the default for OffcanvasUtils static methods when applying the offcanvas on the given edge.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Offcanvas.html#offcanvas-edge",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-offcanvas-start",
          "kind": "class",
          "displayName": "Off-canvas Start Edge",
          "description": "Default to applying the offcanvas to the start edge.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
            }
          ],
          "styleSelector": ".oj-offcanvas-outer-wrapper > div"
        },
        {
          "name": "oj-offcanvas-end",
          "kind": "class",
          "displayName": "Off-canvas End Edge",
          "description": "Default to applying the offcanvas to the end edge.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
            }
          ],
          "styleSelector": ".oj-offcanvas-outer-wrapper > div"
        },
        {
          "name": "oj-offcanvas-top",
          "kind": "class",
          "displayName": "Off-canvas Top Edge",
          "description": "Default to applying the offcanvas to the top edge.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
            }
          ],
          "styleSelector": ".oj-offcanvas-outer-wrapper > div"
        },
        {
          "name": "oj-offcanvas-bottom",
          "kind": "class",
          "displayName": "Off-canvas Bottom Edge",
          "description": "Default to applying the offcanvas to the bottom edge.",
          "status": [
            {
              "type": "deprecated",
              "since": "12.0.0",
              "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
            }
          ],
          "styleSelector": ".oj-offcanvas-outer-wrapper > div"
        }
      ]
    },
    {
      "name": "oj-offcanvas-inner-wrapper",
      "kind": "class",
      "displayName": "Off-canvas Inner Wrapper",
      "description": "Applied to the inner wrapper of the page level offcanvas.",
      "status": [
        {
          "type": "deprecated",
          "since": "6.0.0",
          "description": "Offcanvas inner wrapper is no longer supported."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Offcanvas.html#oj-offcanvas-inner-wrapper"
    },
    {
      "name": "oj-offcanvas-outer-wrapper",
      "kind": "class",
      "displayName": "Off-canvas Outer Wrapper",
      "description": "Applied to the outer most element of the offcanvas.",
      "status": [
        {
          "type": "deprecated",
          "since": "12.0.0",
          "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
        }
      ],
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Offcanvas.html#oj-offcanvas-outer-wrapper"
    },
    {
      "name": "oj-offcanvas-overlay-shadow",
      "kind": "class",
      "displayName": "Off-canvas Drop Shadow",
      "description": "Add this marker class to an overlay offcanvas to show a drop shadow when it is open.",
      "status": [
        {
          "type": "deprecated",
          "since": "12.0.0",
          "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
        }
      ],
      "styleSelector": ".oj-offcanvas-outer-wrapper > div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Offcanvas.html#oj-offcanvas-overlay-shadow"
    },
    {
      "name": "oj-offcanvas-page",
      "kind": "class",
      "displayName": "Off-canvas Page",
      "description": "Applied to the outer wrapper of the page level offcanvas.",
      "status": [
        {
          "type": "deprecated",
          "since": "12.0.0",
          "description": "Please use <oj-drawer-layout> or <oj-drawer-layout> components instead."
        }
      ],
      "styleSelector": ".oj-offcanvas-outer-wrapper",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Offcanvas.html#oj-offcanvas-page"
    },
    {
      "name": "oj-palette-dvt-next",
      "kind": "class",
      "displayName": "Palette DVT Next",
      "description": "Use the new proposed color set for Data Visualizations.",
      "styleSelector": "*",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Palette.html#oj-palette-dvt-next"
    },
    {
      "name": "panel-border-radius",
      "kind": "set",
      "displayName": "Panel Border Radius",
      "description": "Classes to remove default border radius for different corners.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-border-radius",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-border-radius-0-top-start",
          "kind": "class",
          "displayName": "Panel Border Radius 0 top start corner",
          "description": "Removes default border radius of top start corner (top left in ltr mode, top right in rtl mode)",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-border-radius-0-top-end",
          "kind": "class",
          "displayName": "Panel Border Radius 0 top end corner",
          "description": "Removes default border radius of top end corner (top right in ltr mode, top left in rtl mode)",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-border-radius-0-bottom-start",
          "kind": "class",
          "displayName": "Panel Border Radius 0 bottom start corner",
          "description": "Removes default border radius of bottom start corner (bottom left in ltr mode, bottom right in rtl mode)",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-border-radius-0-bottom-end",
          "kind": "class",
          "displayName": "Panel Border Radius 0 bottom end corner",
          "description": "Removes default border radius of bottom end corner (bottom right in ltr mode, bottom left in rtl mode)",
          "styleSelector": ".oj-panel"
        }
      ]
    },
    {
      "name": "panel-collapse",
      "kind": "set",
      "displayName": "Panel Collapse",
      "description": "Classes that can be used for panel collapse functionality.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-collapse",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-resize-button",
          "kind": "class",
          "displayName": "Panel Resize Button",
          "styleSelector": ".oj-panel oj-button"
        },
        {
          "name": "oj-panel-collapse-icon",
          "kind": "class",
          "displayName": "Panel Collapse Icon",
          "styleSelector": ".oj-panel-resize-button > span"
        }
      ]
    },
    {
      "name": "panel-depth",
      "kind": "set",
      "displayName": "Panel Depth",
      "description": "Classes that gives a panel some depth.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-depth",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-shadow-xs",
          "kind": "class",
          "displayName": "Extra small shadow",
          "description": "Gives a panel a extra small depth shadow",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-shadow-sm",
          "kind": "class",
          "displayName": "Small shadow",
          "description": "Gives a panel a small depth shadow",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-shadow-md",
          "kind": "class",
          "displayName": "Medium shadow",
          "description": "Gives a panel a medium depth shadow",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-shadow-lg",
          "kind": "class",
          "displayName": "Large shadow",
          "description": "Gives a panel a large depth shadow",
          "styleSelector": ".oj-panel"
        },
        {
          "name": "oj-panel-shadow-xl",
          "kind": "class",
          "displayName": "Extra large shadow",
          "description": "Gives a panel a extra large depth shadow",
          "styleSelector": ".oj-panel"
        }
      ]
    },
    {
      "name": "panel-drag",
      "kind": "set",
      "displayName": "Panel Drag",
      "description": "Classes that can be used to create a panel drag handle.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-drag",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-drag-handle",
          "kind": "class",
          "displayName": "Panel Drag Handle",
          "styleSelector": ".oj-panel > div"
        },
        {
          "name": "oj-panel-drag-icon",
          "kind": "class",
          "displayName": "Panel Drag Icon",
          "styleSelector": ".oj-panel-drag-handle > span"
        }
      ]
    },
    {
      "name": "panel-expand",
      "kind": "set",
      "displayName": "Panel Expand",
      "description": "Classes that can be used for panel expand functionality.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-expand",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-resize-button",
          "kind": "class",
          "displayName": "Panel Resize Button",
          "styleSelector": ".oj-panel oj-button"
        },
        {
          "name": "oj-panel-expand-icon",
          "kind": "class",
          "displayName": "Panel Expand Icon",
          "styleSelector": ".oj-panel-resize-button > span"
        }
      ]
    },
    {
      "name": "panel-remove",
      "kind": "set",
      "displayName": "Panel Remove",
      "description": "Classes that can be used to create a panel remove button.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#panel-remove",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-panel-remove-button",
          "kind": "class",
          "displayName": "Panel Remove Button",
          "styleSelector": ".oj-panel oj-button"
        },
        {
          "name": "oj-panel-remove-icon",
          "kind": "class",
          "displayName": "Panel Remove Icon",
          "styleSelector": ".oj-panel-remove-button > span"
        }
      ]
    },
    {
      "name": "oj-panel-[alt1-5]",
      "kind": "template",
      "displayName": "Panel Color",
      "description": "This class can be placed on an element for alternate colored panels.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "use oj-bg-* classes instead."
        }
      ],
      "styleSelector": ".oj-panel",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#oj-panel-[alt1-5]",
      "tokens": [
        {
          "name": "[alt1-5]",
          "description": "Alternate colored panels",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "alt1",
              "displayName": "Panel color white",
              "description": "alt1 color white"
            },
            {
              "name": "alt2",
              "displayName": "Panel color blue",
              "description": "alt2 color blue"
            },
            {
              "name": "alt3",
              "displayName": "Panel color yellow",
              "description": "alt3 color yellow"
            },
            {
              "name": "alt4",
              "displayName": "Panel color pink",
              "description": "alt4 color pink"
            },
            {
              "name": "alt5",
              "displayName": "Panel color grey",
              "description": "alt5 color grey"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-panel",
      "kind": "class",
      "displayName": "Default Panel",
      "description": "Creates a default panel.",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "panel"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#oj-panel"
    },
    {
      "name": "oj-panel-border-radius-0",
      "kind": "class",
      "displayName": "Remove panel border-radius",
      "description": "Place on a panel to show it as selected",
      "styleSelector": ".oj-panel",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#oj-panel-border-radius-0"
    },
    {
      "name": "oj-panel-padding",
      "kind": "class",
      "displayName": "Default panel padding",
      "description": "Panel has padding by default, this class gives default panel padding to a non-panel so things line up, it would be used on something like an oj-action-card. This class uses the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#oj-panel-padding"
    },
    {
      "name": "oj-selected",
      "kind": "class",
      "displayName": "Selected panel",
      "description": "Place on a panel to show it as selected",
      "styleSelector": ".oj-panel",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Panel.html#oj-selected"
    },
    {
      "name": "oj-[size]-[1-12]",
      "kind": "template",
      "displayName": "Number of Columns by screen size",
      "description": "Configures the number of responsive grid columns. See the Help documentation for more information.",
      "styleSelector": ".oj-flex-item",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveGrid.html#oj-[size]-[1-12]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[1-12]",
          "description": "Number of grid columns, with a maximum of 12",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1",
              "displayName": "1 column",
              "description": "1 column wide"
            },
            {
              "name": "2",
              "displayName": "2 columns",
              "description": "2 columns wide"
            },
            {
              "name": "3",
              "displayName": "3 columns",
              "description": "3 columns wide"
            },
            {
              "name": "4",
              "displayName": "4 columns",
              "description": "4 columns wide"
            },
            {
              "name": "5",
              "displayName": "5 columns",
              "description": "5 columns wide"
            },
            {
              "name": "6",
              "displayName": "6 columns",
              "description": "6 columns wide"
            },
            {
              "name": "7",
              "displayName": "7 columns",
              "description": "7 columns wide"
            },
            {
              "name": "8",
              "displayName": "8 columns",
              "description": "8 columns wide"
            },
            {
              "name": "9",
              "displayName": "9 columns",
              "description": "9 columns wide"
            },
            {
              "name": "10",
              "displayName": "10 columns",
              "description": "10 columns wide"
            },
            {
              "name": "11",
              "displayName": "11 columns",
              "description": "11 columns wide"
            },
            {
              "name": "12",
              "displayName": "12 columns",
              "description": "12 columns wide"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-even-cols-[1-5]",
      "kind": "template",
      "displayName": "Number of Columns in 4 column layout by screen size",
      "description": "Configures a responsive 4-column layout. See the Help documentation for more information.",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveGrid.html#oj-[size]-even-cols-[1-5]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[1-5]",
          "description": "Number of grid columns in a 4-column screen layout",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1",
              "displayName": "1 column",
              "description": "1 column wide"
            },
            {
              "name": "2",
              "displayName": "2 columns",
              "description": "2 columns wide"
            },
            {
              "name": "3",
              "displayName": "3 columns",
              "description": "3 columns wide"
            },
            {
              "name": "4",
              "displayName": "4 columns",
              "description": "4 columns wide"
            },
            {
              "name": "5",
              "displayName": "5 columns",
              "description": "5 columns wide"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-odd-cols-[1-12]",
      "kind": "template",
      "displayName": "Number of Columns in 2 column layout by screen size",
      "description": "Configures a responsive 2-column layout. See the Help documentation for more information.",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveGrid.html#oj-[size]-odd-cols-[1-12]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[1-12]",
          "description": "Number of grid columns, with a maximum of 12",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1",
              "displayName": "1 column",
              "description": "1 column wide"
            },
            {
              "name": "2",
              "displayName": "2 columns",
              "description": "2 columns wide"
            },
            {
              "name": "3",
              "displayName": "3 columns",
              "description": "3 columns wide"
            },
            {
              "name": "4",
              "displayName": "4 columns",
              "description": "4 columns wide"
            },
            {
              "name": "5",
              "displayName": "5 columns",
              "description": "5 columns wide"
            },
            {
              "name": "6",
              "displayName": "6 columns",
              "description": "6 columns wide"
            },
            {
              "name": "7",
              "displayName": "7 columns",
              "description": "7 columns wide"
            },
            {
              "name": "8",
              "displayName": "8 columns",
              "description": "8 columns wide"
            },
            {
              "name": "9",
              "displayName": "9 columns",
              "description": "9 columns wide"
            },
            {
              "name": "10",
              "displayName": "10 columns",
              "description": "10 columns wide"
            },
            {
              "name": "11",
              "displayName": "11 columns",
              "description": "11 columns wide"
            },
            {
              "name": "12",
              "displayName": "12 columns",
              "description": "12 columns wide"
            }
          ]
        }
      ]
    },
    {
      "name": "deprecated-col-default-width",
      "kind": "class",
      "displayName": "deprecated",
      "description": "Deprecated class meant to help transition to the current responsive grid",
      "status": [
        {
          "type": "deprecated",
          "since": "3.0.0",
          "description": "use the new responsive grid classes."
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveGrid.html#deprecated-col-default-width"
    },
    {
      "name": "oj-[size-down]-hide",
      "kind": "template",
      "displayName": "Hide Content by screen size and below",
      "description": "Hide content at the specified screen size and below.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size-down]-hide",
      "tokens": [
        {
          "name": "[size-down]",
          "description": "Screen Size and Down",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "md-down",
              "displayName": "Medium Down",
              "description": "Medium and small screen size range"
            },
            {
              "name": "lg-down",
              "displayName": "Large Down",
              "description": "Large, medium, and small size range"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-float-end",
      "kind": "template",
      "displayName": "Float Content to the end for a screen size and above",
      "description": "Float content the the end (to the right in left to right languages, to the left in right to left languages) at the specified screen size and above.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-float-end",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-float-start",
      "kind": "template",
      "displayName": "Float Content to the start for a screen size and above",
      "description": "Float content the the start (to the left in left to right languages, to the right in right to left languages) at the specified screen size and above.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-float-start",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-hide",
      "kind": "template",
      "displayName": "Hide Content by screen size and above",
      "description": "Hide content at the specified screen size and above.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-hide",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-only-float-end",
      "kind": "template",
      "displayName": "Float Content to the end for a specific screen size only",
      "description": "Float content the the end (to the right in left to right languages, to the left in right to left languages) at the specified screen size.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-only-float-end",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-only-float-start",
      "kind": "template",
      "displayName": "Float Content to the start for a specific screen size",
      "description": "Float content the the start (to the left in left to right languages, to the right in right to left languages) at the specified screen size.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-only-float-start",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-only-hide",
      "kind": "template",
      "displayName": "Hide Content for specific screen size only",
      "description": "Hide content at the specified screen size only.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-only-hide",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-only-text-align-end",
      "kind": "template",
      "displayName": "Text align content to the end for a specific screen size only",
      "description": "Text-align content the the end (to the right in left to right languages, to the left in right to left languages) at the specified screen size.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-only-text-align-end",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-text-align-end",
      "kind": "template",
      "displayName": "Text align to the end for a screen size and above",
      "description": "Text align content the the end (to the right in left to right languages, to the left in right to left languages) at the specified screen size and above.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveHelpers.html#oj-[size]-text-align-end",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size-only]-width-[width]",
      "kind": "template",
      "displayName": "Width by screen size",
      "description": "Sets the width based upon a certain screen size. oj-sm-only* applies only to a small screen. oj-md-only* applies only to a medium screen. oj-lg-only* applies only to a large screen.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSizing.html#oj-[size-only]-width-[width]",
      "tokens": [
        {
          "name": "[size-only]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm-only",
              "displayName": "Small",
              "description": "Small screen size range only"
            },
            {
              "name": "md-only",
              "displayName": "Medium",
              "description": "Medium screen size range only"
            },
            {
              "name": "lg-only",
              "displayName": "Large",
              "description": "Large screen size range only"
            }
          ]
        },
        {
          "name": "[width]",
          "description": "Width",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1/2",
              "displayName": "1/2 width",
              "description": "width: 50%;"
            },
            {
              "name": "1/3",
              "displayName": "1/3 width",
              "description": "width: 33.333333%;"
            },
            {
              "name": "2/3",
              "displayName": "2/3 width",
              "description": "width: 66.666667%;"
            },
            {
              "name": "1/4",
              "displayName": "1/4 width",
              "description": "width: 25%;"
            },
            {
              "name": "3/4",
              "displayName": "3/4 width",
              "description": "width: 75%;"
            },
            {
              "name": "1/5",
              "displayName": "1/5 width",
              "description": "width: 20%;"
            },
            {
              "name": "2/5",
              "displayName": "2/5 width",
              "description": "width: 40%;"
            },
            {
              "name": "3/5",
              "displayName": "3/5 width",
              "description": "width: 60%;"
            },
            {
              "name": "4/5",
              "displayName": "4/5 width",
              "description": "width: 80%;"
            },
            {
              "name": "full",
              "displayName": "100% width",
              "description": "width: 100%;"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-width-[width]",
      "kind": "template",
      "displayName": "Width by minimum screen size",
      "description": "Sets the width based upon a minimum screen size. oj-sm-* applies to small width and up screens. oj-md-* applies to medium width and up screens. oj-lg-* applies to large width and up screens. oj-xl-* applies to extra large screens only. These classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSizing.html#oj-[size]-width-[width]",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[width]",
          "description": "Width",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1/2",
              "displayName": "1/2 width",
              "description": "width: 50%;"
            },
            {
              "name": "1/3",
              "displayName": "1/3 width",
              "description": "width: 33.333333%;"
            },
            {
              "name": "2/3",
              "displayName": "2/3 width",
              "description": "width: 66.666667%;"
            },
            {
              "name": "1/4",
              "displayName": "1/4 width",
              "description": "width: 25%;"
            },
            {
              "name": "3/4",
              "displayName": "3/4 width",
              "description": "width: 75%;"
            },
            {
              "name": "1/5",
              "displayName": "1/5 width",
              "description": "width: 20%;"
            },
            {
              "name": "2/5",
              "displayName": "2/5 width",
              "description": "width: 40%;"
            },
            {
              "name": "3/5",
              "displayName": "3/5 width",
              "description": "width: 60%;"
            },
            {
              "name": "4/5",
              "displayName": "4/5 width",
              "description": "width: 80%;"
            },
            {
              "name": "full",
              "displayName": "100% width",
              "description": "width: 100%;"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size-only]-margin-[multiplier](-edge)",
      "kind": "template",
      "displayName": "margin with multiplier by screen size",
      "description": "Add some margin with a multiplier to an element based upon a certain screen size. oj-sm-only* applies only to a small screen. oj-md-only* applies only to a medium screen. oj-lg-only* applies only to a large screen. There is no oj-xl-only-*, use oj-xl-* instead.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-[size-only]-margin-[multiplier](-edge)",
      "tokens": [
        {
          "name": "[size-only]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm-only",
              "displayName": "Small",
              "description": "Small screen size range only"
            },
            {
              "name": "md-only",
              "displayName": "Medium",
              "description": "Medium screen size range only"
            },
            {
              "name": "lg-only",
              "displayName": "Large",
              "description": "Large screen size range only"
            }
          ]
        },
        {
          "name": "[multiplier]",
          "description": "Multiplier Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "0",
              "description": "zero(no) unit of spacing"
            },
            {
              "name": "1x",
              "displayName": "1x",
              "description": "Single unit of spacing"
            },
            {
              "name": "2x",
              "displayName": "2x",
              "description": "Two times the single unit of spacing"
            },
            {
              "name": "3x",
              "displayName": "3x",
              "description": "Three times the single unit of spacing"
            },
            {
              "name": "4x",
              "displayName": "4x",
              "description": "Four times the single unit of spacing"
            },
            {
              "name": "5x",
              "displayName": "5x",
              "description": "Five times the 1x unit of spacing"
            },
            {
              "name": "6x",
              "displayName": "6x",
              "description": "Six times the 1x unit of spacing"
            },
            {
              "name": "7x",
              "displayName": "7x",
              "description": "Seven times the 1x unit of spacing"
            },
            {
              "name": "8x",
              "displayName": "8x",
              "description": "Eight times the 1x unit of spacing"
            },
            {
              "name": "9x",
              "displayName": "9x",
              "description": "Nine times the 1x unit of spacing"
            },
            {
              "name": "10x",
              "displayName": "10x",
              "description": "Ten times the 1x unit of spacing"
            },
            {
              "name": "11x",
              "displayName": "11x",
              "description": "Eleven times the 1x unit of spacing"
            },
            {
              "name": "12x",
              "displayName": "12x",
              "description": "Tweleve times the 1x unit of spacing"
            }
          ]
        },
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size-only]-padding-[multiplier](-edge)",
      "kind": "template",
      "displayName": "Padding with multiplier by screen size",
      "description": "Add some padding with a multiplier to an element based upon a certain screen size. oj-sm-only* applies only to a small screen. oj-md-only* applies only to a medium screen. oj-lg-only* applies only to a large screen. There is no oj-xl-only-*, use oj-xl-* instead.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-[size-only]-padding-[multiplier](-edge)",
      "tokens": [
        {
          "name": "[size-only]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm-only",
              "displayName": "Small",
              "description": "Small screen size range only"
            },
            {
              "name": "md-only",
              "displayName": "Medium",
              "description": "Medium screen size range only"
            },
            {
              "name": "lg-only",
              "displayName": "Large",
              "description": "Large screen size range only"
            }
          ]
        },
        {
          "name": "[multiplier]",
          "description": "Multiplier Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "0",
              "description": "zero(no) unit of spacing"
            },
            {
              "name": "1x",
              "displayName": "1x",
              "description": "Single unit of spacing"
            },
            {
              "name": "2x",
              "displayName": "2x",
              "description": "Two times the single unit of spacing"
            },
            {
              "name": "3x",
              "displayName": "3x",
              "description": "Three times the single unit of spacing"
            },
            {
              "name": "4x",
              "displayName": "4x",
              "description": "Four times the single unit of spacing"
            },
            {
              "name": "5x",
              "displayName": "5x",
              "description": "Five times the 1x unit of spacing"
            },
            {
              "name": "6x",
              "displayName": "6x",
              "description": "Six times the 1x unit of spacing"
            },
            {
              "name": "7x",
              "displayName": "7x",
              "description": "Seven times the 1x unit of spacing"
            },
            {
              "name": "8x",
              "displayName": "8x",
              "description": "Eight times the 1x unit of spacing"
            },
            {
              "name": "9x",
              "displayName": "9x",
              "description": "Nine times the 1x unit of spacing"
            },
            {
              "name": "10x",
              "displayName": "10x",
              "description": "Ten times the 1x unit of spacing"
            },
            {
              "name": "11x",
              "displayName": "11x",
              "description": "Eleven times the 1x unit of spacing"
            },
            {
              "name": "12x",
              "displayName": "12x",
              "description": "Tweleve times the 1x unit of spacing"
            }
          ]
        },
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-margin-[multiplier](-edge)",
      "kind": "template",
      "displayName": "margin with multiplier by minimum screen size",
      "description": "Add some margin with a multiplier to an element based upon a minimum screen size. oj-sm-* applies to small width and up screens. oj-md-* applies to medium width and up screens. oj-lg-* applies to large width and up screens. oj-xl-* applies to extra large screens only. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-[size]-margin-[multiplier](-edge)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[multiplier]",
          "description": "Multiplier Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "0",
              "description": "zero(no) unit of spacing"
            },
            {
              "name": "1x",
              "displayName": "1x",
              "description": "Single unit of spacing"
            },
            {
              "name": "2x",
              "displayName": "2x",
              "description": "Two times the single unit of spacing"
            },
            {
              "name": "3x",
              "displayName": "3x",
              "description": "Three times the single unit of spacing"
            },
            {
              "name": "4x",
              "displayName": "4x",
              "description": "Four times the single unit of spacing"
            },
            {
              "name": "5x",
              "displayName": "5x",
              "description": "Five times the 1x unit of spacing"
            },
            {
              "name": "6x",
              "displayName": "6x",
              "description": "Six times the 1x unit of spacing"
            },
            {
              "name": "7x",
              "displayName": "7x",
              "description": "Seven times the 1x unit of spacing"
            },
            {
              "name": "8x",
              "displayName": "8x",
              "description": "Eight times the 1x unit of spacing"
            },
            {
              "name": "9x",
              "displayName": "9x",
              "description": "Nine times the 1x unit of spacing"
            },
            {
              "name": "10x",
              "displayName": "10x",
              "description": "Ten times the 1x unit of spacing"
            },
            {
              "name": "11x",
              "displayName": "11x",
              "description": "Eleven times the 1x unit of spacing"
            },
            {
              "name": "12x",
              "displayName": "12x",
              "description": "Tweleve times the 1x unit of spacing"
            }
          ]
        },
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-[size]-padding-[multiplier](-edge)",
      "kind": "template",
      "displayName": "Padding with multiplier by minimum screen size",
      "description": "Add some padding with a multiplier to an element based upon a minimum screen size. oj-sm-* applies to small width and up screens. oj-md-* applies to medium width and up screens. oj-lg-* applies to large width and up screens. oj-xl-* applies to extra large screens only. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-[size]-padding-[multiplier](-edge)",
      "tokens": [
        {
          "name": "[size]",
          "description": "Screen Size",
          "styleRelation": "inclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small screen size range"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium screen size range"
            },
            {
              "name": "lg",
              "displayName": "Large",
              "description": "Large screen size range"
            },
            {
              "name": "xl",
              "displayName": "X-Large",
              "description": "Extra large screen size and up"
            }
          ]
        },
        {
          "name": "[multiplier]",
          "description": "Multiplier Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "0",
              "displayName": "0",
              "description": "zero(no) unit of spacing"
            },
            {
              "name": "1x",
              "displayName": "1x",
              "description": "Single unit of spacing"
            },
            {
              "name": "2x",
              "displayName": "2x",
              "description": "Two times the single unit of spacing"
            },
            {
              "name": "3x",
              "displayName": "3x",
              "description": "Three times the single unit of spacing"
            },
            {
              "name": "4x",
              "displayName": "4x",
              "description": "Four times the single unit of spacing"
            },
            {
              "name": "5x",
              "displayName": "5x",
              "description": "Five times the 1x unit of spacing"
            },
            {
              "name": "6x",
              "displayName": "6x",
              "description": "Six times the 1x unit of spacing"
            },
            {
              "name": "7x",
              "displayName": "7x",
              "description": "Seven times the 1x unit of spacing"
            },
            {
              "name": "8x",
              "displayName": "8x",
              "description": "Eight times the 1x unit of spacing"
            },
            {
              "name": "9x",
              "displayName": "9x",
              "description": "Nine times the 1x unit of spacing"
            },
            {
              "name": "10x",
              "displayName": "10x",
              "description": "Ten times the 1x unit of spacing"
            },
            {
              "name": "11x",
              "displayName": "11x",
              "description": "Eleven times the 1x unit of spacing"
            },
            {
              "name": "12x",
              "displayName": "12x",
              "description": "Tweleve times the 1x unit of spacing"
            }
          ]
        },
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-margin(-edge)",
      "kind": "template",
      "displayName": "Margin",
      "description": "Add some margin",
      "status": [
        {
          "type": "deprecated",
          "since": "4.0.0",
          "description": "use the 2x responsive margin classes instead, meaning oj-sm-margin-2x(-edge)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-margin(-edge)",
      "tokens": [
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-margin-lg(-edge)",
      "kind": "template",
      "displayName": "Margin",
      "description": "Add some margin",
      "status": [
        {
          "type": "deprecated",
          "since": "4.0.0",
          "description": "use the 4x responsive margin classes instead, meaning oj-sm-margin-4x(-edge)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-margin-lg(-edge)",
      "tokens": [
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-padding(-edge)",
      "kind": "template",
      "displayName": "Padding",
      "description": "Add some padding",
      "status": [
        {
          "type": "deprecated",
          "since": "4.0.0",
          "description": "use the 2x responsive padding classes instead, meaning oj-sm-padding-2x(-edge)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-padding(-edge)",
      "tokens": [
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-padding-lg(-edge)",
      "kind": "template",
      "displayName": "Padding",
      "description": "Add some padding",
      "status": [
        {
          "type": "deprecated",
          "since": "4.0.0",
          "description": "use the 4x responsive padding classes instead, meaning oj-sm-padding-4x(-edge)"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ResponsiveSpacing.html#oj-padding-lg(-edge)",
      "tokens": [
        {
          "name": "(-edge)",
          "description": "Edge Values",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "-start",
              "displayName": "Start",
              "description": "Applies to start edge (left edge in ltr mode, right edge in rtl mode)"
            },
            {
              "name": "-end",
              "displayName": "End",
              "description": "Applies to end edge (right edge in ltr mode, left edge in rtl mode)"
            },
            {
              "name": "-top",
              "displayName": "Top",
              "description": "Applies to top edge"
            },
            {
              "name": "-bottom",
              "displayName": "Bottom",
              "description": "Applies to bottom edge"
            },
            {
              "name": "-horizontal",
              "displayName": "Horizontal",
              "description": "Applies to start and end edges"
            },
            {
              "name": "-vertical",
              "displayName": "Vertical",
              "description": "Applies to top and and bottom edges"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-scale-[scale-size]",
      "kind": "template",
      "displayName": "Scale",
      "description": "Sets the Scale.",
      "extension": {
        "themes": {
          "unsupportedThemes": [
            "Alta",
            "Stable"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Scale.html#oj-scale-[scale-size]",
      "tokens": [
        {
          "name": "[scale-size]",
          "description": "Scale Sizes",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "sm",
              "displayName": "Small",
              "description": "Small Scale"
            },
            {
              "name": "md",
              "displayName": "Medium",
              "description": "Medium Scale"
            }
          ]
        }
      ]
    },
    {
      "name": "text-size",
      "kind": "set",
      "displayName": "Text Size",
      "description": "Classes for small or xs text.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Replace oj-text-sm with oj-typography-body-sm. Replace oj-text-xs with oj-typography-body-xs"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#text-size",
      "styleRelation": "exclusive",
      "styleItems": [
        {
          "name": "oj-text-sm",
          "kind": "class",
          "displayName": "Small Text",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "Use oj-typography-body-sm instead"
            }
          ]
        },
        {
          "name": "oj-text-xs",
          "kind": "class",
          "displayName": "Extra Small Text",
          "status": [
            {
              "type": "deprecated",
              "since": "9.0.0",
              "description": "Use oj-typography-body-xs instead"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-line-clamp-[line-clamp-level]",
      "kind": "template",
      "displayName": "Line Clamp",
      "description": "Line clamp utility classes can be used to truncate text with an ellipsis after a certain number of lines. These classes rely on the -webkit-line-clamp property (see caniuse.com for browser support) and in addition set overflow to hidden.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-line-clamp-[line-clamp-level]",
      "tokens": [
        {
          "name": "[line-clamp-level]",
          "description": "Line Clamp Level",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "1",
              "displayName": "1 line",
              "description": "Line Clamp at 1 line"
            },
            {
              "name": "2",
              "displayName": "2 lines",
              "description": "Line Clamp at 2 lines"
            },
            {
              "name": "3",
              "displayName": "3 lines",
              "description": "Line Clamp at 3 lines"
            },
            {
              "name": "4",
              "displayName": "4 lines",
              "description": "Line Clamp at 4 lines"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-text-color-[text-color]",
      "kind": "template",
      "displayName": "Text Colors",
      "description": "Sets the text color. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-text-color-[text-color]",
      "tokens": [
        {
          "name": "[text-color]",
          "description": "Text Colors",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "primary",
              "displayName": "Primary text color",
              "description": "Primary text color"
            },
            {
              "name": "secondary",
              "displayName": "Secondary text color",
              "description": "Secondary text color"
            },
            {
              "name": "disabled",
              "displayName": "Disabled text color",
              "description": "Disabled text color"
            },
            {
              "name": "danger",
              "displayName": "Danger text color",
              "description": "Danger text color"
            },
            {
              "name": "warning",
              "displayName": "Warning text color",
              "description": "Warning text color"
            },
            {
              "name": "success",
              "displayName": "Success text color",
              "description": "Success text color"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-typography-[typography-level]",
      "kind": "template",
      "displayName": "Typography",
      "description": "Sets the font weight, font size, and line height. In Redwood these classes use the !important rule.",
      "extension": {
        "oracle": {
          "uxSpecs": [
            "typography"
          ]
        }
      },
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-typography-[typography-level]",
      "tokens": [
        {
          "name": "[typography-level]",
          "description": "Typography Level",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "heading-2xl",
              "displayName": "Heading 2xl",
              "description": "Extra Extra Large Heading"
            },
            {
              "name": "heading-xl",
              "displayName": "Heading xl",
              "description": "Extra Large Heading"
            },
            {
              "name": "heading-lg",
              "displayName": "Heading lg",
              "description": "Large Heading"
            },
            {
              "name": "heading-md",
              "displayName": "Heading md",
              "description": "Medium Heading"
            },
            {
              "name": "heading-sm",
              "displayName": "Heading sm",
              "description": "Smaller Heading"
            },
            {
              "name": "heading-xs",
              "displayName": "Heading xs",
              "description": "Extra Small Heading"
            },
            {
              "name": "subheading-2xl",
              "displayName": "Subheading 2xl",
              "description": "Extra Extra Large Subheading"
            },
            {
              "name": "subheading-xl",
              "displayName": "Subheading xl",
              "description": "Extra Large subheading"
            },
            {
              "name": "subheading-lg",
              "displayName": "Subheading lg",
              "description": "Large subheading"
            },
            {
              "name": "subheading-md",
              "displayName": "Subheading md",
              "description": "Medium subheading"
            },
            {
              "name": "subheading-sm",
              "displayName": "Subheading sm",
              "description": "Smaller subheading"
            },
            {
              "name": "subheading-xs",
              "displayName": "Subheading xs",
              "description": "Extra Small subheading"
            },
            {
              "name": "body-xl",
              "displayName": "Body xl",
              "description": "Extra Large Body"
            },
            {
              "name": "body-lg",
              "displayName": "Body lg",
              "description": "Large Body"
            },
            {
              "name": "body-md",
              "displayName": "Body md",
              "description": "Medium Body"
            },
            {
              "name": "body-sm",
              "displayName": "Body sm",
              "description": "Small Body"
            },
            {
              "name": "body-xs",
              "displayName": "Body xs",
              "description": "Extra Small Body"
            },
            {
              "name": "body-2xs",
              "displayName": "Body 2xs",
              "description": "Extra Extra Small Body"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-typography-[typography-weight]",
      "kind": "template",
      "displayName": "Typography Weight",
      "description": "Sets the font weight to semi bold or bold, meant to be used in conjunction with oj-typography-body-*. In Redwood these classes use the !important rule.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-typography-[typography-weight]",
      "tokens": [
        {
          "name": "[typography-weight]",
          "description": "Typography Weight",
          "styleRelation": "exclusive",
          "values": [
            {
              "name": "semi-bold",
              "displayName": "Semi Bold",
              "description": "Set the font weight to semi bold"
            },
            {
              "name": "bold",
              "displayName": "Bold",
              "description": "Set the font weight to bold"
            }
          ]
        }
      ]
    },
    {
      "name": "oj-text-disabled-color",
      "kind": "class",
      "displayName": "Disabled Text Styling",
      "description": "Class to show disabled text.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use oj-text-color-disabled instead"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-text-disabled-color"
    },
    {
      "name": "oj-text-primary-color",
      "kind": "class",
      "displayName": "Primary Text Styling",
      "description": "Class to show primary text. In some themes this class may have no effect.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use oj-text-color-primary instead"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-text-primary-color"
    },
    {
      "name": "oj-text-secondary-color",
      "kind": "class",
      "displayName": "Secondary Text Styling",
      "description": "Class to show secondary text. In some themes this class may have no effect.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use oj-text-color-secondary instead"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-text-secondary-color"
    },
    {
      "name": "oj-text-tertiary-color",
      "kind": "class",
      "displayName": "Tertiary Text Styling",
      "description": "Class to show tertiary text. In some themes this class may have no effect.",
      "status": [
        {
          "type": "deprecated",
          "since": "9.0.0",
          "description": "Use oj-text-color-secondary instead"
        }
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Text.html#oj-text-tertiary-color"
    },
    {
      "name": "oj-toolbar-row",
      "kind": "class",
      "displayName": "ToolBar Row",
      "description": "Each oj-toolbar-row element is a row containing one or more toolbars. These rows go inside an oj-toolbars element.",
      "styleSelector": ".oj-toolbars > div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ToolbarSets.html#oj-toolbar-row"
    },
    {
      "name": "oj-toolbars",
      "kind": "class",
      "displayName": "Multiple Toolbar Layout",
      "description": "An outer element representing a multiple toolbar layout, containing one or more oj-toolbar-row elements.",
      "styleSelector": "div",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/ToolbarSets.html#oj-toolbars"
    }
  ],
  "styleVariables": [
    {
      "description": "Badge background color",
      "name": "oj-badge-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge text color",
      "name": "oj-badge-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge font size",
      "name": "oj-badge-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge font weight",
      "name": "oj-badge-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge font stretch",
      "name": "oj-badge-font-stretch",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge height",
      "name": "oj-badge-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Badge border radius",
      "name": "oj-badge-border-radius",
      "formats": [
        "length",
        "percentage"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/Badge.html#oj-css-badge-set"
    },
    {
      "description": "Neutral palette color 10",
      "name": "oj-palette-neutral-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 20",
      "name": "oj-palette-neutral-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 30",
      "name": "oj-palette-neutral-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 40",
      "name": "oj-palette-neutral-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 50",
      "name": "oj-palette-neutral-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 60",
      "name": "oj-palette-neutral-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 70",
      "name": "oj-palette-neutral-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 80",
      "name": "oj-palette-neutral-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 90",
      "name": "oj-palette-neutral-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 100",
      "name": "oj-palette-neutral-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 110",
      "name": "oj-palette-neutral-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 120",
      "name": "oj-palette-neutral-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 130",
      "name": "oj-palette-neutral-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 140",
      "name": "oj-palette-neutral-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 150",
      "name": "oj-palette-neutral-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 160",
      "name": "oj-palette-neutral-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 170",
      "name": "oj-palette-neutral-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 180",
      "name": "oj-palette-neutral-rgb-180",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 190",
      "name": "oj-palette-neutral-rgb-190",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Neutral palette color 200",
      "name": "oj-palette-neutral-rgb-200",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-a"
    },
    {
      "description": "Brand palette color 10",
      "name": "oj-palette-brand-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 20",
      "name": "oj-palette-brand-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 30",
      "name": "oj-palette-brand-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 40",
      "name": "oj-palette-brand-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 50",
      "name": "oj-palette-brand-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 60",
      "name": "oj-palette-brand-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 70",
      "name": "oj-palette-brand-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 80",
      "name": "oj-palette-brand-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 90",
      "name": "oj-palette-brand-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 100",
      "name": "oj-palette-brand-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 110",
      "name": "oj-palette-brand-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 120",
      "name": "oj-palette-brand-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 130",
      "name": "oj-palette-brand-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 140",
      "name": "oj-palette-brand-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 150",
      "name": "oj-palette-brand-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 160",
      "name": "oj-palette-brand-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Brand palette color 170",
      "name": "oj-palette-brand-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-b"
    },
    {
      "description": "Danger palette color 10",
      "name": "oj-palette-danger-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 20",
      "name": "oj-palette-danger-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 30",
      "name": "oj-palette-danger-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 40",
      "name": "oj-palette-danger-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 50",
      "name": "oj-palette-danger-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 60",
      "name": "oj-palette-danger-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 70",
      "name": "oj-palette-danger-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 80",
      "name": "oj-palette-danger-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 90",
      "name": "oj-palette-danger-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 100",
      "name": "oj-palette-danger-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 110",
      "name": "oj-palette-danger-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 120",
      "name": "oj-palette-danger-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 130",
      "name": "oj-palette-danger-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 140",
      "name": "oj-palette-danger-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 150",
      "name": "oj-palette-danger-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 160",
      "name": "oj-palette-danger-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Danger palette color 170",
      "name": "oj-palette-danger-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-c"
    },
    {
      "description": "Warning palette color 10",
      "name": "oj-palette-warning-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 20",
      "name": "oj-palette-warning-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 30",
      "name": "oj-palette-warning-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 40",
      "name": "oj-palette-warning-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 50",
      "name": "oj-palette-warning-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 60",
      "name": "oj-palette-warning-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 70",
      "name": "oj-palette-warning-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 80",
      "name": "oj-palette-warning-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 90",
      "name": "oj-palette-warning-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 100",
      "name": "oj-palette-warning-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 110",
      "name": "oj-palette-warning-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 120",
      "name": "oj-palette-warning-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 130",
      "name": "oj-palette-warning-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 140",
      "name": "oj-palette-warning-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 150",
      "name": "oj-palette-warning-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 160",
      "name": "oj-palette-warning-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Warning palette color 170",
      "name": "oj-palette-warning-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-d"
    },
    {
      "description": "Success palette color 10",
      "name": "oj-palette-success-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 20",
      "name": "oj-palette-success-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 30",
      "name": "oj-palette-success-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 40",
      "name": "oj-palette-success-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 50",
      "name": "oj-palette-success-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 60",
      "name": "oj-palette-success-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 70",
      "name": "oj-palette-success-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 80",
      "name": "oj-palette-success-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 90",
      "name": "oj-palette-success-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 100",
      "name": "oj-palette-success-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 110",
      "name": "oj-palette-success-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 120",
      "name": "oj-palette-success-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 130",
      "name": "oj-palette-success-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 140",
      "name": "oj-palette-success-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 150",
      "name": "oj-palette-success-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 160",
      "name": "oj-palette-success-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Success palette color 170",
      "name": "oj-palette-success-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-e"
    },
    {
      "description": "Info palette color 10",
      "name": "oj-palette-info-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 20",
      "name": "oj-palette-info-rgb-20",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 30",
      "name": "oj-palette-info-rgb-30",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 40",
      "name": "oj-palette-info-rgb-40",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 50",
      "name": "oj-palette-info-rgb-50",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 60",
      "name": "oj-palette-info-rgb-60",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 70",
      "name": "oj-palette-info-rgb-70",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 80",
      "name": "oj-palette-info-rgb-80",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 90",
      "name": "oj-palette-info-rgb-90",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 100",
      "name": "oj-palette-info-rgb-100",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 110",
      "name": "oj-palette-info-rgb-110",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 120",
      "name": "oj-palette-info-rgb-120",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 130",
      "name": "oj-palette-info-rgb-130",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 140",
      "name": "oj-palette-info-rgb-140",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 150",
      "name": "oj-palette-info-rgb-150",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 160",
      "name": "oj-palette-info-rgb-160",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Info palette color 170",
      "name": "oj-palette-info-rgb-170",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-f"
    },
    {
      "description": "Data Visualization palette color - 1st series",
      "name": "oj-palette-dvt-rgb-1",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 2nd series",
      "name": "oj-palette-dvt-rgb-2",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 3rd series",
      "name": "oj-palette-dvt-rgb-3",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 4th series",
      "name": "oj-palette-dvt-rgb-4",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 5th series",
      "name": "oj-palette-dvt-rgb-5",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 6th series",
      "name": "oj-palette-dvt-rgb-6",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 7th series",
      "name": "oj-palette-dvt-rgb-7",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 8th series",
      "name": "oj-palette-dvt-rgb-8",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 9th series",
      "name": "oj-palette-dvt-rgb-9",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 10th series",
      "name": "oj-palette-dvt-rgb-10",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 11th series",
      "name": "oj-palette-dvt-rgb-11",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Data Visualization palette color - 12th series",
      "name": "oj-palette-dvt-rgb-12",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-g"
    },
    {
      "description": "Main text color",
      "name": "oj-core-text-color-primary",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Secondary text color",
      "name": "oj-core-text-color-secondary",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Disabled text color",
      "name": "oj-core-text-color-disabled",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Brand text color",
      "name": "oj-core-text-color-brand",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Danger text color",
      "name": "oj-core-text-color-danger",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Warning text color",
      "name": "oj-core-text-color-warning",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Success text color",
      "name": "oj-core-text-color-success",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "General background color for content, for example for panels",
      "name": "oj-core-bg-color-content",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Hover background color",
      "name": "oj-core-bg-color-hover",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Active background color",
      "name": "oj-core-bg-color-active",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Selected background color",
      "name": "oj-core-bg-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Selected border color",
      "name": "oj-core-border-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Disabled color 1",
      "name": "oj-core-color-disabled-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Disabled color 2",
      "name": "oj-core-color-disabled-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Large icon size",
      "name": "oj-core-icon-size-lg",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Small icon size",
      "name": "oj-core-icon-size-sm",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Divider color",
      "name": "oj-core-divider-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Divider margin",
      "name": "oj-core-divider-margin",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Focus border color",
      "name": "oj-core-focus-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Clickable cursor",
      "name": "oj-core-cursor-clickable",
      "keywords": [
        "auto",
        "pointer"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Drag and drop color 1",
      "name": "oj-core-drag-drop-color-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Drag and drop color 2",
      "name": "oj-core-drag-drop-color-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Drag and drop line color",
      "name": "oj-core-drag-drop-line-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Touch target min size",
      "name": "oj-core-touch-target-min-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Box shadow rgb values",
      "name": "oj-core-box-shadow-rgb",
      "formats": [
        "rgb_values"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Extra small box shadow",
      "name": "oj-core-box-shadow-xs",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Small box shadow",
      "name": "oj-core-box-shadow-sm",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Medium box shadow",
      "name": "oj-core-box-shadow-md",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Large box shadow",
      "name": "oj-core-box-shadow-lg",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Extra large box shadow",
      "name": "oj-core-box-shadow-xl",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Dropdown box shadow",
      "name": "oj-core-dropdown-box-shadow",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Modal scrim color",
      "name": "oj-core-scrim-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "1*x spacing, where x is a small unit like .25rem",
      "name": "oj-core-spacing-1x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "2*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-2x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "3*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-3x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "4*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-4x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "5*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-5x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "6*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-6x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "7*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-7x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "8*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-8x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "9*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-9x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "10*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-10x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "11*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-11x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "12*x spacing, where x is some small unit like .25rem",
      "name": "oj-core-spacing-12x",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Small border radius",
      "name": "oj-core-border-radius-sm",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Medium border radius",
      "name": "oj-core-border-radius-md",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Large border radius",
      "name": "oj-core-border-radius-lg",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "xl border radius",
      "name": "oj-core-border-radius-xl",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Z index for popup",
      "name": "oj-core-z-index-popup",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Z index for dialog",
      "name": "oj-core-z-index-dialog",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Z index for messages",
      "name": "oj-core-z-index-messages",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-h"
    },
    {
      "description": "Neutral color",
      "name": "oj-core-neutral-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral color 2",
      "name": "oj-core-neutral-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral color 3",
      "name": "oj-core-neutral-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral contrast color",
      "name": "oj-core-neutral-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral secondary color",
      "name": "oj-core-neutral-secondary-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral secondary color 2",
      "name": "oj-core-neutral-secondary-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral secondary color 3",
      "name": "oj-core-neutral-secondary-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Neutral secondary contrast color",
      "name": "oj-core-neutral-secondary-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Brand color 1",
      "name": "oj-core-brand-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Brand color 2",
      "name": "oj-core-brand-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Brand color 3",
      "name": "oj-core-brand-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Brand color contrast",
      "name": "oj-core-brand-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color 1",
      "name": "oj-core-danger-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color 2",
      "name": "oj-core-danger-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color 3",
      "name": "oj-core-danger-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color contrast",
      "name": "oj-core-danger-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color secondary 1",
      "name": "oj-core-danger-secondary-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color secondary 2",
      "name": "oj-core-danger-secondary-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color secondary 3",
      "name": "oj-core-danger-secondary-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Danger color secondary contrast",
      "name": "oj-core-danger-secondary-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning color 1",
      "name": "oj-core-warning-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning color 2",
      "name": "oj-core-warning-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning color 3",
      "name": "oj-core-warning-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning color contrast",
      "name": "oj-core-warning-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning secondary color 1",
      "name": "oj-core-warning-secondary-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning secondary color 2",
      "name": "oj-core-warning-secondary-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning secondary color 3",
      "name": "oj-core-warning-secondary-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Warning secondary color contrast",
      "name": "oj-core-warning-secondary-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success color 1",
      "name": "oj-core-success-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success color 2",
      "name": "oj-core-success-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success color 3",
      "name": "oj-core-success-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success color contrast",
      "name": "oj-core-success-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success secondary color 1",
      "name": "oj-core-success-secondary-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success secondary color 2",
      "name": "oj-core-success-secondary-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success secondary color 3",
      "name": "oj-core-success-secondary-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Success secondary color contrast",
      "name": "oj-core-success-secondary-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info color 1",
      "name": "oj-core-info-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info color 2",
      "name": "oj-core-info-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info color 3",
      "name": "oj-core-info-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info color contrast",
      "name": "oj-core-info-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info secondary color 1",
      "name": "oj-core-info-secondary-1",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info secondary color 2",
      "name": "oj-core-info-secondary-2",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info secondary color 3",
      "name": "oj-core-info-secondary-3",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "Info secondary color contrast",
      "name": "oj-core-info-secondary-contrast",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-i"
    },
    {
      "description": "2xl heading font size",
      "name": "oj-typography-heading-2xl-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xl heading font weight",
      "name": "oj-typography-heading-2xl-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xl heading line height, value must be a unitless number",
      "name": "oj-typography-heading-2xl-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl heading font size",
      "name": "oj-typography-heading-xl-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl heading font weight",
      "name": "oj-typography-heading-xl-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl heading line height, value must be a unitless number",
      "name": "oj-typography-heading-xl-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large heading font size",
      "name": "oj-typography-heading-lg-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large heading font weight",
      "name": "oj-typography-heading-lg-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large heading line height, value must be a unitless number",
      "name": "oj-typography-heading-lg-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium heading font size",
      "name": "oj-typography-heading-md-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium heading font weight",
      "name": "oj-typography-heading-md-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium heading line height, value must be a unitless number",
      "name": "oj-typography-heading-md-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small heading font size",
      "name": "oj-typography-heading-sm-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small heading font weight",
      "name": "oj-typography-heading-sm-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small heading line height, value must be a unitless number",
      "name": "oj-typography-heading-sm-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs heading font size",
      "name": "oj-typography-heading-xs-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs heading font weight",
      "name": "oj-typography-heading-xs-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs heading line height, value must be a unitless number",
      "name": "oj-typography-heading-xs-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xl subheading font size",
      "name": "oj-typography-subheading-2xl-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xl subheading font weight",
      "name": "oj-typography-subheading-2xl-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xl subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-2xl-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl subheading font size",
      "name": "oj-typography-subheading-xl-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl subheading font weight",
      "name": "oj-typography-subheading-xl-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-xl-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large subheading font size",
      "name": "oj-typography-subheading-lg-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large subheading font weight",
      "name": "oj-typography-subheading-lg-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-lg-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium subheading font size",
      "name": "oj-typography-subheading-md-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium subheading font weight",
      "name": "oj-typography-subheading-md-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-md-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small subheading font size",
      "name": "oj-typography-subheading-sm-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small subheading font weight",
      "name": "oj-typography-subheading-sm-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-sm-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs subheading font size",
      "name": "oj-typography-subheading-xs-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs subheading font weight",
      "name": "oj-typography-subheading-xs-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs subheading line height, value must be a unitless number",
      "name": "oj-typography-subheading-xs-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl body font size",
      "name": "oj-typography-body-xl-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xl body line height, value must be a unitless number",
      "name": "oj-typography-body-xl-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large body font size",
      "name": "oj-typography-body-lg-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Large body line height, value must be a unitless number",
      "name": "oj-typography-body-lg-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium body font size",
      "name": "oj-typography-body-md-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Medium body line height, value must be a unitless number",
      "name": "oj-typography-body-md-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small body font size",
      "name": "oj-typography-body-sm-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Small body line height, value must be a unitless number",
      "name": "oj-typography-body-sm-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs body font size",
      "name": "oj-typography-body-xs-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "xs body line height, value must be a unitless number",
      "name": "oj-typography-body-xs-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xs body font size",
      "name": "oj-typography-body-2xs-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "2xs body line height, value must be a unitless number",
      "name": "oj-typography-body-2xs-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-j"
    },
    {
      "description": "Scrollbar thumb hover color. Note that scrollbar variables are only applied on Windows",
      "name": "oj-scrollbar-thumb-color-hover",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-k"
    },
    {
      "description": "The track color is normally transparent, but this background color is used when a scrollbar is forced to show. Note that scrollbar variables are only applied on Windows",
      "name": "oj-scrollbar-track-color-force",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-k"
    },
    {
      "description": "Extra short animation duration",
      "name": "oj-animation-duration-xshort",
      "formats": [
        "time"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-l"
    },
    {
      "description": "Short animation duration",
      "name": "oj-animation-duration-short",
      "formats": [
        "time"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-l"
    },
    {
      "description": "Medium animation duration",
      "name": "oj-animation-duration-medium",
      "formats": [
        "time"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-l"
    },
    {
      "description": "Long animation duration",
      "name": "oj-animation-duration-long",
      "formats": [
        "time"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-l"
    },
    {
      "description": "Extra long animation duration",
      "name": "oj-animation-duration-xlong",
      "formats": [
        "time"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-l"
    },
    {
      "description": "Timing function for animation ease-in-out",
      "name": "oj-animation-ease-in-out",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-m"
    },
    {
      "description": "Timing function for animation ease-out",
      "name": "oj-animation-ease-out",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-m"
    },
    {
      "description": "Timing function for animation ease-in",
      "name": "oj-animation-ease-in",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-m"
    },
    {
      "description": "Ripple animation effect background color",
      "name": "oj-animation-effect-ripple-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-n"
    },
    {
      "description": "Animation skeleton background start color",
      "name": "oj-animation-skeleton-bg-start-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-n"
    },
    {
      "description": "Animation skeleton background end color",
      "name": "oj-animation-skeleton-bg-end-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-n"
    },
    {
      "description": "Default font family",
      "name": "oj-html-font-family",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Default font size",
      "name": "oj-html-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Body background color",
      "name": "oj-body-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Heading text color",
      "name": "oj-heading-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Heading bottom margin",
      "name": "oj-heading-margin-bottom",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Heading top margin",
      "name": "oj-heading-margin-top",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Subheading top margin",
      "name": "oj-subheading-margin-top",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Subheading bottom margin",
      "name": "oj-subheading-margin-bottom",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Paragraph bottom margin",
      "name": "oj-paragraph-margin-bottom",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "List top margin",
      "name": "oj-list-margin-top",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Nested list start padding",
      "name": "oj-list-nested-padding-start",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "List item line height",
      "name": "oj-list-item-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Unordered list style type",
      "name": "oj-list-unordered-style-type",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Link text decoration",
      "name": "oj-link-text-decoration",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Link hover text decoration",
      "name": "oj-link-text-decoration-hover",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Link text color",
      "name": "oj-link-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Active link text color",
      "name": "oj-link-text-color-active",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Visited link text color",
      "name": "oj-link-text-color-visited",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Embedded link text decoration",
      "name": "oj-link-embedded-text-decoration",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Embedded link hover text decoration",
      "name": "oj-link-embedded-text-decoration-hover",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Embedded link bottom border width",
      "name": "oj-link-embedded-border-bottom-width",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Embedded link bottom border hover width",
      "name": "oj-link-embedded-border-bottom-width-hover",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-o"
    },
    {
      "description": "Small text field width",
      "name": "oj-text-field-sm-width",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Medium text field width",
      "name": "oj-text-field-md-width",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field border radius",
      "name": "oj-text-field-border-radius",
      "formats": [
        "length",
        "percentage"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field border width",
      "name": "oj-text-field-border-width",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field spacing between icon and text",
      "name": "oj-text-field-icon-to-text-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field spacing between icon and element edge",
      "name": "oj-text-field-icon-to-edge-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field spacing between text and element edge",
      "name": "oj-text-field-text-to-edge-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field text align",
      "name": "oj-text-field-text-align",
      "keywords": [
        "start",
        "end"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field height",
      "name": "oj-text-field-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field font size",
      "name": "oj-text-field-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field text color",
      "name": "oj-text-field-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field background color",
      "name": "oj-text-field-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field border color",
      "name": "oj-text-field-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field placeholder color",
      "name": "oj-text-field-placeholder-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field placeholder font style",
      "name": "oj-text-field-placeholder-font-style",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Disabled text field background color",
      "name": "oj-text-field-bg-color-disabled",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Disabled text field border color",
      "name": "oj-text-field-border-color-disabled",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Disabled text field text color",
      "name": "oj-text-field-text-color-disabled",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Focus text field border color",
      "name": "oj-text-field-border-color-focus",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field inside edge height",
      "name": "oj-text-field-inside-edge-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field inside edge top padding",
      "name": "oj-text-field-inside-edge-padding-top",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field inside label edge error color",
      "name": "oj-text-field-inside-edge-label-color-error",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field inside label edge focus color",
      "name": "oj-text-field-inside-edge-label-color-focus",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "Text field inside label edge warning color",
      "name": "oj-text-field-inside-edge-label-color-warning",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-p"
    },
    {
      "description": "User assistance inline text color",
      "name": "oj-user-assistance-inline-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-q"
    },
    {
      "description": "User assistance inline font size",
      "name": "oj-user-assistance-inline-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-q"
    },
    {
      "description": "Collection list row height, --oj-collection-list* variables are for list view and table when display=list",
      "name": "oj-collection-list-row-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection list cell padding vertical, --oj-collection-list* variables are for list view and table when display=list",
      "name": "oj-collection-list-cell-padding-vertical",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection grid row height, --oj-collection-grid* variables are for data grid and table when display=grid",
      "name": "oj-collection-grid-row-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection grid header height, --oj-collection-grid* variables are for data grid and table when display=grid",
      "name": "oj-collection-grid-header-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection grid cell padding, --oj-collection-grid* variables are for data grid and table when display=grid",
      "name": "oj-collection-grid-cell-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection background color",
      "name": "oj-collection-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection border color",
      "name": "oj-collection-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection free space background color",
      "name": "oj-collection-free-space-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection default sort icon display",
      "name": "oj-collection-default-sort-icon-display",
      "keywords": [
        "none",
        "block"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection banded cell background color",
      "name": "oj-collection-cell-banded-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header font size",
      "name": "oj-collection-header-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header font weight",
      "name": "oj-collection-header-font-weight",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header background color",
      "name": "oj-collection-header-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header text color",
      "name": "oj-collection-header-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header hover background color",
      "name": "oj-collection-header-bg-color-hover",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection header selected background color",
      "name": "oj-collection-header-bg-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection editable cell border color focus",
      "name": "oj-collection-editable-cell-border-color-focus",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "Collection editable cell background color on read only",
      "name": "oj-collection-editable-cell-bg-color-read-only",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-r"
    },
    {
      "description": "DVT danger color, used as a gauge threshold color and stock chart falling color",
      "name": "oj-dvt-danger-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT warning color, used as a gauge threshold color",
      "name": "oj-dvt-warning-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT success color, used as a gauge threshold color and stock chart rising color",
      "name": "oj-dvt-success-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT item selected border color, used for selected node borders in sunburst, diagram, treemap, timeline, thematic map, nbox, and gantt",
      "name": "oj-dvt-item-border-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT item contrast color, used as hover/selected inner contrast color in sunburst, diagram, treemap, nbox , and thematic map nodes",
      "name": "oj-dvt-item-contrast-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT marquee color, used by marquee multiple selection-mode in chart",
      "name": "oj-dvt-marquee-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT marquee border color, used by marquee multiple selection-mode in chart",
      "name": "oj-dvt-marquee-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT contrast line color, used for reference line contrast line, data cursor contrast line in chart, and marquee inner stroke",
      "name": "oj-dvt-contrast-line-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT reference object area color, used for reference area color in chart and gantt",
      "name": "oj-dvt-reference-object-area-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT reference object line color, used for reference line primary line, data cursor contrast line in chart and gantt",
      "name": "oj-dvt-reference-object-line-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT overview background color, used in overview in diagram and timeline",
      "name": "oj-dvt-overview-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT overview window background color, used in overview in diagram and timeline",
      "name": "oj-dvt-overview-window-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT overview window border color, used in overview in diagram and timeline",
      "name": "oj-dvt-overview-window-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT label small font size, used in chart axis, data label, and legend text",
      "name": "oj-dvt-label-font-size-sm",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT label medium font size, used in sunburst, diagram, and n-box node data labels",
      "name": "oj-dvt-label-font-size-md",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "DVT node hover border color, used when hovering over nodes in sunburst and treemap",
      "name": "oj-dvt-node-border-color-hover",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-s"
    },
    {
      "description": "Outlined chrome buttonset internal border color",
      "name": "oj-buttonset-outlined-chrome-internal-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-t"
    },
    {
      "description": "Outlined chrome buttonset internal active border color",
      "name": "oj-buttonset-outlined-chrome-internal-border-color-active",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-t"
    },
    {
      "description": "Outlined chrome buttonset internal selected border color",
      "name": "oj-buttonset-outlined-chrome-internal-border-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-t"
    },
    {
      "description": "Outlined chrome buttonset internal selected disabled border color",
      "name": "oj-buttonset-outlined-chrome-internal-border-color-selected-disabled",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-t"
    },
    {
      "description": "Form control font weight read only",
      "name": "oj-form-control-font-weight-read-only",
      "formats": [
        "font_weight"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-u"
    },
    {
      "description": "List box item padding horizontal",
      "name": "oj-listbox-item-padding-horizontal",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-v"
    },
    {
      "description": "Radio button or checkbox width",
      "name": "oj-radio-checkbox-width",
      "formats": [
        "length",
        "percentage"
      ],
      "keywords": [
        "auto"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Radio button or checkbox row height",
      "name": "oj-radio-checkbox-row-height",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Size of the radio button or checkbox",
      "name": "oj-radio-checkbox-input-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Color of the radio button or checkbox when not selected",
      "name": "oj-radio-checkbox-input-color-unselected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Color of the radio button or checkbox when selected",
      "name": "oj-radio-checkbox-input-color-selected",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Radio button or checkbox label-edge padding",
      "name": "oj-radio-checkbox-label-to-edge-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Padding between radio button or checkbox and label",
      "name": "oj-radio-checkbox-input-to-label-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Padding between radioset edge and radio button or checkboxset edge and checkbox",
      "name": "oj-radio-checkbox-input-to-edge-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Radioset or checkboxset item divider color",
      "name": "oj-radio-checkbox-item-divider-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Radio button or checkbox transformation when active",
      "name": "oj-radio-checkbox-input-transform-active",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Radioset or checkboxset item background color when active",
      "name": "oj-radio-checkbox-item-bg-color-active",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-w"
    },
    {
      "description": "Tooltip border radius",
      "name": "oj-tooltip-border-radius",
      "formats": [
        "length",
        "percentage"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip background color",
      "name": "oj-tooltip-bg-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip border color",
      "name": "oj-tooltip-border-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip text color",
      "name": "oj-tooltip-text-color",
      "formats": [
        "color"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip font size",
      "name": "oj-tooltip-font-size",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip line height",
      "name": "oj-tooltip-line-height",
      "formats": [
        "number"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    },
    {
      "description": "Tooltip padding",
      "name": "oj-tooltip-padding",
      "formats": [
        "length"
      ],
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/14.1/reference-api/CSSVariables.html#oj-css-variables-set-x"
    }
  ]
}