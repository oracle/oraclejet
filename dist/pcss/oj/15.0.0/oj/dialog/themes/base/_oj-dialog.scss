// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the
// version in your the theme specific directory,
// for example dialog/themes/redwood/oj-dialog.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../../utilities/_oj.utilities.modules.scss";

@include module-include-once("common.dialog") {
  /* dialog */
  /* --------------------------------------------------------------- */

  oj-dialog {
    display: none;
  }

  .oj-dialog-container {
    display: flex;
    flex-direction: column;
    overflow: hidden;
    width: 100%;
    height: 100%;
    max-height: inherit;
  }

  /* defines the stacking context of the dialog and for it's children '**/
  .oj-dialog-layer {
    @extend .oj-component-layer;

    z-index: var(--oj-core-z-index-dialog);
  }

  .oj-dialog-layer.oj-focus-within {
    z-index: calc(var(--oj-core-z-index-dialog) + 1);
  }

  .oj-dialog {
    @extend .oj-component-popup;
    width: 600px;
    min-width: 200px;
    max-width: calc(100vw - 3rem);
    max-height: calc(100vh - 3rem);
    height: auto;
    // note: min-height overrides height auto, so do not
    //       specify min-height in combination with height:auto
    box-sizing: border-box;
    box-shadow: var(--oj-dialog-box-shadow);
    background: var(--oj-dialog-bg-color);
    border: 1px solid var(--oj-dialog-border-color);
    border-radius: var(--oj-dialog-border-radius);
  }

  .oj-dialog-sheet {
    width: 100vw;
    max-width: 100vw;
    min-width: initial;
    max-height: 100vh;
    border-radius: var(--oj-dialog-border-radius) var(--oj-dialog-border-radius) 0px 0px;
  }

  .oj-dialog-full {
    min-width: 100vw;
    max-width: 100vw;
    min-height: 100vh;
    max-height: 100vh;
    width: 100vw;
    height: 100vh;
    border-radius: 0px;
  }

  /* this media query is needed to make sure -webkit-fill-available gets applied
     on Safari/iOS only. It returns incorrect values in Chrome. */
  @supports (-webkit-touch-callout: none) {
    /* CSS specific to iOS devices */
    .oj-dialog-sheet {
      max-height: -webkit-fill-available;
    }

    .oj-dialog-full {
      min-height: -webkit-fill-available;
      max-height: -webkit-fill-available;
      height: -webkit-fill-available;
    }
  }

  /* disable body scroll while animating a sheet dialog */
  .oj-dialog-sheet-animating {
    overflow: hidden !important;
  }    

  // resizable oj-dialog should have absolute position
  .oj-dialog.oj-resizable {
    position: absolute;
  }

  .oj-dialog-header {
    flex: 0 0 auto;
    border-width: 0 0 1px 0;
    border-style: solid;
    position: relative;
    // Use flex to align elements in the header (title and close icon)
    display: flex;
    justify-content: space-between;
    padding: var(--oj-dialog-header-padding);
    background-color: var(--oj-dialog-header-bg-color);
    border-bottom-color: var(--oj-dialog-header-border-color);
  }

  .oj-draggable .oj-dialog-header,
  .oj-draggable .oj-dialog-title {
    cursor: move;
  }

  // Adjust margins so the the close button is positioned at the end of the dialog
  .oj-dialog-header-close-wrapper {
    margin-block-start: var(--oj-dialog-cancel-icon-margin-top);
    margin-inline-end: var(--oj-dialog-cancel-icon-margin-end);
  }

  .oj-dialog-title {
    overflow: hidden;
    cursor: default;

    user-select: none;

    // vertically center-align the title within the header
    align-self: center;
    font-size: var(--oj-dialog-title-font-size);
    line-height: var(--oj-dialog-title-line-height);
    color: var(--oj-dialog-title-text-color);
    font-weight: var(--oj-dialog-title-font-weight);
    margin: 0;
    padding: 0;
  }

  // The 'center' setting will center the dialog header text.
  // To achieve a centered title for dialogs that have
  // a close icon, we pad the side that does not have a close icon.
  @if $ojprivateDialogHeaderTextAlign == center {
    .oj-dialog-header {
      justify-content: center;
      text-align: center;
    }

    // For the header flex layout with a centered title, we realize the proper layout
    // by setting margin-left:auto when the header also has a close button.
    .oj-dialog-header-close .oj-dialog-title {
      margin-left: auto;
    }
    html[dir="rtl"] .oj-dialog-header-close .oj-dialog-title {
      margin-right: auto;
    }
    html:not([dir="rtl"]) .oj-dialog-header-close-wrapper {
      margin-left: auto;
    }
  }

  // Padding between the dialog title and the close icon
  .oj-dialog-header-close .oj-dialog-title {
    padding-inline-end: 0.2rem;
  }

  .oj-dialog-content > p:last-child {
    margin-bottom: 0;
  }

  .oj-dialog-content {
    overflow: auto;
    position: relative;
    // enable momentum based scrolling for touch devices
    -webkit-overflow-scrolling: touch;
    // configure the dialog content to grow and shrink on resize
    flex: 1 1 auto;
  }

  .oj-dialog-body-wrapper {
    height: 100%;
  }

  .oj-dialog-body {
    position: relative;
    overflow: auto;
    box-sizing: border-box;

    padding: var(--oj-dialog-body-padding);
  }

  // optional footer separator
  //------------------------------------------
  .oj-dialog-footer-separator {
    border-top: 1px solid var(--oj-core-divider-color);
  }

  .oj-dialog-footer {
    display: flex;
    justify-content: flex-end;
    // Configure the footer content to be fixed height on resize.
    flex: 0 0 auto;
    padding: var(--oj-dialog-footer-padding);
    text-align: end;
  }

  .oj-dialog-footer > .oj-button,
  .oj-dialog-footer > .oj-button > .oj-button-button {
    margin-left: var(--oj-core-spacing-1x); // creates horizontal space between footer buttons
  }

  @if $ojprivateDialogFooterIntegrateButtons == true {
    //
    // With this setting, buttons are integrated (spread) across the entire footer.
    // In addition:
    //   - there is a dividing line above the footer
    //   - there are dividing lines between the buttons
    //   - the first and last buttons have rounded corners
    //
    .oj-dialog-footer > .oj-button,
    .oj-dialog-footer > .oj-button.oj-active,
    .oj-dialog-footer > .oj-button.oj-active.oj-focus,
    .oj-dialog-footer > .oj-button > .oj-button-button {
      margin: 0;
      flex: 1;
    }

    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button:not(:first-child),
    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button.oj-active:not(:first-child),
    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button.oj-active.oj-focus:not(:first-child),
    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button:not(:first-child) > .oj-button-button,
    html[dir="rtl"] .oj-dialog-footer > .oj-button:not(:last-child),
    html[dir="rtl"] .oj-dialog-footer > .oj-button.oj-active:not(:last-child),
    html[dir="rtl"] .oj-dialog-footer > .oj-button.oj-active.oj-focus:not(:last-child),
    html[dir="rtl"] .oj-dialog-footer > .oj-button:not(:last-child) > .oj-button-button {
      border-color: transparent transparent transparent var(--oj-core-divider-color);
    }

    .oj-dialog-footer {
      border-top: 1px solid var(--oj-core-divider-color);
    }

    // Define radius of the first button
    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button:first-child {
      border-left-color: transparent;
      border-radius: 0 0 0 var(--oj-dialog-border-radius);
    }

    html[dir="rtl"] .oj-dialog-footer > .oj-button:first-child {
      border-right-color: transparent;
      border-radius: 0 0 var(--oj-dialog-border-radius) 0;
    }

    // Define radius of the last button
    html:not([dir="rtl"]) .oj-dialog-footer > .oj-button:last-child {
      border-radius: 0 0 var(--oj-dialog-border-radius) 0;
    }

    html[dir="rtl"] .oj-dialog-footer > .oj-button:last-child {
      border-radius: 0 0 0 var(--oj-dialog-border-radius);
    }
  }

  // Disable Chrome's automatic blue outline on the dialog container,
  // the close wrapper, and the close icon.
  .oj-dialog:focus,
  .oj-dialog-header-close-wrapper:focus {
    outline: none;
  }

  // The oj-focus-highlight class applies focus styling that may not be desirable
  // when the focus results from pointer interaction (touch or mouse), but which is
  // needed for accessibility when the focus occurs by a non-pointer mechanism, for
  // example keyboard or initial page load. See also the $privateFocusHighlightPolicy variable,
  // which controls when this class is set.
  // Apply this to the dialog container and the close wrapper.
  .oj-dialog.oj-focus-highlight,
  .oj-dialog-header-close-wrapper.oj-focus-highlight {
    outline: dotted 1px var(--oj-core-focus-border-color);
  }

  //
  // In order to support the proper stacking context for animated nested dialogs,
  // we use the following selector to set the z-index of the animating dialog to
  // the top of the stack. Note that the dialog component adds the oj-animate-open
  // class when a dialog is animating during dialog open.
  //
  .oj-dialog-layer.oj-focus-within,
  .oj-dialog-layer.oj-animate-open {
    z-index: calc(var(--oj-core-z-index-dialog) + 1);
  }


  // icons
  //------------------------------------------

  // DIALOG animation defaults
  //----------------------------------
  //$dialogAnimationDefaults: ();

  $dialogNormalAnimationDefaults: ();
  
  @if ($privateDialogOpenAnimation) {
    $dialogNormalAnimationDefaults: map-merge(
      $dialogNormalAnimationDefaults,
      (
        open: $privateDialogOpenAnimation
      )
    );
  }

  @if ($privateDialogCloseAnimation) {
    $dialogNormalAnimationDefaults: map-merge(
      $dialogNormalAnimationDefaults,
      (
        close: $privateDialogCloseAnimation
      )
    );
  }

  $dialogSheetAnimationDefaults: ();

  @if ($privateDialogOpenAnimationSheet) {
    $dialogSheetAnimationDefaults: map-merge(
      $dialogSheetAnimationDefaults,
      (
        open: $privateDialogOpenAnimationSheet
      )
    );
  }

  @if ($privateDialogCloseAnimationSheet) {
    $dialogSheetAnimationDefaults: map-merge(
      $dialogSheetAnimationDefaults,
      (
        close: $privateDialogCloseAnimationSheet
      )
    );
  }

  $dialogAnimationDefaults: (
    animation: (
      normal: $dialogNormalAnimationDefaults,
      sheet: $dialogSheetAnimationDefaults,
    )
  );

  // option defaults
  //----------------------------------
  $dialogDefaultOptions: ();

  @if ($dialogAnimationDefaults) {
    $dialogDefaultOptions: map-merge(
      $dialogDefaultOptions,
      (
        $dialogAnimationDefaults
      )
    );
  }

  @if ($privateDialogResizeBehaviorOptionDefault) {
    $dialogDefaultOptions: map-merge(
      $dialogDefaultOptions,
      (
        resizeBehavior: $privateDialogResizeBehaviorOptionDefault
      )
    );
  }

  @if ($privateDialogCancelBehaviorOptionDefault) {
    $dialogDefaultOptions: map-merge(
      $dialogDefaultOptions,
      (
        cancelBehavior: $privateDialogCancelBehaviorOptionDefault
      )
    );
  }

  @if ($privateDialogDragAffordanceOptionDefault) {
    $dialogDefaultOptions: map-merge(
      $dialogDefaultOptions,
      (
        dragAffordance: $privateDialogDragAffordanceOptionDefault
      )
    );
  }

  // component default options selector
  .oj-dialog-option-defaults {
    font-family: oj-json-from-map($dialogDefaultOptions) !important;
  }

}
