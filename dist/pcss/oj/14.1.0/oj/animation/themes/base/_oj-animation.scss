// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the
// version in your the theme specific directory,
// for example animation/themes/redwood/oj-animation.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../../utilities/_oj.utilities.modules.scss";

@include module-include-once("common.animation") {
  /*
     * Viewport element for clipping ojModule view host during animation
     * so that the view content doesn't overlap surrounding elements
     */
  .oj-animation-host-viewport {
    overflow: hidden;
  }

  /*
     * ojModule view host for holding view content temporarily during animation
     */
  .oj-animation-host {
    position: relative;
    width: 100%;
    height: 100%;
  }

  $animationModuleEffects: (
    coverLeft: (
      oldViewEffect: (
        effect: "slideOut",
        offsetX: "-30%",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        direction: "left",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: true
    ),
    coverRight: (
      oldViewEffect: (
        effect: "slideOut",
        offsetX: "30%",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        direction: "right",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: true
    ),
    coverUp: (
      newViewEffect: (
        effect: "slideIn",
        direction: "top",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: true
    ),
    fade: (
      oldViewEffect: (
        effect: "fadeOut",
        duration: $privateAnimationDurationMedium,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "fadeIn",
        duration: $privateAnimationDurationMedium,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: false
    ),
    pushStart: (
      oldViewEffect: (
        effect: "slideOut",
        direction: "start",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        direction: "start",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: false
    ),
    pushEnd: (
      oldViewEffect: (
        effect: "slideOut",
        direction: "end",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        direction: "end",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: false
    ),
    revealDown: (
      oldViewEffect: (
        effect: "slideOut",
        direction: "bottom",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewOnTop: false
    ),
    revealLeft: (
      oldViewEffect: (
        effect: "slideOut",
        direction: "left",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        offsetX: "30%",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: false
    ),
    revealRight: (
      oldViewEffect: (
        effect: "slideOut",
        direction: "right",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewEffect: (
        effect: "slideIn",
        offsetX: "-30%",
        duration: $privateAnimationDurationShort,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: false
    ),
    zoomIn: (
      newViewEffect: (
        effect: "zoomIn",
        duration: $privateAnimationDurationMedium,
        timingFunction: "ease-in-out"
      ),
      newViewOnTop: true
    ),
    zoomOut: (
      oldViewEffect: (
        effect: "zoomOut",
        duration: $privateAnimationDurationMedium,
        timingFunction: "ease-in-out",
        persist: "all"
      ),
      newViewOnTop: false
    )
  );

  .oj-animation-module-effects {
    font-family: oj-json-from-map($animationModuleEffects) !important;
  }

  $animationNavigateMethods: ();

  @if ($privateAnimationNavChildDefault) {
    $animationNavigateMethods: map-merge(
      $animationNavigateMethods,
      (
        navChild: $privateAnimationNavChildDefault
      )
    );
  }

  @if ($privateAnimationNavParentDefault) {
    $animationNavigateMethods: map-merge(
      $animationNavigateMethods,
      (
        navParent: $privateAnimationNavParentDefault
      )
    );
  }

  @if ($privateAnimationNavSiblingEarlierDefault) {
    $animationNavigateMethods: map-merge(
      $animationNavigateMethods,
      (
        navSiblingEarlier: $privateAnimationNavSiblingEarlierDefault
      )
    );
  }

  @if ($privateAnimationNavSiblingLaterDefault) {
    $animationNavigateMethods: map-merge(
      $animationNavigateMethods,
      (
        navSiblingLater: $privateAnimationNavSiblingLaterDefault
      )
    );
  }

  .oj-animation-navigate-methods {
    font-family: oj-json-from-map($animationNavigateMethods) !important;
  }

  $animationEffectDefaultOptions: (
    fadeIn: (
      duration: $privateAnimationDurationMedium
    ),
    fadeOut: (
      duration: $privateAnimationDurationMedium
    ),
    expand: (
      duration: $privateAnimationDurationMedium
    ),
    collapse: (
      duration: $privateAnimationDurationMedium
    ),
    zoomIn: (
      duration: $privateAnimationDurationMedium
    ),
    zoomOut: (
      duration: $privateAnimationDurationMedium
    ),
    slideIn: (
      duration: $privateAnimationDurationMedium
    ),
    slideOut: (
      duration: $privateAnimationDurationMedium
    ),
    flipIn: (
      duration: $privateAnimationDurationMedium
    ),
    flipOut: (
      duration: $privateAnimationDurationMedium
    ),
    ripple: (
      duration: $privateAnimationDurationMedium
    )
  );

  .oj-animation-effect-default-options {
    font-family: oj-json-from-map($animationEffectDefaultOptions) !important;
  }

  .oj-animation-effect-ripple {
    background-color: var(--oj-animation-effect-ripple-bg-color);

    opacity: 0.6;
    border-radius: 50%;
    position: absolute;
    width: 140px;
    height: 140px;
    left: 0;
    top: 0;
  }

  @keyframes LoadingGradientAnimation {
    0% {
      background-position: 50%;
    }
    100% {
      background-position: -120%;
    }
  }

  @keyframes SkeletonFadeInAnimation {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  /* Styling for skeleton fade in animation */
  .oj-animation-skeleton-fade-in {
    animation-name: SkeletonFadeInAnimation;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
    animation-duration: 0.75s;
  }

  @keyframes SkeletonFadeOutAnimation {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  /* Styling for skeleton fade out animation */
  .oj-animation-skeleton-fade-out {
    animation-name: SkeletonFadeOutAnimation;
    animation-iteration-count: 1;
    animation-fill-mode: forwards;
    animation-duration: 0.1s;
  }

  @keyframes SkeletonAnimation {
    0% {
      background-color: var(--oj-animation-skeleton-bg-end-color);
    }
    100% {
      background-color: var(--oj-animation-skeleton-bg-start-color);
    }
  }

  /* Styling for skeleton main (loop) animation */
  .oj-animation-skeleton {
    animation-name: SkeletonAnimation;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-duration: 1.5s;
  }
}
